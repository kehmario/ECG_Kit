
My Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e7c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  00012e7c  2**0
                  CONTENTS
  2 .bss          00000150  20000000  20000000  00020000  2**3
                  ALLOC
  3 .stack        00000400  20000150  20000150  00020000  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00012e7c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00012ea4  2**0
                  CONTENTS, READONLY
  6 .debug_info   00024a39  00000000  00000000  00012efd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000356f  00000000  00000000  00037936  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000e892  00000000  00000000  0003aea5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d80  00000000  00000000  00049737  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001238  00000000  00000000  0004a4b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00015bbe  00000000  00000000  0004b6ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001113c  00000000  00000000  000612ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00071380  00000000  00000000  000723e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000023b4  00000000  00000000  000e376c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	50 05 00 20 fd 00 00 00 f9 00 00 00 f9 00 00 00     P.. ............
	...
      2c:	f9 00 00 00 00 00 00 00 00 00 00 00 f9 00 00 00     ................
      3c:	f9 00 00 00 f9 00 00 00 f9 00 00 00 f9 00 00 00     ................
      4c:	f9 00 00 00 f9 00 00 00 f9 00 00 00 f9 00 00 00     ................
      5c:	00 00 00 00 f9 00 00 00 f9 00 00 00 f9 00 00 00     ................
      6c:	f9 00 00 00 f9 00 00 00 d5 13 00 00 f9 00 00 00     ................
      7c:	51 0f 00 00 f9 00 00 00 2d 10 00 00 f9 00 00 00     Q.......-.......

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000000 	.word	0x20000000
      ac:	00000000 	.word	0x00000000
      b0:	00002e7c 	.word	0x00002e7c

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000004 	.word	0x20000004
      e0:	00002e7c 	.word	0x00002e7c
      e4:	00002e7c 	.word	0x00002e7c
      e8:	00000000 	.word	0x00000000

000000ec <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
      ec:	b510      	push	{r4, lr}
	system_init();
      ee:	4b01      	ldr	r3, [pc, #4]	; (f4 <atmel_start_init+0x8>)
      f0:	4798      	blx	r3
}
      f2:	bd10      	pop	{r4, pc}
      f4:	0000034d 	.word	0x0000034d

000000f8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
      f8:	e7fe      	b.n	f8 <Dummy_Handler>
	...

000000fc <Reset_Handler>:
{
      fc:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
      fe:	4a26      	ldr	r2, [pc, #152]	; (198 <Reset_Handler+0x9c>)
     100:	4b26      	ldr	r3, [pc, #152]	; (19c <Reset_Handler+0xa0>)
     102:	429a      	cmp	r2, r3
     104:	d011      	beq.n	12a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     106:	001a      	movs	r2, r3
     108:	4b25      	ldr	r3, [pc, #148]	; (1a0 <Reset_Handler+0xa4>)
     10a:	429a      	cmp	r2, r3
     10c:	d20d      	bcs.n	12a <Reset_Handler+0x2e>
     10e:	4a25      	ldr	r2, [pc, #148]	; (1a4 <Reset_Handler+0xa8>)
     110:	3303      	adds	r3, #3
     112:	1a9b      	subs	r3, r3, r2
     114:	089b      	lsrs	r3, r3, #2
     116:	3301      	adds	r3, #1
     118:	009b      	lsls	r3, r3, #2
     11a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     11c:	481f      	ldr	r0, [pc, #124]	; (19c <Reset_Handler+0xa0>)
     11e:	491e      	ldr	r1, [pc, #120]	; (198 <Reset_Handler+0x9c>)
     120:	588c      	ldr	r4, [r1, r2]
     122:	5084      	str	r4, [r0, r2]
     124:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     126:	429a      	cmp	r2, r3
     128:	d1fa      	bne.n	120 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a1f      	ldr	r2, [pc, #124]	; (1a8 <Reset_Handler+0xac>)
     12c:	4b1f      	ldr	r3, [pc, #124]	; (1ac <Reset_Handler+0xb0>)
     12e:	429a      	cmp	r2, r3
     130:	d20a      	bcs.n	148 <Reset_Handler+0x4c>
     132:	43d3      	mvns	r3, r2
     134:	491d      	ldr	r1, [pc, #116]	; (1ac <Reset_Handler+0xb0>)
     136:	185b      	adds	r3, r3, r1
     138:	2103      	movs	r1, #3
     13a:	438b      	bics	r3, r1
     13c:	3304      	adds	r3, #4
     13e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     140:	2100      	movs	r1, #0
     142:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     144:	4293      	cmp	r3, r2
     146:	d1fc      	bne.n	142 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     148:	4a19      	ldr	r2, [pc, #100]	; (1b0 <Reset_Handler+0xb4>)
     14a:	21ff      	movs	r1, #255	; 0xff
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0xb8>)
     14e:	438b      	bics	r3, r1
     150:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     152:	39fd      	subs	r1, #253	; 0xfd
     154:	2390      	movs	r3, #144	; 0x90
     156:	005b      	lsls	r3, r3, #1
     158:	4a17      	ldr	r2, [pc, #92]	; (1b8 <Reset_Handler+0xbc>)
     15a:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     15c:	4b17      	ldr	r3, [pc, #92]	; (1bc <Reset_Handler+0xc0>)
     15e:	7b9a      	ldrb	r2, [r3, #14]
     160:	312e      	adds	r1, #46	; 0x2e
     162:	438a      	bics	r2, r1
     164:	2120      	movs	r1, #32
     166:	430a      	orrs	r2, r1
     168:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     16a:	7b9a      	ldrb	r2, [r3, #14]
     16c:	210c      	movs	r1, #12
     16e:	438a      	bics	r2, r1
     170:	2108      	movs	r1, #8
     172:	430a      	orrs	r2, r1
     174:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     176:	7b9a      	ldrb	r2, [r3, #14]
     178:	2103      	movs	r1, #3
     17a:	438a      	bics	r2, r1
     17c:	2102      	movs	r1, #2
     17e:	430a      	orrs	r2, r1
     180:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     182:	4a0f      	ldr	r2, [pc, #60]	; (1c0 <Reset_Handler+0xc4>)
     184:	6853      	ldr	r3, [r2, #4]
     186:	2180      	movs	r1, #128	; 0x80
     188:	430b      	orrs	r3, r1
     18a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     18c:	4b0d      	ldr	r3, [pc, #52]	; (1c4 <Reset_Handler+0xc8>)
     18e:	4798      	blx	r3
        main();
     190:	4b0d      	ldr	r3, [pc, #52]	; (1c8 <Reset_Handler+0xcc>)
     192:	4798      	blx	r3
     194:	e7fe      	b.n	194 <Reset_Handler+0x98>
     196:	46c0      	nop			; (mov r8, r8)
     198:	00002e7c 	.word	0x00002e7c
     19c:	20000000 	.word	0x20000000
     1a0:	20000000 	.word	0x20000000
     1a4:	20000004 	.word	0x20000004
     1a8:	20000000 	.word	0x20000000
     1ac:	20000150 	.word	0x20000150
     1b0:	e000ed00 	.word	0xe000ed00
     1b4:	00000000 	.word	0x00000000
     1b8:	41007000 	.word	0x41007000
     1bc:	41004800 	.word	0x41004800
     1c0:	41004000 	.word	0x41004000
     1c4:	00002c71 	.word	0x00002c71
     1c8:	000014a5 	.word	0x000014a5

000001cc <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     1ce:	b085      	sub	sp, #20
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     1d0:	4a1b      	ldr	r2, [pc, #108]	; (240 <ADC_0_init+0x74>)
     1d2:	6a11      	ldr	r1, [r2, #32]
     1d4:	2380      	movs	r3, #128	; 0x80
     1d6:	005b      	lsls	r3, r3, #1
     1d8:	430b      	orrs	r3, r1
     1da:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     1dc:	4a19      	ldr	r2, [pc, #100]	; (244 <ADC_0_init+0x78>)
     1de:	4b1a      	ldr	r3, [pc, #104]	; (248 <ADC_0_init+0x7c>)
     1e0:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, ADC);
	_gclk_enable_channel(ADC_GCLK_ID, CONF_GCLK_ADC_SRC);
	adc_async_init(&ADC_0, ADC, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     1e2:	4c1a      	ldr	r4, [pc, #104]	; (24c <ADC_0_init+0x80>)
     1e4:	4e1a      	ldr	r6, [pc, #104]	; (250 <ADC_0_init+0x84>)
     1e6:	2300      	movs	r3, #0
     1e8:	9302      	str	r3, [sp, #8]
     1ea:	4b1a      	ldr	r3, [pc, #104]	; (254 <ADC_0_init+0x88>)
     1ec:	9301      	str	r3, [sp, #4]
     1ee:	2501      	movs	r5, #1
     1f0:	9500      	str	r5, [sp, #0]
     1f2:	2300      	movs	r3, #0
     1f4:	0022      	movs	r2, r4
     1f6:	4918      	ldr	r1, [pc, #96]	; (258 <ADC_0_init+0x8c>)
     1f8:	0030      	movs	r0, r6
     1fa:	4f18      	ldr	r7, [pc, #96]	; (25c <ADC_0_init+0x90>)
     1fc:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     1fe:	1d22      	adds	r2, r4, #4
     200:	2310      	movs	r3, #16
     202:	2100      	movs	r1, #0
     204:	0030      	movs	r0, r6
     206:	4c16      	ldr	r4, [pc, #88]	; (260 <ADC_0_init+0x94>)
     208:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     20a:	2204      	movs	r2, #4
     20c:	23c0      	movs	r3, #192	; 0xc0
     20e:	05db      	lsls	r3, r3, #23
     210:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     212:	4914      	ldr	r1, [pc, #80]	; (264 <ADC_0_init+0x98>)
     214:	4b14      	ldr	r3, [pc, #80]	; (268 <ADC_0_init+0x9c>)
     216:	628b      	str	r3, [r1, #40]	; 0x28
     218:	23c0      	movs	r3, #192	; 0xc0
     21a:	061b      	lsls	r3, r3, #24
     21c:	628b      	str	r3, [r1, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     21e:	2342      	movs	r3, #66	; 0x42
     220:	5cca      	ldrb	r2, [r1, r3]
	tmp &= ~PORT_PINCFG_PMUXEN;
     222:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     224:	2001      	movs	r0, #1
     226:	4302      	orrs	r2, r0
     228:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     22a:	54ca      	strb	r2, [r1, r3]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     22c:	2231      	movs	r2, #49	; 0x31
     22e:	5c8b      	ldrb	r3, [r1, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     230:	240f      	movs	r4, #15
     232:	43a3      	bics	r3, r4
	tmp |= PORT_PMUX_PMUXE(data);
     234:	4303      	orrs	r3, r0
     236:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     238:	548b      	strb	r3, [r1, r2]

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA02, PINMUX_PA02B_ADC_AIN0);
}
     23a:	b005      	add	sp, #20
     23c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     23e:	46c0      	nop			; (mov r8, r8)
     240:	40000400 	.word	0x40000400
     244:	00004013 	.word	0x00004013
     248:	40000c00 	.word	0x40000c00
     24c:	2000001c 	.word	0x2000001c
     250:	2000005c 	.word	0x2000005c
     254:	200000ac 	.word	0x200000ac
     258:	42002000 	.word	0x42002000
     25c:	0000042d 	.word	0x0000042d
     260:	000004d5 	.word	0x000004d5
     264:	41004400 	.word	0x41004400
     268:	40000004 	.word	0x40000004

0000026c <USART_0_PORT_init>:

void USART_0_PORT_init(void)
{
     26c:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     26e:	4b0e      	ldr	r3, [pc, #56]	; (2a8 <USART_0_PORT_init+0x3c>)
     270:	224a      	movs	r2, #74	; 0x4a
     272:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     274:	2501      	movs	r5, #1
     276:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     278:	2401      	movs	r4, #1
     27a:	4321      	orrs	r1, r4
     27c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     27e:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     280:	2035      	movs	r0, #53	; 0x35
     282:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     284:	3a3b      	subs	r2, #59	; 0x3b
     286:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     288:	3a0c      	subs	r2, #12
     28a:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     28c:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     28e:	214b      	movs	r1, #75	; 0x4b
     290:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     292:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     294:	4322      	orrs	r2, r4
     296:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     298:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     29a:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     29c:	393c      	subs	r1, #60	; 0x3c
     29e:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     2a0:	3121      	adds	r1, #33	; 0x21
     2a2:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2a4:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA10, PINMUX_PA10D_SERCOM2_PAD2);

	gpio_set_pin_function(PA11, PINMUX_PA11D_SERCOM2_PAD3);
}
     2a6:	bd30      	pop	{r4, r5, pc}
     2a8:	41004400 	.word	0x41004400

000002ac <USART_0_CLOCK_init>:
     2ac:	4a04      	ldr	r2, [pc, #16]	; (2c0 <USART_0_CLOCK_init+0x14>)
     2ae:	6a13      	ldr	r3, [r2, #32]
     2b0:	2110      	movs	r1, #16
     2b2:	430b      	orrs	r3, r1
     2b4:	6213      	str	r3, [r2, #32]
     2b6:	4a03      	ldr	r2, [pc, #12]	; (2c4 <USART_0_CLOCK_init+0x18>)
     2b8:	4b03      	ldr	r3, [pc, #12]	; (2c8 <USART_0_CLOCK_init+0x1c>)
     2ba:	805a      	strh	r2, [r3, #2]

void USART_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM2);
	_gclk_enable_channel(SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC);
}
     2bc:	4770      	bx	lr
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	40000400 	.word	0x40000400
     2c4:	00004010 	.word	0x00004010
     2c8:	40000c00 	.word	0x40000c00

000002cc <USART_0_init>:

void USART_0_init(void)
{
     2cc:	b510      	push	{r4, lr}
	USART_0_CLOCK_init();
     2ce:	4b05      	ldr	r3, [pc, #20]	; (2e4 <USART_0_init+0x18>)
     2d0:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM2, (void *)NULL);
     2d2:	2200      	movs	r2, #0
     2d4:	4904      	ldr	r1, [pc, #16]	; (2e8 <USART_0_init+0x1c>)
     2d6:	4805      	ldr	r0, [pc, #20]	; (2ec <USART_0_init+0x20>)
     2d8:	4b05      	ldr	r3, [pc, #20]	; (2f0 <USART_0_init+0x24>)
     2da:	4798      	blx	r3
	USART_0_PORT_init();
     2dc:	4b05      	ldr	r3, [pc, #20]	; (2f4 <USART_0_init+0x28>)
     2de:	4798      	blx	r3
}
     2e0:	bd10      	pop	{r4, pc}
     2e2:	46c0      	nop			; (mov r8, r8)
     2e4:	000002ad 	.word	0x000002ad
     2e8:	42001000 	.word	0x42001000
     2ec:	200000c4 	.word	0x200000c4
     2f0:	00000b61 	.word	0x00000b61
     2f4:	0000026d 	.word	0x0000026d

000002f8 <delay_driver_init>:

void delay_driver_init(void)
{
     2f8:	b510      	push	{r4, lr}
	delay_init(SysTick);
     2fa:	4802      	ldr	r0, [pc, #8]	; (304 <delay_driver_init+0xc>)
     2fc:	4b02      	ldr	r3, [pc, #8]	; (308 <delay_driver_init+0x10>)
     2fe:	4798      	blx	r3
}
     300:	bd10      	pop	{r4, pc}
     302:	46c0      	nop			; (mov r8, r8)
     304:	e000e010 	.word	0xe000e010
     308:	0000080d 	.word	0x0000080d

0000030c <DAC_0_CLOCK_init>:
     30c:	4a04      	ldr	r2, [pc, #16]	; (320 <DAC_0_CLOCK_init+0x14>)
     30e:	6a11      	ldr	r1, [r2, #32]
     310:	2380      	movs	r3, #128	; 0x80
     312:	00db      	lsls	r3, r3, #3
     314:	430b      	orrs	r3, r1
     316:	6213      	str	r3, [r2, #32]
     318:	4a02      	ldr	r2, [pc, #8]	; (324 <DAC_0_CLOCK_init+0x18>)
     31a:	4b03      	ldr	r3, [pc, #12]	; (328 <DAC_0_CLOCK_init+0x1c>)
     31c:	805a      	strh	r2, [r3, #2]
void DAC_0_CLOCK_init(void)
{

	_pm_enable_bus_clock(PM_BUS_APBC, DAC);
	_gclk_enable_channel(DAC_GCLK_ID, CONF_GCLK_DAC_SRC);
}
     31e:	4770      	bx	lr
     320:	40000400 	.word	0x40000400
     324:	00004016 	.word	0x00004016
     328:	40000c00 	.word	0x40000c00

0000032c <DAC_0_init>:

void DAC_0_init(void)
{
     32c:	b510      	push	{r4, lr}
	DAC_0_CLOCK_init();
     32e:	4b03      	ldr	r3, [pc, #12]	; (33c <DAC_0_init+0x10>)
     330:	4798      	blx	r3
	dac_async_init(&DAC_0, DAC);
     332:	4903      	ldr	r1, [pc, #12]	; (340 <DAC_0_init+0x14>)
     334:	4803      	ldr	r0, [pc, #12]	; (344 <DAC_0_init+0x18>)
     336:	4b04      	ldr	r3, [pc, #16]	; (348 <DAC_0_init+0x1c>)
     338:	4798      	blx	r3
	DAC_0_PORT_init();
}
     33a:	bd10      	pop	{r4, pc}
     33c:	0000030d 	.word	0x0000030d
     340:	42002800 	.word	0x42002800
     344:	20000088 	.word	0x20000088
     348:	000007bd 	.word	0x000007bd

0000034c <system_init>:

void system_init(void)
{
     34c:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     34e:	4b0d      	ldr	r3, [pc, #52]	; (384 <system_init+0x38>)
     350:	4798      	blx	r3
	init_mcu();

	ADC_0_init();
     352:	4b0d      	ldr	r3, [pc, #52]	; (388 <system_init+0x3c>)
     354:	4798      	blx	r3

	USART_0_init();
     356:	4b0d      	ldr	r3, [pc, #52]	; (38c <system_init+0x40>)
     358:	4798      	blx	r3

	delay_driver_init();
     35a:	4b0d      	ldr	r3, [pc, #52]	; (390 <system_init+0x44>)
     35c:	4798      	blx	r3
     35e:	4a0d      	ldr	r2, [pc, #52]	; (394 <system_init+0x48>)
     360:	6a13      	ldr	r3, [r2, #32]
     362:	2140      	movs	r1, #64	; 0x40
     364:	430b      	orrs	r3, r1
     366:	6213      	str	r3, [r2, #32]
     368:	4a0b      	ldr	r2, [pc, #44]	; (398 <system_init+0x4c>)
     36a:	4b0c      	ldr	r3, [pc, #48]	; (39c <system_init+0x50>)
     36c:	805a      	strh	r2, [r3, #2]
	timer_init(&TIMER_0, TC1, _tc_get_timer());
     36e:	4b0c      	ldr	r3, [pc, #48]	; (3a0 <system_init+0x54>)
     370:	4798      	blx	r3
     372:	0002      	movs	r2, r0
     374:	490b      	ldr	r1, [pc, #44]	; (3a4 <system_init+0x58>)
     376:	480c      	ldr	r0, [pc, #48]	; (3a8 <system_init+0x5c>)
     378:	4b0c      	ldr	r3, [pc, #48]	; (3ac <system_init+0x60>)
     37a:	4798      	blx	r3

	TIMER_0_init();
	DAC_0_init();
     37c:	4b0c      	ldr	r3, [pc, #48]	; (3b0 <system_init+0x64>)
     37e:	4798      	blx	r3
}
     380:	bd10      	pop	{r4, pc}
     382:	46c0      	nop			; (mov r8, r8)
     384:	00000fb9 	.word	0x00000fb9
     388:	000001cd 	.word	0x000001cd
     38c:	000002cd 	.word	0x000002cd
     390:	000002f9 	.word	0x000002f9
     394:	40000400 	.word	0x40000400
     398:	00004012 	.word	0x00004012
     39c:	40000c00 	.word	0x40000c00
     3a0:	000013af 	.word	0x000013af
     3a4:	42001800 	.word	0x42001800
     3a8:	200000d0 	.word	0x200000d0
     3ac:	00000951 	.word	0x00000951
     3b0:	0000032d 	.word	0x0000032d

000003b4 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
     3b4:	b510      	push	{r4, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
     3b6:	6983      	ldr	r3, [r0, #24]
     3b8:	2b00      	cmp	r3, #0
     3ba:	d000      	beq.n	3be <adc_async_window_threshold_reached+0xa>
		descr->adc_async_cb.monitor(descr, channel);
     3bc:	4798      	blx	r3
	}
}
     3be:	bd10      	pop	{r4, pc}

000003c0 <adc_async_error_occured>:

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
     3c0:	b510      	push	{r4, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
     3c2:	69c3      	ldr	r3, [r0, #28]
     3c4:	2b00      	cmp	r3, #0
     3c6:	d000      	beq.n	3ca <adc_async_error_occured+0xa>
		descr->adc_async_cb.error(descr, channel);
     3c8:	4798      	blx	r3
	}
}
     3ca:	bd10      	pop	{r4, pc}

000003cc <adc_async_channel_conversion_done>:
{
     3cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     3ce:	b083      	sub	sp, #12
     3d0:	0005      	movs	r5, r0
     3d2:	000e      	movs	r6, r1
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
     3d4:	6a03      	ldr	r3, [r0, #32]
     3d6:	5c5b      	ldrb	r3, [r3, r1]
     3d8:	005c      	lsls	r4, r3, #1
     3da:	18e4      	adds	r4, r4, r3
     3dc:	00e4      	lsls	r4, r4, #3
     3de:	6a83      	ldr	r3, [r0, #40]	; 0x28
     3e0:	469c      	mov	ip, r3
     3e2:	4464      	add	r4, ip
	ringbuffer_put(&descr_ch->convert, data);
     3e4:	1d27      	adds	r7, r4, #4
     3e6:	9201      	str	r2, [sp, #4]
     3e8:	466b      	mov	r3, sp
     3ea:	7919      	ldrb	r1, [r3, #4]
     3ec:	0038      	movs	r0, r7
     3ee:	4b0d      	ldr	r3, [pc, #52]	; (424 <STACK_SIZE+0x24>)
     3f0:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
     3f2:	0028      	movs	r0, r5
     3f4:	4b0c      	ldr	r3, [pc, #48]	; (428 <STACK_SIZE+0x28>)
     3f6:	4798      	blx	r3
     3f8:	2801      	cmp	r0, #1
     3fa:	d907      	bls.n	40c <STACK_SIZE+0xc>
		ringbuffer_put(&descr_ch->convert, data >> 8);
     3fc:	9b01      	ldr	r3, [sp, #4]
     3fe:	0a19      	lsrs	r1, r3, #8
     400:	0038      	movs	r0, r7
     402:	4b08      	ldr	r3, [pc, #32]	; (424 <STACK_SIZE+0x24>)
     404:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
     406:	8aa3      	ldrh	r3, [r4, #20]
     408:	3301      	adds	r3, #1
     40a:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
     40c:	8aa3      	ldrh	r3, [r4, #20]
     40e:	3301      	adds	r3, #1
     410:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
     412:	6823      	ldr	r3, [r4, #0]
     414:	2b00      	cmp	r3, #0
     416:	d002      	beq.n	41e <STACK_SIZE+0x1e>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
     418:	0031      	movs	r1, r6
     41a:	0028      	movs	r0, r5
     41c:	4798      	blx	r3
}
     41e:	b003      	add	sp, #12
     420:	bdf0      	pop	{r4, r5, r6, r7, pc}
     422:	46c0      	nop			; (mov r8, r8)
     424:	00000d11 	.word	0x00000d11
     428:	00000ee9 	.word	0x00000ee9

0000042c <adc_async_init>:
{
     42c:	b5f0      	push	{r4, r5, r6, r7, lr}
     42e:	46d6      	mov	lr, sl
     430:	b500      	push	{lr}
     432:	b082      	sub	sp, #8
     434:	0005      	movs	r5, r0
     436:	9101      	str	r1, [sp, #4]
     438:	0016      	movs	r6, r2
     43a:	001c      	movs	r4, r3
     43c:	ab08      	add	r3, sp, #32
     43e:	781f      	ldrb	r7, [r3, #0]
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
     440:	2800      	cmp	r0, #0
     442:	d035      	beq.n	4b0 <adc_async_init+0x84>
     444:	2900      	cmp	r1, #0
     446:	d035      	beq.n	4b4 <adc_async_init+0x88>
     448:	2a00      	cmp	r2, #0
     44a:	d035      	beq.n	4b8 <adc_async_init+0x8c>
     44c:	2000      	movs	r0, #0
     44e:	2f00      	cmp	r7, #0
     450:	d002      	beq.n	458 <adc_async_init+0x2c>
     452:	9809      	ldr	r0, [sp, #36]	; 0x24
     454:	1e43      	subs	r3, r0, #1
     456:	4198      	sbcs	r0, r3
     458:	223f      	movs	r2, #63	; 0x3f
     45a:	4918      	ldr	r1, [pc, #96]	; (4bc <adc_async_init+0x90>)
     45c:	4b18      	ldr	r3, [pc, #96]	; (4c0 <adc_async_init+0x94>)
     45e:	469a      	mov	sl, r3
     460:	4798      	blx	r3
	ASSERT(channel_amount <= (channel_max + 1));
     462:	1c62      	adds	r2, r4, #1
     464:	0ffb      	lsrs	r3, r7, #31
     466:	17d0      	asrs	r0, r2, #31
     468:	42ba      	cmp	r2, r7
     46a:	4158      	adcs	r0, r3
     46c:	b2c0      	uxtb	r0, r0
     46e:	2240      	movs	r2, #64	; 0x40
     470:	4912      	ldr	r1, [pc, #72]	; (4bc <adc_async_init+0x90>)
     472:	47d0      	blx	sl
	for (uint8_t i = 0; i <= channel_max; i++) {
     474:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
     476:	22ff      	movs	r2, #255	; 0xff
     478:	54f2      	strb	r2, [r6, r3]
	for (uint8_t i = 0; i <= channel_max; i++) {
     47a:	3301      	adds	r3, #1
     47c:	b2db      	uxtb	r3, r3
     47e:	429c      	cmp	r4, r3
     480:	d2fa      	bcs.n	478 <adc_async_init+0x4c>
	descr->channel_map    = channel_map;
     482:	622e      	str	r6, [r5, #32]
	descr->channel_max    = channel_max;
     484:	2324      	movs	r3, #36	; 0x24
     486:	54ec      	strb	r4, [r5, r3]
	descr->channel_amount = channel_amount;
     488:	3301      	adds	r3, #1
     48a:	54ef      	strb	r7, [r5, r3]
	descr->descr_ch       = descr_ch;
     48c:	9b09      	ldr	r3, [sp, #36]	; 0x24
     48e:	62ab      	str	r3, [r5, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
     490:	9901      	ldr	r1, [sp, #4]
     492:	0028      	movs	r0, r5
     494:	4b0b      	ldr	r3, [pc, #44]	; (4c4 <adc_async_init+0x98>)
     496:	4798      	blx	r3
	if (init_status) {
     498:	2800      	cmp	r0, #0
     49a:	d105      	bne.n	4a8 <adc_async_init+0x7c>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
     49c:	4b0a      	ldr	r3, [pc, #40]	; (4c8 <adc_async_init+0x9c>)
     49e:	60ab      	str	r3, [r5, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
     4a0:	4b0a      	ldr	r3, [pc, #40]	; (4cc <adc_async_init+0xa0>)
     4a2:	602b      	str	r3, [r5, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
     4a4:	4b0a      	ldr	r3, [pc, #40]	; (4d0 <adc_async_init+0xa4>)
     4a6:	606b      	str	r3, [r5, #4]
}
     4a8:	b002      	add	sp, #8
     4aa:	bc04      	pop	{r2}
     4ac:	4692      	mov	sl, r2
     4ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
     4b0:	2000      	movs	r0, #0
     4b2:	e7d1      	b.n	458 <adc_async_init+0x2c>
     4b4:	2000      	movs	r0, #0
     4b6:	e7cf      	b.n	458 <adc_async_init+0x2c>
     4b8:	2000      	movs	r0, #0
     4ba:	e7cd      	b.n	458 <adc_async_init+0x2c>
     4bc:	00002cb8 	.word	0x00002cb8
     4c0:	00000c05 	.word	0x00000c05
     4c4:	00000e7d 	.word	0x00000e7d
     4c8:	000003cd 	.word	0x000003cd
     4cc:	000003b5 	.word	0x000003b5
     4d0:	000003c1 	.word	0x000003c1

000004d4 <adc_async_register_channel_buffer>:
{
     4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
     4d6:	b083      	sub	sp, #12
     4d8:	0007      	movs	r7, r0
     4da:	000c      	movs	r4, r1
     4dc:	9200      	str	r2, [sp, #0]
     4de:	9301      	str	r3, [sp, #4]
	ASSERT(descr && convert_buffer && convert_buffer_length);
     4e0:	2800      	cmp	r0, #0
     4e2:	d01b      	beq.n	51c <adc_async_register_channel_buffer+0x48>
     4e4:	2a00      	cmp	r2, #0
     4e6:	d01b      	beq.n	520 <adc_async_register_channel_buffer+0x4c>
     4e8:	0018      	movs	r0, r3
     4ea:	1e43      	subs	r3, r0, #1
     4ec:	4198      	sbcs	r0, r3
     4ee:	4e23      	ldr	r6, [pc, #140]	; (57c <adc_async_register_channel_buffer+0xa8>)
     4f0:	2266      	movs	r2, #102	; 0x66
     4f2:	0031      	movs	r1, r6
     4f4:	4d22      	ldr	r5, [pc, #136]	; (580 <adc_async_register_channel_buffer+0xac>)
     4f6:	47a8      	blx	r5
	ASSERT(descr->channel_max >= channel);
     4f8:	2324      	movs	r3, #36	; 0x24
     4fa:	5cfb      	ldrb	r3, [r7, r3]
     4fc:	2000      	movs	r0, #0
     4fe:	42a3      	cmp	r3, r4
     500:	4140      	adcs	r0, r0
     502:	b2c0      	uxtb	r0, r0
     504:	2267      	movs	r2, #103	; 0x67
     506:	0031      	movs	r1, r6
     508:	47a8      	blx	r5
	if (descr->channel_map[channel] != 0xFF) {
     50a:	6a39      	ldr	r1, [r7, #32]
     50c:	5d0b      	ldrb	r3, [r1, r4]
     50e:	2bff      	cmp	r3, #255	; 0xff
     510:	d12a      	bne.n	568 <adc_async_register_channel_buffer+0x94>
	for (i = 0; i <= descr->channel_max; i++) {
     512:	3bdb      	subs	r3, #219	; 0xdb
     514:	5cf8      	ldrb	r0, [r7, r3]
     516:	2600      	movs	r6, #0
     518:	2300      	movs	r3, #0
     51a:	e007      	b.n	52c <adc_async_register_channel_buffer+0x58>
	ASSERT(descr && convert_buffer && convert_buffer_length);
     51c:	2000      	movs	r0, #0
     51e:	e7e6      	b.n	4ee <adc_async_register_channel_buffer+0x1a>
     520:	2000      	movs	r0, #0
     522:	e7e4      	b.n	4ee <adc_async_register_channel_buffer+0x1a>
	for (i = 0; i <= descr->channel_max; i++) {
     524:	3301      	adds	r3, #1
     526:	b2db      	uxtb	r3, r3
     528:	4283      	cmp	r3, r0
     52a:	d805      	bhi.n	538 <adc_async_register_channel_buffer+0x64>
		if (descr->channel_map[i] != 0xFF) {
     52c:	5cca      	ldrb	r2, [r1, r3]
     52e:	2aff      	cmp	r2, #255	; 0xff
     530:	d0f8      	beq.n	524 <adc_async_register_channel_buffer+0x50>
			index++;
     532:	3601      	adds	r6, #1
     534:	b2f6      	uxtb	r6, r6
     536:	e7f5      	b.n	524 <adc_async_register_channel_buffer+0x50>
	if (index > descr->channel_amount) {
     538:	2325      	movs	r3, #37	; 0x25
     53a:	5cfb      	ldrb	r3, [r7, r3]
     53c:	42b3      	cmp	r3, r6
     53e:	d316      	bcc.n	56e <adc_async_register_channel_buffer+0x9a>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
     540:	0073      	lsls	r3, r6, #1
     542:	199b      	adds	r3, r3, r6
     544:	00dd      	lsls	r5, r3, #3
     546:	6abb      	ldr	r3, [r7, #40]	; 0x28
     548:	1958      	adds	r0, r3, r5
     54a:	3004      	adds	r0, #4
     54c:	9a01      	ldr	r2, [sp, #4]
     54e:	9900      	ldr	r1, [sp, #0]
     550:	4b0c      	ldr	r3, [pc, #48]	; (584 <adc_async_register_channel_buffer+0xb0>)
     552:	4798      	blx	r3
     554:	2800      	cmp	r0, #0
     556:	d10d      	bne.n	574 <adc_async_register_channel_buffer+0xa0>
	descr->channel_map[channel]            = index;
     558:	6a3b      	ldr	r3, [r7, #32]
     55a:	551e      	strb	r6, [r3, r4]
	descr->descr_ch[index].bytes_in_buffer = 0;
     55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
     55e:	195b      	adds	r3, r3, r5
     560:	2200      	movs	r2, #0
     562:	829a      	strh	r2, [r3, #20]
}
     564:	b003      	add	sp, #12
     566:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_INVALID_ARG;
     568:	200d      	movs	r0, #13
     56a:	4240      	negs	r0, r0
     56c:	e7fa      	b.n	564 <adc_async_register_channel_buffer+0x90>
		return ERR_NO_RESOURCE;
     56e:	201c      	movs	r0, #28
     570:	4240      	negs	r0, r0
     572:	e7f7      	b.n	564 <adc_async_register_channel_buffer+0x90>
		return ERR_INVALID_ARG;
     574:	200d      	movs	r0, #13
     576:	4240      	negs	r0, r0
     578:	e7f4      	b.n	564 <adc_async_register_channel_buffer+0x90>
     57a:	46c0      	nop			; (mov r8, r8)
     57c:	00002cb8 	.word	0x00002cb8
     580:	00000c05 	.word	0x00000c05
     584:	00000c75 	.word	0x00000c75

00000588 <adc_async_enable_channel>:
{
     588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     58a:	0006      	movs	r6, r0
     58c:	000c      	movs	r4, r1
	ASSERT(descr);
     58e:	4d0b      	ldr	r5, [pc, #44]	; (5bc <adc_async_enable_channel+0x34>)
     590:	1e43      	subs	r3, r0, #1
     592:	4198      	sbcs	r0, r3
     594:	b2c0      	uxtb	r0, r0
     596:	2283      	movs	r2, #131	; 0x83
     598:	0029      	movs	r1, r5
     59a:	4f09      	ldr	r7, [pc, #36]	; (5c0 <adc_async_enable_channel+0x38>)
     59c:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
     59e:	2324      	movs	r3, #36	; 0x24
     5a0:	5cf3      	ldrb	r3, [r6, r3]
     5a2:	2000      	movs	r0, #0
     5a4:	42a3      	cmp	r3, r4
     5a6:	4140      	adcs	r0, r0
     5a8:	b2c0      	uxtb	r0, r0
     5aa:	2284      	movs	r2, #132	; 0x84
     5ac:	0029      	movs	r1, r5
     5ae:	47b8      	blx	r7
	_adc_async_enable_channel(&descr->device, channel);
     5b0:	0021      	movs	r1, r4
     5b2:	0030      	movs	r0, r6
     5b4:	4b03      	ldr	r3, [pc, #12]	; (5c4 <adc_async_enable_channel+0x3c>)
     5b6:	4798      	blx	r3
}
     5b8:	2000      	movs	r0, #0
     5ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     5bc:	00002cb8 	.word	0x00002cb8
     5c0:	00000c05 	.word	0x00000c05
     5c4:	00000edd 	.word	0x00000edd

000005c8 <adc_async_register_callback>:
{
     5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ca:	b083      	sub	sp, #12
     5cc:	0007      	movs	r7, r0
     5ce:	9101      	str	r1, [sp, #4]
     5d0:	0015      	movs	r5, r2
     5d2:	001e      	movs	r6, r3
	ASSERT(descr);
     5d4:	1e43      	subs	r3, r0, #1
     5d6:	4198      	sbcs	r0, r3
     5d8:	b2c0      	uxtb	r0, r0
     5da:	229c      	movs	r2, #156	; 0x9c
     5dc:	4916      	ldr	r1, [pc, #88]	; (638 <adc_async_register_callback+0x70>)
     5de:	4c17      	ldr	r4, [pc, #92]	; (63c <adc_async_register_callback+0x74>)
     5e0:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
     5e2:	2324      	movs	r3, #36	; 0x24
     5e4:	5cfb      	ldrb	r3, [r7, r3]
     5e6:	2000      	movs	r0, #0
     5e8:	9a01      	ldr	r2, [sp, #4]
     5ea:	4293      	cmp	r3, r2
     5ec:	4140      	adcs	r0, r0
     5ee:	b2c0      	uxtb	r0, r0
     5f0:	229d      	movs	r2, #157	; 0x9d
     5f2:	4911      	ldr	r1, [pc, #68]	; (638 <adc_async_register_callback+0x70>)
     5f4:	47a0      	blx	r4
	switch (type) {
     5f6:	2d01      	cmp	r5, #1
     5f8:	d019      	beq.n	62e <adc_async_register_callback+0x66>
     5fa:	2d00      	cmp	r5, #0
     5fc:	d004      	beq.n	608 <adc_async_register_callback+0x40>
     5fe:	2d02      	cmp	r5, #2
     600:	d017      	beq.n	632 <adc_async_register_callback+0x6a>
		return ERR_INVALID_ARG;
     602:	200d      	movs	r0, #13
     604:	4240      	negs	r0, r0
     606:	e010      	b.n	62a <adc_async_register_callback+0x62>
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
     608:	6a3b      	ldr	r3, [r7, #32]
     60a:	9a01      	ldr	r2, [sp, #4]
     60c:	5c9a      	ldrb	r2, [r3, r2]
     60e:	0053      	lsls	r3, r2, #1
     610:	189b      	adds	r3, r3, r2
     612:	00db      	lsls	r3, r3, #3
     614:	6aba      	ldr	r2, [r7, #40]	; 0x28
     616:	509e      	str	r6, [r3, r2]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
     618:	1e73      	subs	r3, r6, #1
     61a:	419e      	sbcs	r6, r3
     61c:	b2f3      	uxtb	r3, r6
     61e:	002a      	movs	r2, r5
     620:	9901      	ldr	r1, [sp, #4]
     622:	0038      	movs	r0, r7
     624:	4c06      	ldr	r4, [pc, #24]	; (640 <adc_async_register_callback+0x78>)
     626:	47a0      	blx	r4
	return ERR_NONE;
     628:	2000      	movs	r0, #0
}
     62a:	b003      	add	sp, #12
     62c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		descr->adc_async_cb.monitor = cb;
     62e:	61be      	str	r6, [r7, #24]
		break;
     630:	e7f2      	b.n	618 <adc_async_register_callback+0x50>
		descr->adc_async_cb.error = cb;
     632:	61fe      	str	r6, [r7, #28]
		break;
     634:	e7f0      	b.n	618 <adc_async_register_callback+0x50>
     636:	46c0      	nop			; (mov r8, r8)
     638:	00002cb8 	.word	0x00002cb8
     63c:	00000c05 	.word	0x00000c05
     640:	00000f13 	.word	0x00000f13

00000644 <adc_async_read_channel>:
{
     644:	b5f0      	push	{r4, r5, r6, r7, lr}
     646:	46ce      	mov	lr, r9
     648:	4647      	mov	r7, r8
     64a:	b580      	push	{r7, lr}
     64c:	b085      	sub	sp, #20
     64e:	0005      	movs	r5, r0
     650:	000c      	movs	r4, r1
     652:	0017      	movs	r7, r2
     654:	4698      	mov	r8, r3
	ASSERT(descr && buffer && length);
     656:	2800      	cmp	r0, #0
     658:	d052      	beq.n	700 <adc_async_read_channel+0xbc>
     65a:	2a00      	cmp	r2, #0
     65c:	d052      	beq.n	704 <adc_async_read_channel+0xc0>
     65e:	0018      	movs	r0, r3
     660:	1e43      	subs	r3, r0, #1
     662:	4198      	sbcs	r0, r3
     664:	22bc      	movs	r2, #188	; 0xbc
     666:	492a      	ldr	r1, [pc, #168]	; (710 <adc_async_read_channel+0xcc>)
     668:	4e2a      	ldr	r6, [pc, #168]	; (714 <adc_async_read_channel+0xd0>)
     66a:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
     66c:	2324      	movs	r3, #36	; 0x24
     66e:	5ceb      	ldrb	r3, [r5, r3]
     670:	2000      	movs	r0, #0
     672:	42a3      	cmp	r3, r4
     674:	4140      	adcs	r0, r0
     676:	b2c0      	uxtb	r0, r0
     678:	22bd      	movs	r2, #189	; 0xbd
     67a:	4925      	ldr	r1, [pc, #148]	; (710 <adc_async_read_channel+0xcc>)
     67c:	47b0      	blx	r6
	data_size = _adc_async_get_data_size(&descr->device);
     67e:	0028      	movs	r0, r5
     680:	4b25      	ldr	r3, [pc, #148]	; (718 <adc_async_read_channel+0xd4>)
     682:	4798      	blx	r3
     684:	0001      	movs	r1, r0
	ASSERT(!(length % data_size));
     686:	4640      	mov	r0, r8
     688:	4b24      	ldr	r3, [pc, #144]	; (71c <adc_async_read_channel+0xd8>)
     68a:	4798      	blx	r3
     68c:	4248      	negs	r0, r1
     68e:	4148      	adcs	r0, r1
     690:	b2c0      	uxtb	r0, r0
     692:	22bf      	movs	r2, #191	; 0xbf
     694:	491e      	ldr	r1, [pc, #120]	; (710 <adc_async_read_channel+0xcc>)
     696:	47b0      	blx	r6
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
     698:	6a2b      	ldr	r3, [r5, #32]
     69a:	5d1a      	ldrb	r2, [r3, r4]
     69c:	0053      	lsls	r3, r2, #1
     69e:	189b      	adds	r3, r3, r2
     6a0:	00db      	lsls	r3, r3, #3
     6a2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     6a4:	4691      	mov	r9, r2
     6a6:	4499      	add	r9, r3
	CRITICAL_SECTION_ENTER()
     6a8:	a803      	add	r0, sp, #12
     6aa:	4b1d      	ldr	r3, [pc, #116]	; (720 <adc_async_read_channel+0xdc>)
     6ac:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
     6ae:	464b      	mov	r3, r9
     6b0:	3304      	adds	r3, #4
     6b2:	9301      	str	r3, [sp, #4]
     6b4:	0018      	movs	r0, r3
     6b6:	4b1b      	ldr	r3, [pc, #108]	; (724 <adc_async_read_channel+0xe0>)
     6b8:	4798      	blx	r3
     6ba:	0004      	movs	r4, r0
	CRITICAL_SECTION_LEAVE()
     6bc:	a803      	add	r0, sp, #12
     6be:	4b1a      	ldr	r3, [pc, #104]	; (728 <adc_async_read_channel+0xe4>)
     6c0:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     6c2:	2c00      	cmp	r4, #0
     6c4:	d020      	beq.n	708 <adc_async_read_channel+0xc4>
     6c6:	4643      	mov	r3, r8
     6c8:	2b00      	cmp	r3, #0
     6ca:	d01f      	beq.n	70c <adc_async_read_channel+0xc8>
     6cc:	003d      	movs	r5, r7
     6ce:	3c01      	subs	r4, #1
     6d0:	193f      	adds	r7, r7, r4
     6d2:	2400      	movs	r4, #0
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
     6d4:	4e15      	ldr	r6, [pc, #84]	; (72c <adc_async_read_channel+0xe8>)
     6d6:	3401      	adds	r4, #1
     6d8:	b2a4      	uxth	r4, r4
     6da:	0029      	movs	r1, r5
     6dc:	9801      	ldr	r0, [sp, #4]
     6de:	47b0      	blx	r6
	while ((was_read < num) && (was_read < length)) {
     6e0:	42bd      	cmp	r5, r7
     6e2:	d002      	beq.n	6ea <adc_async_read_channel+0xa6>
     6e4:	3501      	adds	r5, #1
     6e6:	45a0      	cmp	r8, r4
     6e8:	d1f5      	bne.n	6d6 <adc_async_read_channel+0x92>
	descr_ch->bytes_in_buffer -= was_read;
     6ea:	464b      	mov	r3, r9
     6ec:	8a9b      	ldrh	r3, [r3, #20]
     6ee:	1b1b      	subs	r3, r3, r4
     6f0:	464a      	mov	r2, r9
     6f2:	8293      	strh	r3, [r2, #20]
}
     6f4:	0020      	movs	r0, r4
     6f6:	b005      	add	sp, #20
     6f8:	bc0c      	pop	{r2, r3}
     6fa:	4690      	mov	r8, r2
     6fc:	4699      	mov	r9, r3
     6fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ASSERT(descr && buffer && length);
     700:	2000      	movs	r0, #0
     702:	e7af      	b.n	664 <adc_async_read_channel+0x20>
     704:	2000      	movs	r0, #0
     706:	e7ad      	b.n	664 <adc_async_read_channel+0x20>
	uint16_t was_read = 0;
     708:	2400      	movs	r4, #0
     70a:	e7ee      	b.n	6ea <adc_async_read_channel+0xa6>
     70c:	2400      	movs	r4, #0
     70e:	e7ec      	b.n	6ea <adc_async_read_channel+0xa6>
     710:	00002cb8 	.word	0x00002cb8
     714:	00000c05 	.word	0x00000c05
     718:	00000ee9 	.word	0x00000ee9
     71c:	00001739 	.word	0x00001739
     720:	00000759 	.word	0x00000759
     724:	00000d51 	.word	0x00000d51
     728:	00000767 	.word	0x00000767
     72c:	00000cc9 	.word	0x00000cc9

00000730 <adc_async_start_conversion>:
{
     730:	b510      	push	{r4, lr}
     732:	0004      	movs	r4, r0
	ASSERT(descr);
     734:	1e43      	subs	r3, r0, #1
     736:	4198      	sbcs	r0, r3
     738:	b2c0      	uxtb	r0, r0
     73a:	22d6      	movs	r2, #214	; 0xd6
     73c:	4903      	ldr	r1, [pc, #12]	; (74c <adc_async_start_conversion+0x1c>)
     73e:	4b04      	ldr	r3, [pc, #16]	; (750 <adc_async_start_conversion+0x20>)
     740:	4798      	blx	r3
	_adc_async_convert(&descr->device);
     742:	0020      	movs	r0, r4
     744:	4b03      	ldr	r3, [pc, #12]	; (754 <adc_async_start_conversion+0x24>)
     746:	4798      	blx	r3
}
     748:	2000      	movs	r0, #0
     74a:	bd10      	pop	{r4, pc}
     74c:	00002cb8 	.word	0x00002cb8
     750:	00000c05 	.word	0x00000c05
     754:	00000f01 	.word	0x00000f01

00000758 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     758:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     75c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     75e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     760:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     764:	4770      	bx	lr

00000766 <atomic_leave_critical>:
     766:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     76a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     76c:	f383 8810 	msr	PRIMASK, r3
}
     770:	4770      	bx	lr

00000772 <dac_tx_error>:
 * \internal Error occurs in transfer process
 *
 * \param[in] device The pointer to DAC device structure
 */
static void dac_tx_error(struct _dac_async_device *device, const uint8_t ch)
{
     772:	b510      	push	{r4, lr}
	struct dac_async_descriptor *const descr = CONTAINER_OF(device, struct dac_async_descriptor, device);
     774:	3808      	subs	r0, #8

	if (descr->dac_cb.error) {
     776:	6843      	ldr	r3, [r0, #4]
     778:	2b00      	cmp	r3, #0
     77a:	d000      	beq.n	77e <dac_tx_error+0xc>
		descr->dac_cb.error(descr, ch);
     77c:	4798      	blx	r3
	}
}
     77e:	bd10      	pop	{r4, pc}

00000780 <dac_tx_ready>:
{
     780:	b510      	push	{r4, lr}
     782:	00cb      	lsls	r3, r1, #3
     784:	18c3      	adds	r3, r0, r3
	if (descr->sel_ch[ch].length) {
     786:	699c      	ldr	r4, [r3, #24]
     788:	2c00      	cmp	r4, #0
     78a:	d00a      	beq.n	7a2 <dac_tx_ready+0x22>
		descr->sel_ch[ch].length--;
     78c:	3c01      	subs	r4, #1
     78e:	619c      	str	r4, [r3, #24]
		if (descr->sel_ch[ch].length) {
     790:	2c00      	cmp	r4, #0
     792:	d107      	bne.n	7a4 <dac_tx_ready+0x24>
			if (descr->dac_cb.conversion_done) {
     794:	0003      	movs	r3, r0
     796:	3b08      	subs	r3, #8
     798:	681b      	ldr	r3, [r3, #0]
     79a:	2b00      	cmp	r3, #0
     79c:	d001      	beq.n	7a2 <dac_tx_ready+0x22>
	struct dac_async_descriptor *const descr = CONTAINER_OF(device, struct dac_async_descriptor, device);
     79e:	3808      	subs	r0, #8
				descr->dac_cb.conversion_done(descr, ch);
     7a0:	4798      	blx	r3
}
     7a2:	bd10      	pop	{r4, pc}
			descr->sel_ch[ch].buffer++;
     7a4:	695a      	ldr	r2, [r3, #20]
     7a6:	1c94      	adds	r4, r2, #2
     7a8:	615c      	str	r4, [r3, #20]
			_dac_async_write_data(&descr->device, *(descr->sel_ch[ch].buffer), ch);
     7aa:	8853      	ldrh	r3, [r2, #2]
     7ac:	000a      	movs	r2, r1
     7ae:	0019      	movs	r1, r3
     7b0:	4b01      	ldr	r3, [pc, #4]	; (7b8 <dac_tx_ready+0x38>)
     7b2:	4798      	blx	r3
     7b4:	e7f5      	b.n	7a2 <dac_tx_ready+0x22>
     7b6:	46c0      	nop			; (mov r8, r8)
     7b8:	000010c5 	.word	0x000010c5

000007bc <dac_async_init>:
{
     7bc:	b570      	push	{r4, r5, r6, lr}
     7be:	0005      	movs	r5, r0
     7c0:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     7c2:	2800      	cmp	r0, #0
     7c4:	d016      	beq.n	7f4 <dac_async_init+0x38>
     7c6:	0008      	movs	r0, r1
     7c8:	1e43      	subs	r3, r0, #1
     7ca:	4198      	sbcs	r0, r3
     7cc:	b2c0      	uxtb	r0, r0
     7ce:	2238      	movs	r2, #56	; 0x38
     7d0:	4909      	ldr	r1, [pc, #36]	; (7f8 <dac_async_init+0x3c>)
     7d2:	4b0a      	ldr	r3, [pc, #40]	; (7fc <dac_async_init+0x40>)
     7d4:	4798      	blx	r3
	device = &descr->device;
     7d6:	0028      	movs	r0, r5
     7d8:	3008      	adds	r0, #8
	rc = _dac_async_init(device, hw);
     7da:	0021      	movs	r1, r4
     7dc:	4b08      	ldr	r3, [pc, #32]	; (800 <dac_async_init+0x44>)
     7de:	4798      	blx	r3
	if (rc) {
     7e0:	2800      	cmp	r0, #0
     7e2:	d106      	bne.n	7f2 <dac_async_init+0x36>
	device->dac_cb.tx_ready_cb = dac_tx_ready;
     7e4:	4b07      	ldr	r3, [pc, #28]	; (804 <dac_async_init+0x48>)
     7e6:	60ab      	str	r3, [r5, #8]
	device->dac_cb.tx_error_cb = dac_tx_error;
     7e8:	4b07      	ldr	r3, [pc, #28]	; (808 <dac_async_init+0x4c>)
     7ea:	60eb      	str	r3, [r5, #12]
		descr->sel_ch[i].buffer = NULL;
     7ec:	2300      	movs	r3, #0
     7ee:	61eb      	str	r3, [r5, #28]
		descr->sel_ch[i].length = 0;
     7f0:	622b      	str	r3, [r5, #32]
}
     7f2:	bd70      	pop	{r4, r5, r6, pc}
     7f4:	2000      	movs	r0, #0
     7f6:	e7ea      	b.n	7ce <dac_async_init+0x12>
     7f8:	00002cd4 	.word	0x00002cd4
     7fc:	00000c05 	.word	0x00000c05
     800:	00001071 	.word	0x00001071
     804:	00000781 	.word	0x00000781
     808:	00000773 	.word	0x00000773

0000080c <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     80c:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     80e:	4b02      	ldr	r3, [pc, #8]	; (818 <delay_init+0xc>)
     810:	6018      	str	r0, [r3, #0]
     812:	4b02      	ldr	r3, [pc, #8]	; (81c <delay_init+0x10>)
     814:	4798      	blx	r3
}
     816:	bd10      	pop	{r4, pc}
     818:	20000030 	.word	0x20000030
     81c:	00001271 	.word	0x00001271

00000820 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     820:	b570      	push	{r4, r5, r6, lr}
     822:	0006      	movs	r6, r0
     824:	000c      	movs	r4, r1
     826:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     828:	2800      	cmp	r0, #0
     82a:	d00d      	beq.n	848 <io_write+0x28>
     82c:	0008      	movs	r0, r1
     82e:	1e43      	subs	r3, r0, #1
     830:	4198      	sbcs	r0, r3
     832:	b2c0      	uxtb	r0, r0
     834:	2234      	movs	r2, #52	; 0x34
     836:	4905      	ldr	r1, [pc, #20]	; (84c <io_write+0x2c>)
     838:	4b05      	ldr	r3, [pc, #20]	; (850 <io_write+0x30>)
     83a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     83c:	6833      	ldr	r3, [r6, #0]
     83e:	002a      	movs	r2, r5
     840:	0021      	movs	r1, r4
     842:	0030      	movs	r0, r6
     844:	4798      	blx	r3
}
     846:	bd70      	pop	{r4, r5, r6, pc}
     848:	2000      	movs	r0, #0
     84a:	e7f3      	b.n	834 <io_write+0x14>
     84c:	00002cf0 	.word	0x00002cf0
     850:	00000c05 	.word	0x00000c05

00000854 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     856:	46ce      	mov	lr, r9
     858:	4647      	mov	r7, r8
     85a:	b580      	push	{r7, lr}
     85c:	4681      	mov	r9, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     85e:	6803      	ldr	r3, [r0, #0]
     860:	469c      	mov	ip, r3
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     862:	2b00      	cmp	r3, #0
     864:	d005      	beq.n	872 <timer_add_timer_task+0x1e>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     866:	688e      	ldr	r6, [r1, #8]
     868:	001c      	movs	r4, r3
     86a:	2500      	movs	r5, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     86c:	2701      	movs	r7, #1
     86e:	1abf      	subs	r7, r7, r2
     870:	e00d      	b.n	88e <timer_add_timer_task+0x3a>
		list_insert_as_head(list, new_task);
     872:	4b12      	ldr	r3, [pc, #72]	; (8bc <timer_add_timer_task+0x68>)
     874:	4798      	blx	r3
		return;
     876:	e018      	b.n	8aa <timer_add_timer_task+0x56>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     878:	18fb      	adds	r3, r7, r3
     87a:	68a0      	ldr	r0, [r4, #8]
     87c:	4680      	mov	r8, r0
     87e:	4443      	add	r3, r8
		if (time_left >= new_task->interval)
     880:	42b3      	cmp	r3, r6
     882:	d20c      	bcs.n	89e <timer_add_timer_task+0x4a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     884:	6823      	ldr	r3, [r4, #0]
     886:	0025      	movs	r5, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     888:	2b00      	cmp	r3, #0
     88a:	d00b      	beq.n	8a4 <timer_add_timer_task+0x50>
     88c:	001c      	movs	r4, r3
		if (it->time_label <= time) {
     88e:	6863      	ldr	r3, [r4, #4]
     890:	4293      	cmp	r3, r2
     892:	d8f1      	bhi.n	878 <timer_add_timer_task+0x24>
			time_left = it->interval - (time - it->time_label);
     894:	68a0      	ldr	r0, [r4, #8]
     896:	4680      	mov	r8, r0
     898:	4443      	add	r3, r8
     89a:	1a9b      	subs	r3, r3, r2
     89c:	e7f0      	b.n	880 <timer_add_timer_task+0x2c>
			break;
		prev = it;
	}

	if (it == head) {
     89e:	45a4      	cmp	ip, r4
     8a0:	d007      	beq.n	8b2 <timer_add_timer_task+0x5e>
     8a2:	002c      	movs	r4, r5
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     8a4:	0020      	movs	r0, r4
     8a6:	4b06      	ldr	r3, [pc, #24]	; (8c0 <timer_add_timer_task+0x6c>)
     8a8:	4798      	blx	r3
	}
}
     8aa:	bc0c      	pop	{r2, r3}
     8ac:	4690      	mov	r8, r2
     8ae:	4699      	mov	r9, r3
     8b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     8b2:	4648      	mov	r0, r9
     8b4:	4b01      	ldr	r3, [pc, #4]	; (8bc <timer_add_timer_task+0x68>)
     8b6:	4798      	blx	r3
     8b8:	e7f7      	b.n	8aa <timer_add_timer_task+0x56>
     8ba:	46c0      	nop			; (mov r8, r8)
     8bc:	00000c31 	.word	0x00000c31
     8c0:	00000c5d 	.word	0x00000c5d

000008c4 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     8c4:	b5f0      	push	{r4, r5, r6, r7, lr}
     8c6:	46c6      	mov	lr, r8
     8c8:	b500      	push	{lr}
     8ca:	b082      	sub	sp, #8
     8cc:	0007      	movs	r7, r0
	return (void *)list->head;
     8ce:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     8d0:	6903      	ldr	r3, [r0, #16]
     8d2:	3301      	adds	r3, #1
     8d4:	4698      	mov	r8, r3
     8d6:	6103      	str	r3, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     8d8:	7e03      	ldrb	r3, [r0, #24]
     8da:	07db      	lsls	r3, r3, #31
     8dc:	d411      	bmi.n	902 <timer_process_counted+0x3e>
     8de:	7e03      	ldrb	r3, [r0, #24]
     8e0:	079b      	lsls	r3, r3, #30
     8e2:	d40e      	bmi.n	902 <timer_process_counted+0x3e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     8e4:	2c00      	cmp	r4, #0
     8e6:	d010      	beq.n	90a <timer_process_counted+0x46>
     8e8:	4643      	mov	r3, r8
     8ea:	6862      	ldr	r2, [r4, #4]
     8ec:	1a9b      	subs	r3, r3, r2
     8ee:	68a2      	ldr	r2, [r4, #8]
     8f0:	4293      	cmp	r3, r2
     8f2:	d30a      	bcc.n	90a <timer_process_counted+0x46>
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     8f4:	2314      	movs	r3, #20
     8f6:	469c      	mov	ip, r3
     8f8:	4484      	add	ip, r0
     8fa:	4663      	mov	r3, ip
     8fc:	9301      	str	r3, [sp, #4]
     8fe:	4e12      	ldr	r6, [pc, #72]	; (948 <timer_process_counted+0x84>)
     900:	e014      	b.n	92c <timer_process_counted+0x68>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     902:	7e3b      	ldrb	r3, [r7, #24]
     904:	2202      	movs	r2, #2
     906:	4313      	orrs	r3, r2
     908:	763b      	strb	r3, [r7, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     90a:	b002      	add	sp, #8
     90c:	bc04      	pop	{r2}
     90e:	4690      	mov	r8, r2
     910:	bdf0      	pop	{r4, r5, r6, r7, pc}
     912:	697d      	ldr	r5, [r7, #20]
		tmp->cb(tmp);
     914:	68e3      	ldr	r3, [r4, #12]
     916:	0020      	movs	r0, r4
     918:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     91a:	2d00      	cmp	r5, #0
     91c:	d0f5      	beq.n	90a <timer_process_counted+0x46>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     91e:	002c      	movs	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     920:	4643      	mov	r3, r8
     922:	686a      	ldr	r2, [r5, #4]
     924:	1a9b      	subs	r3, r3, r2
     926:	68aa      	ldr	r2, [r5, #8]
     928:	4293      	cmp	r3, r2
     92a:	d3ee      	bcc.n	90a <timer_process_counted+0x46>
		list_remove_head(&timer->tasks);
     92c:	9801      	ldr	r0, [sp, #4]
     92e:	47b0      	blx	r6
		if (TIMER_TASK_REPEAT == tmp->mode) {
     930:	7c23      	ldrb	r3, [r4, #16]
     932:	2b01      	cmp	r3, #1
     934:	d1ed      	bne.n	912 <timer_process_counted+0x4e>
			tmp->time_label = time;
     936:	4643      	mov	r3, r8
     938:	6063      	str	r3, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     93a:	4642      	mov	r2, r8
     93c:	0021      	movs	r1, r4
     93e:	9801      	ldr	r0, [sp, #4]
     940:	4b02      	ldr	r3, [pc, #8]	; (94c <timer_process_counted+0x88>)
     942:	4798      	blx	r3
     944:	e7e5      	b.n	912 <timer_process_counted+0x4e>
     946:	46c0      	nop			; (mov r8, r8)
     948:	00000c65 	.word	0x00000c65
     94c:	00000855 	.word	0x00000855

00000950 <timer_init>:
{
     950:	b570      	push	{r4, r5, r6, lr}
     952:	0005      	movs	r5, r0
     954:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     956:	2800      	cmp	r0, #0
     958:	d011      	beq.n	97e <timer_init+0x2e>
     95a:	0008      	movs	r0, r1
     95c:	1e43      	subs	r3, r0, #1
     95e:	4198      	sbcs	r0, r3
     960:	b2c0      	uxtb	r0, r0
     962:	223b      	movs	r2, #59	; 0x3b
     964:	4907      	ldr	r1, [pc, #28]	; (984 <timer_init+0x34>)
     966:	4b08      	ldr	r3, [pc, #32]	; (988 <timer_init+0x38>)
     968:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     96a:	0021      	movs	r1, r4
     96c:	0028      	movs	r0, r5
     96e:	4b07      	ldr	r3, [pc, #28]	; (98c <timer_init+0x3c>)
     970:	4798      	blx	r3
	descr->time                           = 0;
     972:	2300      	movs	r3, #0
     974:	612b      	str	r3, [r5, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     976:	4b06      	ldr	r3, [pc, #24]	; (990 <timer_init+0x40>)
     978:	602b      	str	r3, [r5, #0]
}
     97a:	2000      	movs	r0, #0
     97c:	bd70      	pop	{r4, r5, r6, pc}
     97e:	2000      	movs	r0, #0
     980:	e7ef      	b.n	962 <timer_init+0x12>
     982:	46c0      	nop			; (mov r8, r8)
     984:	00002d04 	.word	0x00002d04
     988:	00000c05 	.word	0x00000c05
     98c:	00001285 	.word	0x00001285
     990:	000008c5 	.word	0x000008c5

00000994 <timer_start>:
{
     994:	b510      	push	{r4, lr}
     996:	0004      	movs	r4, r0
	ASSERT(descr);
     998:	1e43      	subs	r3, r0, #1
     99a:	4198      	sbcs	r0, r3
     99c:	b2c0      	uxtb	r0, r0
     99e:	2253      	movs	r2, #83	; 0x53
     9a0:	4907      	ldr	r1, [pc, #28]	; (9c0 <timer_start+0x2c>)
     9a2:	4b08      	ldr	r3, [pc, #32]	; (9c4 <timer_start+0x30>)
     9a4:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
     9a6:	0020      	movs	r0, r4
     9a8:	4b07      	ldr	r3, [pc, #28]	; (9c8 <timer_start+0x34>)
     9aa:	4798      	blx	r3
     9ac:	2800      	cmp	r0, #0
     9ae:	d104      	bne.n	9ba <timer_start+0x26>
	_timer_start(&descr->device);
     9b0:	0020      	movs	r0, r4
     9b2:	4b06      	ldr	r3, [pc, #24]	; (9cc <timer_start+0x38>)
     9b4:	4798      	blx	r3
	return ERR_NONE;
     9b6:	2000      	movs	r0, #0
}
     9b8:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     9ba:	2011      	movs	r0, #17
     9bc:	4240      	negs	r0, r0
     9be:	e7fb      	b.n	9b8 <timer_start+0x24>
     9c0:	00002d04 	.word	0x00002d04
     9c4:	00000c05 	.word	0x00000c05
     9c8:	000013a5 	.word	0x000013a5
     9cc:	00001399 	.word	0x00001399

000009d0 <timer_add_task>:
{
     9d0:	b570      	push	{r4, r5, r6, lr}
     9d2:	b082      	sub	sp, #8
     9d4:	0004      	movs	r4, r0
     9d6:	000d      	movs	r5, r1
	ASSERT(descr && task);
     9d8:	2800      	cmp	r0, #0
     9da:	d024      	beq.n	a26 <timer_add_task+0x56>
     9dc:	0008      	movs	r0, r1
     9de:	1e43      	subs	r3, r0, #1
     9e0:	4198      	sbcs	r0, r3
     9e2:	b2c0      	uxtb	r0, r0
     9e4:	227a      	movs	r2, #122	; 0x7a
     9e6:	491e      	ldr	r1, [pc, #120]	; (a60 <timer_add_task+0x90>)
     9e8:	4b1e      	ldr	r3, [pc, #120]	; (a64 <timer_add_task+0x94>)
     9ea:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     9ec:	7e23      	ldrb	r3, [r4, #24]
     9ee:	2201      	movs	r2, #1
     9f0:	4313      	orrs	r3, r2
     9f2:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
     9f4:	0026      	movs	r6, r4
     9f6:	3614      	adds	r6, #20
     9f8:	0029      	movs	r1, r5
     9fa:	0030      	movs	r0, r6
     9fc:	4b1a      	ldr	r3, [pc, #104]	; (a68 <timer_add_task+0x98>)
     9fe:	4798      	blx	r3
     a00:	2800      	cmp	r0, #0
     a02:	d112      	bne.n	a2a <timer_add_task+0x5a>
	task->time_label = descr->time;
     a04:	6923      	ldr	r3, [r4, #16]
     a06:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
     a08:	6922      	ldr	r2, [r4, #16]
     a0a:	0029      	movs	r1, r5
     a0c:	0030      	movs	r0, r6
     a0e:	4b17      	ldr	r3, [pc, #92]	; (a6c <timer_add_task+0x9c>)
     a10:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     a12:	7e23      	ldrb	r3, [r4, #24]
     a14:	2201      	movs	r2, #1
     a16:	4393      	bics	r3, r2
     a18:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     a1a:	7e23      	ldrb	r3, [r4, #24]
	return ERR_NONE;
     a1c:	2000      	movs	r0, #0
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     a1e:	079b      	lsls	r3, r3, #30
     a20:	d40f      	bmi.n	a42 <timer_add_task+0x72>
}
     a22:	b002      	add	sp, #8
     a24:	bd70      	pop	{r4, r5, r6, pc}
     a26:	2000      	movs	r0, #0
     a28:	e7dc      	b.n	9e4 <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     a2a:	7e23      	ldrb	r3, [r4, #24]
     a2c:	2201      	movs	r2, #1
     a2e:	4393      	bics	r3, r2
     a30:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
     a32:	327e      	adds	r2, #126	; 0x7e
     a34:	490a      	ldr	r1, [pc, #40]	; (a60 <timer_add_task+0x90>)
     a36:	2000      	movs	r0, #0
     a38:	4b0a      	ldr	r3, [pc, #40]	; (a64 <timer_add_task+0x94>)
     a3a:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
     a3c:	2012      	movs	r0, #18
     a3e:	4240      	negs	r0, r0
     a40:	e7ef      	b.n	a22 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
     a42:	a801      	add	r0, sp, #4
     a44:	4b0a      	ldr	r3, [pc, #40]	; (a70 <timer_add_task+0xa0>)
     a46:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     a48:	7e23      	ldrb	r3, [r4, #24]
     a4a:	2202      	movs	r2, #2
     a4c:	4393      	bics	r3, r2
     a4e:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     a50:	0020      	movs	r0, r4
     a52:	4b08      	ldr	r3, [pc, #32]	; (a74 <timer_add_task+0xa4>)
     a54:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     a56:	a801      	add	r0, sp, #4
     a58:	4b07      	ldr	r3, [pc, #28]	; (a78 <timer_add_task+0xa8>)
     a5a:	4798      	blx	r3
	return ERR_NONE;
     a5c:	2000      	movs	r0, #0
     a5e:	e7e0      	b.n	a22 <timer_add_task+0x52>
     a60:	00002d04 	.word	0x00002d04
     a64:	00000c05 	.word	0x00000c05
     a68:	00000c0d 	.word	0x00000c0d
     a6c:	00000855 	.word	0x00000855
     a70:	00000759 	.word	0x00000759
     a74:	000013b5 	.word	0x000013b5
     a78:	00000767 	.word	0x00000767

00000a7c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a7e:	46ce      	mov	lr, r9
     a80:	4647      	mov	r7, r8
     a82:	b580      	push	{r7, lr}
     a84:	0004      	movs	r4, r0
     a86:	000f      	movs	r7, r1
     a88:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     a8a:	2800      	cmp	r0, #0
     a8c:	d026      	beq.n	adc <usart_sync_write+0x60>
     a8e:	2900      	cmp	r1, #0
     a90:	d026      	beq.n	ae0 <usart_sync_write+0x64>
     a92:	0010      	movs	r0, r2
     a94:	1e43      	subs	r3, r0, #1
     a96:	4198      	sbcs	r0, r3
     a98:	22f1      	movs	r2, #241	; 0xf1
     a9a:	4912      	ldr	r1, [pc, #72]	; (ae4 <usart_sync_write+0x68>)
     a9c:	4b12      	ldr	r3, [pc, #72]	; (ae8 <usart_sync_write+0x6c>)
     a9e:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     aa0:	3408      	adds	r4, #8
     aa2:	4d12      	ldr	r5, [pc, #72]	; (aec <usart_sync_write+0x70>)
     aa4:	0020      	movs	r0, r4
     aa6:	47a8      	blx	r5
     aa8:	2800      	cmp	r0, #0
     aaa:	d0fb      	beq.n	aa4 <usart_sync_write+0x28>
     aac:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     aae:	4b10      	ldr	r3, [pc, #64]	; (af0 <usart_sync_write+0x74>)
     ab0:	4699      	mov	r9, r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     ab2:	4d0e      	ldr	r5, [pc, #56]	; (aec <usart_sync_write+0x70>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     ab4:	5db9      	ldrb	r1, [r7, r6]
     ab6:	0020      	movs	r0, r4
     ab8:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     aba:	0020      	movs	r0, r4
     abc:	47a8      	blx	r5
     abe:	2800      	cmp	r0, #0
     ac0:	d0fb      	beq.n	aba <usart_sync_write+0x3e>
			;
	} while (++offset < length);
     ac2:	3601      	adds	r6, #1
     ac4:	4546      	cmp	r6, r8
     ac6:	d3f5      	bcc.n	ab4 <usart_sync_write+0x38>
	while (!_usart_sync_is_transmit_done(&descr->device))
     ac8:	4d0a      	ldr	r5, [pc, #40]	; (af4 <usart_sync_write+0x78>)
     aca:	0020      	movs	r0, r4
     acc:	47a8      	blx	r5
     ace:	2800      	cmp	r0, #0
     ad0:	d0fb      	beq.n	aca <usart_sync_write+0x4e>
		;
	return (int32_t)offset;
}
     ad2:	0030      	movs	r0, r6
     ad4:	bc0c      	pop	{r2, r3}
     ad6:	4690      	mov	r8, r2
     ad8:	4699      	mov	r9, r3
     ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     adc:	2000      	movs	r0, #0
     ade:	e7db      	b.n	a98 <usart_sync_write+0x1c>
     ae0:	2000      	movs	r0, #0
     ae2:	e7d9      	b.n	a98 <usart_sync_write+0x1c>
     ae4:	00002d1c 	.word	0x00002d1c
     ae8:	00000c05 	.word	0x00000c05
     aec:	000011f9 	.word	0x000011f9
     af0:	000011e9 	.word	0x000011e9
     af4:	00001203 	.word	0x00001203

00000af8 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     afa:	46ce      	mov	lr, r9
     afc:	4647      	mov	r7, r8
     afe:	b580      	push	{r7, lr}
     b00:	0004      	movs	r4, r0
     b02:	000f      	movs	r7, r1
     b04:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     b06:	2800      	cmp	r0, #0
     b08:	d01d      	beq.n	b46 <usart_sync_read+0x4e>
     b0a:	2900      	cmp	r1, #0
     b0c:	d01d      	beq.n	b4a <usart_sync_read+0x52>
     b0e:	0010      	movs	r0, r2
     b10:	1e43      	subs	r3, r0, #1
     b12:	4198      	sbcs	r0, r3
     b14:	2286      	movs	r2, #134	; 0x86
     b16:	0052      	lsls	r2, r2, #1
     b18:	490d      	ldr	r1, [pc, #52]	; (b50 <usart_sync_read+0x58>)
     b1a:	4b0e      	ldr	r3, [pc, #56]	; (b54 <usart_sync_read+0x5c>)
     b1c:	4798      	blx	r3
	uint32_t                      offset = 0;
     b1e:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     b20:	3408      	adds	r4, #8
     b22:	4d0d      	ldr	r5, [pc, #52]	; (b58 <usart_sync_read+0x60>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     b24:	4b0d      	ldr	r3, [pc, #52]	; (b5c <usart_sync_read+0x64>)
     b26:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_received(&descr->device))
     b28:	0020      	movs	r0, r4
     b2a:	47a8      	blx	r5
     b2c:	2800      	cmp	r0, #0
     b2e:	d0fb      	beq.n	b28 <usart_sync_read+0x30>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     b30:	0020      	movs	r0, r4
     b32:	47c8      	blx	r9
     b34:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
     b36:	3601      	adds	r6, #1
     b38:	4546      	cmp	r6, r8
     b3a:	d3f5      	bcc.n	b28 <usart_sync_read+0x30>

	return (int32_t)offset;
}
     b3c:	0030      	movs	r0, r6
     b3e:	bc0c      	pop	{r2, r3}
     b40:	4690      	mov	r8, r2
     b42:	4699      	mov	r9, r3
     b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     b46:	2000      	movs	r0, #0
     b48:	e7e4      	b.n	b14 <usart_sync_read+0x1c>
     b4a:	2000      	movs	r0, #0
     b4c:	e7e2      	b.n	b14 <usart_sync_read+0x1c>
     b4e:	46c0      	nop			; (mov r8, r8)
     b50:	00002d1c 	.word	0x00002d1c
     b54:	00000c05 	.word	0x00000c05
     b58:	0000120d 	.word	0x0000120d
     b5c:	000011f1 	.word	0x000011f1

00000b60 <usart_sync_init>:
{
     b60:	b570      	push	{r4, r5, r6, lr}
     b62:	0005      	movs	r5, r0
     b64:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     b66:	2800      	cmp	r0, #0
     b68:	d013      	beq.n	b92 <usart_sync_init+0x32>
     b6a:	0008      	movs	r0, r1
     b6c:	1e43      	subs	r3, r0, #1
     b6e:	4198      	sbcs	r0, r3
     b70:	b2c0      	uxtb	r0, r0
     b72:	2234      	movs	r2, #52	; 0x34
     b74:	4908      	ldr	r1, [pc, #32]	; (b98 <usart_sync_init+0x38>)
     b76:	4b09      	ldr	r3, [pc, #36]	; (b9c <usart_sync_init+0x3c>)
     b78:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     b7a:	0028      	movs	r0, r5
     b7c:	3008      	adds	r0, #8
     b7e:	0021      	movs	r1, r4
     b80:	4b07      	ldr	r3, [pc, #28]	; (ba0 <usart_sync_init+0x40>)
     b82:	4798      	blx	r3
	if (init_status) {
     b84:	2800      	cmp	r0, #0
     b86:	d103      	bne.n	b90 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
     b88:	4b06      	ldr	r3, [pc, #24]	; (ba4 <usart_sync_init+0x44>)
     b8a:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
     b8c:	4b06      	ldr	r3, [pc, #24]	; (ba8 <usart_sync_init+0x48>)
     b8e:	602b      	str	r3, [r5, #0]
}
     b90:	bd70      	pop	{r4, r5, r6, pc}
     b92:	2000      	movs	r0, #0
     b94:	e7ed      	b.n	b72 <usart_sync_init+0x12>
     b96:	46c0      	nop			; (mov r8, r8)
     b98:	00002d1c 	.word	0x00002d1c
     b9c:	00000c05 	.word	0x00000c05
     ba0:	000011a9 	.word	0x000011a9
     ba4:	00000af9 	.word	0x00000af9
     ba8:	00000a7d 	.word	0x00000a7d

00000bac <usart_sync_enable>:
{
     bac:	b510      	push	{r4, lr}
     bae:	0004      	movs	r4, r0
	ASSERT(descr);
     bb0:	1e43      	subs	r3, r0, #1
     bb2:	4198      	sbcs	r0, r3
     bb4:	b2c0      	uxtb	r0, r0
     bb6:	2253      	movs	r2, #83	; 0x53
     bb8:	4904      	ldr	r1, [pc, #16]	; (bcc <usart_sync_enable+0x20>)
     bba:	4b05      	ldr	r3, [pc, #20]	; (bd0 <usart_sync_enable+0x24>)
     bbc:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     bbe:	0020      	movs	r0, r4
     bc0:	3008      	adds	r0, #8
     bc2:	4b04      	ldr	r3, [pc, #16]	; (bd4 <usart_sync_enable+0x28>)
     bc4:	4798      	blx	r3
}
     bc6:	2000      	movs	r0, #0
     bc8:	bd10      	pop	{r4, pc}
     bca:	46c0      	nop			; (mov r8, r8)
     bcc:	00002d1c 	.word	0x00002d1c
     bd0:	00000c05 	.word	0x00000c05
     bd4:	000011d5 	.word	0x000011d5

00000bd8 <usart_sync_get_io_descriptor>:
{
     bd8:	b570      	push	{r4, r5, r6, lr}
     bda:	0004      	movs	r4, r0
     bdc:	000d      	movs	r5, r1
	ASSERT(descr && io);
     bde:	2800      	cmp	r0, #0
     be0:	d00a      	beq.n	bf8 <usart_sync_get_io_descriptor+0x20>
     be2:	0008      	movs	r0, r1
     be4:	1e43      	subs	r3, r0, #1
     be6:	4198      	sbcs	r0, r3
     be8:	b2c0      	uxtb	r0, r0
     bea:	2269      	movs	r2, #105	; 0x69
     bec:	4903      	ldr	r1, [pc, #12]	; (bfc <usart_sync_get_io_descriptor+0x24>)
     bee:	4b04      	ldr	r3, [pc, #16]	; (c00 <usart_sync_get_io_descriptor+0x28>)
     bf0:	4798      	blx	r3
	*io = &descr->io;
     bf2:	602c      	str	r4, [r5, #0]
}
     bf4:	2000      	movs	r0, #0
     bf6:	bd70      	pop	{r4, r5, r6, pc}
     bf8:	2000      	movs	r0, #0
     bfa:	e7f6      	b.n	bea <usart_sync_get_io_descriptor+0x12>
     bfc:	00002d1c 	.word	0x00002d1c
     c00:	00000c05 	.word	0x00000c05

00000c04 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     c04:	2800      	cmp	r0, #0
     c06:	d100      	bne.n	c0a <assert+0x6>
		__asm("BKPT #0");
     c08:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     c0a:	4770      	bx	lr

00000c0c <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     c0c:	6803      	ldr	r3, [r0, #0]
     c0e:	2b00      	cmp	r3, #0
     c10:	d00a      	beq.n	c28 <is_list_element+0x1c>
		if (it == element) {
     c12:	428b      	cmp	r3, r1
     c14:	d00a      	beq.n	c2c <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
     c16:	681b      	ldr	r3, [r3, #0]
     c18:	2b00      	cmp	r3, #0
     c1a:	d003      	beq.n	c24 <is_list_element+0x18>
		if (it == element) {
     c1c:	4299      	cmp	r1, r3
     c1e:	d1fa      	bne.n	c16 <is_list_element+0xa>
			return true;
     c20:	2001      	movs	r0, #1
     c22:	e000      	b.n	c26 <is_list_element+0x1a>
		}
	}

	return false;
     c24:	2000      	movs	r0, #0
}
     c26:	4770      	bx	lr
	return false;
     c28:	2000      	movs	r0, #0
     c2a:	e7fc      	b.n	c26 <is_list_element+0x1a>
			return true;
     c2c:	2001      	movs	r0, #1
     c2e:	e7fa      	b.n	c26 <is_list_element+0x1a>

00000c30 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     c30:	b570      	push	{r4, r5, r6, lr}
     c32:	0004      	movs	r4, r0
     c34:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
     c36:	4b06      	ldr	r3, [pc, #24]	; (c50 <list_insert_as_head+0x20>)
     c38:	4798      	blx	r3
     c3a:	2301      	movs	r3, #1
     c3c:	4058      	eors	r0, r3
     c3e:	b2c0      	uxtb	r0, r0
     c40:	2239      	movs	r2, #57	; 0x39
     c42:	4904      	ldr	r1, [pc, #16]	; (c54 <list_insert_as_head+0x24>)
     c44:	4b04      	ldr	r3, [pc, #16]	; (c58 <list_insert_as_head+0x28>)
     c46:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     c48:	6823      	ldr	r3, [r4, #0]
     c4a:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     c4c:	6025      	str	r5, [r4, #0]
}
     c4e:	bd70      	pop	{r4, r5, r6, pc}
     c50:	00000c0d 	.word	0x00000c0d
     c54:	00002d38 	.word	0x00002d38
     c58:	00000c05 	.word	0x00000c05

00000c5c <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     c5c:	6803      	ldr	r3, [r0, #0]
     c5e:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     c60:	6001      	str	r1, [r0, #0]
}
     c62:	4770      	bx	lr

00000c64 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     c64:	6803      	ldr	r3, [r0, #0]
     c66:	2b00      	cmp	r3, #0
     c68:	d001      	beq.n	c6e <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     c6a:	681a      	ldr	r2, [r3, #0]
     c6c:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     c6e:	0018      	movs	r0, r3
     c70:	4770      	bx	lr
	...

00000c74 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     c74:	b570      	push	{r4, r5, r6, lr}
     c76:	0004      	movs	r4, r0
     c78:	000e      	movs	r6, r1
     c7a:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
     c7c:	2800      	cmp	r0, #0
     c7e:	d00b      	beq.n	c98 <ringbuffer_init+0x24>
     c80:	2900      	cmp	r1, #0
     c82:	d018      	beq.n	cb6 <ringbuffer_init+0x42>
     c84:	2001      	movs	r0, #1
     c86:	2a00      	cmp	r2, #0
     c88:	d107      	bne.n	c9a <ringbuffer_init+0x26>
     c8a:	2228      	movs	r2, #40	; 0x28
     c8c:	490c      	ldr	r1, [pc, #48]	; (cc0 <ringbuffer_init+0x4c>)
     c8e:	2000      	movs	r0, #0
     c90:	4b0c      	ldr	r3, [pc, #48]	; (cc4 <ringbuffer_init+0x50>)
     c92:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     c94:	1e6b      	subs	r3, r5, #1
     c96:	e007      	b.n	ca8 <ringbuffer_init+0x34>
	ASSERT(rb && buf && size);
     c98:	2000      	movs	r0, #0
     c9a:	2228      	movs	r2, #40	; 0x28
     c9c:	4908      	ldr	r1, [pc, #32]	; (cc0 <ringbuffer_init+0x4c>)
     c9e:	4b09      	ldr	r3, [pc, #36]	; (cc4 <ringbuffer_init+0x50>)
     ca0:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
     ca2:	1e6b      	subs	r3, r5, #1
     ca4:	422b      	tst	r3, r5
     ca6:	d108      	bne.n	cba <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     ca8:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     caa:	2300      	movs	r3, #0
     cac:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
     cae:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     cb0:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     cb2:	2000      	movs	r0, #0
}
     cb4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     cb6:	2000      	movs	r0, #0
     cb8:	e7ef      	b.n	c9a <ringbuffer_init+0x26>
		return ERR_INVALID_ARG;
     cba:	200d      	movs	r0, #13
     cbc:	4240      	negs	r0, r0
     cbe:	e7f9      	b.n	cb4 <ringbuffer_init+0x40>
     cc0:	00002d58 	.word	0x00002d58
     cc4:	00000c05 	.word	0x00000c05

00000cc8 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     cc8:	b570      	push	{r4, r5, r6, lr}
     cca:	0004      	movs	r4, r0
     ccc:	000d      	movs	r5, r1
	ASSERT(rb && data);
     cce:	2800      	cmp	r0, #0
     cd0:	d015      	beq.n	cfe <ringbuffer_get+0x36>
     cd2:	0008      	movs	r0, r1
     cd4:	1e43      	subs	r3, r0, #1
     cd6:	4198      	sbcs	r0, r3
     cd8:	b2c0      	uxtb	r0, r0
     cda:	2240      	movs	r2, #64	; 0x40
     cdc:	490a      	ldr	r1, [pc, #40]	; (d08 <ringbuffer_get+0x40>)
     cde:	4b0b      	ldr	r3, [pc, #44]	; (d0c <ringbuffer_get+0x44>)
     ce0:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     ce2:	68a3      	ldr	r3, [r4, #8]
     ce4:	68e2      	ldr	r2, [r4, #12]
     ce6:	429a      	cmp	r2, r3
     ce8:	d00b      	beq.n	d02 <ringbuffer_get+0x3a>
		*data = rb->buf[rb->read_index & rb->size];
     cea:	6862      	ldr	r2, [r4, #4]
     cec:	4013      	ands	r3, r2
     cee:	6822      	ldr	r2, [r4, #0]
     cf0:	5cd3      	ldrb	r3, [r2, r3]
     cf2:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     cf4:	68a3      	ldr	r3, [r4, #8]
     cf6:	3301      	adds	r3, #1
     cf8:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     cfa:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
     cfc:	bd70      	pop	{r4, r5, r6, pc}
     cfe:	2000      	movs	r0, #0
     d00:	e7eb      	b.n	cda <ringbuffer_get+0x12>
	return ERR_NOT_FOUND;
     d02:	200a      	movs	r0, #10
     d04:	4240      	negs	r0, r0
     d06:	e7f9      	b.n	cfc <ringbuffer_get+0x34>
     d08:	00002d58 	.word	0x00002d58
     d0c:	00000c05 	.word	0x00000c05

00000d10 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     d10:	b570      	push	{r4, r5, r6, lr}
     d12:	0004      	movs	r4, r0
     d14:	000d      	movs	r5, r1
	ASSERT(rb);
     d16:	1e43      	subs	r3, r0, #1
     d18:	4198      	sbcs	r0, r3
     d1a:	b2c0      	uxtb	r0, r0
     d1c:	2251      	movs	r2, #81	; 0x51
     d1e:	490a      	ldr	r1, [pc, #40]	; (d48 <ringbuffer_put+0x38>)
     d20:	4b0a      	ldr	r3, [pc, #40]	; (d4c <ringbuffer_put+0x3c>)
     d22:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     d24:	6863      	ldr	r3, [r4, #4]
     d26:	68e2      	ldr	r2, [r4, #12]
     d28:	4013      	ands	r3, r2
     d2a:	6822      	ldr	r2, [r4, #0]
     d2c:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     d2e:	68e3      	ldr	r3, [r4, #12]
     d30:	6861      	ldr	r1, [r4, #4]
     d32:	68a2      	ldr	r2, [r4, #8]
     d34:	1a9a      	subs	r2, r3, r2
     d36:	428a      	cmp	r2, r1
     d38:	d901      	bls.n	d3e <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     d3a:	1a59      	subs	r1, r3, r1
     d3c:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     d3e:	3301      	adds	r3, #1
     d40:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     d42:	2000      	movs	r0, #0
     d44:	bd70      	pop	{r4, r5, r6, pc}
     d46:	46c0      	nop			; (mov r8, r8)
     d48:	00002d58 	.word	0x00002d58
     d4c:	00000c05 	.word	0x00000c05

00000d50 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     d50:	b510      	push	{r4, lr}
     d52:	0004      	movs	r4, r0
	ASSERT(rb);
     d54:	1e43      	subs	r3, r0, #1
     d56:	4198      	sbcs	r0, r3
     d58:	b2c0      	uxtb	r0, r0
     d5a:	2267      	movs	r2, #103	; 0x67
     d5c:	4903      	ldr	r1, [pc, #12]	; (d6c <ringbuffer_num+0x1c>)
     d5e:	4b04      	ldr	r3, [pc, #16]	; (d70 <ringbuffer_num+0x20>)
     d60:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     d62:	68e0      	ldr	r0, [r4, #12]
     d64:	68a3      	ldr	r3, [r4, #8]
     d66:	1ac0      	subs	r0, r0, r3
}
     d68:	bd10      	pop	{r4, pc}
     d6a:	46c0      	nop			; (mov r8, r8)
     d6c:	00002d58 	.word	0x00002d58
     d70:	00000c05 	.word	0x00000c05

00000d74 <_adc_get_regs>:
		}
	}

	ASSERT(false);
	return 0;
}
     d74:	2000      	movs	r0, #0
     d76:	4770      	bx	lr

00000d78 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i  The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
     d78:	b570      	push	{r4, r5, r6, lr}
     d7a:	0004      	movs	r4, r0
     d7c:	000d      	movs	r5, r1
	ASSERT(hw == ADC);
     d7e:	4b39      	ldr	r3, [pc, #228]	; (e64 <_adc_init+0xec>)
     d80:	18c0      	adds	r0, r0, r3
     d82:	4242      	negs	r2, r0
     d84:	4142      	adcs	r2, r0
     d86:	b2d0      	uxtb	r0, r2
     d88:	2294      	movs	r2, #148	; 0x94
     d8a:	4937      	ldr	r1, [pc, #220]	; (e68 <_adc_init+0xf0>)
     d8c:	4b37      	ldr	r3, [pc, #220]	; (e6c <_adc_init+0xf4>)
     d8e:	4798      	blx	r3

	uint16_t calib_reg;

	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
     d90:	4b37      	ldr	r3, [pc, #220]	; (e70 <_adc_init+0xf8>)
     d92:	681a      	ldr	r2, [r3, #0]
     d94:	0152      	lsls	r2, r2, #5
     d96:	23e0      	movs	r3, #224	; 0xe0
     d98:	00db      	lsls	r3, r3, #3
     d9a:	401a      	ands	r2, r3
	            | ADC_CALIB_LINEARITY_CAL((*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos));
     d9c:	4b35      	ldr	r3, [pc, #212]	; (e74 <_adc_init+0xfc>)
     d9e:	6859      	ldr	r1, [r3, #4]
     da0:	0149      	lsls	r1, r1, #5
     da2:	681b      	ldr	r3, [r3, #0]
     da4:	0edb      	lsrs	r3, r3, #27
     da6:	430b      	orrs	r3, r1
     da8:	21ff      	movs	r1, #255	; 0xff
     daa:	400b      	ands	r3, r1
	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
     dac:	431a      	orrs	r2, r3
typedef uint8_t  hri_adc_swtrig_reg_t;
typedef uint8_t  hri_adc_winctrl_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw)
{
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     dae:	7e63      	ldrb	r3, [r4, #25]
     db0:	09db      	lsrs	r3, r3, #7
     db2:	d1fc      	bne.n	dae <_adc_init+0x36>
}

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Adc *)hw)->CTRLA.reg;
     db4:	7823      	ldrb	r3, [r4, #0]

	hri_adc_wait_for_sync(hw);
	if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
     db6:	079b      	lsls	r3, r3, #30
     db8:	d504      	bpl.n	dc4 <_adc_init+0x4c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
     dba:	2300      	movs	r3, #0
     dbc:	7023      	strb	r3, [r4, #0]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     dbe:	7e63      	ldrb	r3, [r4, #25]
     dc0:	09db      	lsrs	r3, r3, #7
     dc2:	d1fc      	bne.n	dbe <_adc_init+0x46>
	((Adc *)hw)->CTRLA.reg = data;
     dc4:	2301      	movs	r3, #1
     dc6:	7023      	strb	r3, [r4, #0]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     dc8:	7e63      	ldrb	r3, [r4, #25]
     dca:	09db      	lsrs	r3, r3, #7
     dcc:	d1fc      	bne.n	dc8 <_adc_init+0x50>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
     dce:	8522      	strh	r2, [r4, #40]	; 0x28
	}
	hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	hri_adc_wait_for_sync(hw);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
     dd0:	00ea      	lsls	r2, r5, #3
     dd2:	1b52      	subs	r2, r2, r5
     dd4:	0092      	lsls	r2, r2, #2
     dd6:	4b28      	ldr	r3, [pc, #160]	; (e78 <_adc_init+0x100>)
     dd8:	189b      	adds	r3, r3, r2
     dda:	789a      	ldrb	r2, [r3, #2]
	((Adc *)hw)->REFCTRL.reg = data;
     ddc:	7062      	strb	r2, [r4, #1]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
     dde:	78da      	ldrb	r2, [r3, #3]
	((Adc *)hw)->AVGCTRL.reg = data;
     de0:	70a2      	strb	r2, [r4, #2]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
     de2:	791a      	ldrb	r2, [r3, #4]
	((Adc *)hw)->SAMPCTRL.reg = data;
     de4:	70e2      	strb	r2, [r4, #3]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
     de6:	7c1a      	ldrb	r2, [r3, #16]
	((Adc *)hw)->EVCTRL.reg = data;
     de8:	7522      	strb	r2, [r4, #20]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
     dea:	8ada      	ldrh	r2, [r3, #22]
	((Adc *)hw)->GAINCORR.reg = data;
     dec:	84a2      	strh	r2, [r4, #36]	; 0x24
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
     dee:	8b1a      	ldrh	r2, [r3, #24]
	((Adc *)hw)->OFFSETCORR.reg = data;
     df0:	84e2      	strh	r2, [r4, #38]	; 0x26
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
     df2:	7e99      	ldrb	r1, [r3, #26]
}

static inline void hri_adc_write_DBGCTRL_reg(const void *const hw, hri_adc_dbgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->DBGCTRL.reg = data;
     df4:	222a      	movs	r2, #42	; 0x2a
     df6:	54a1      	strb	r1, [r4, r2]
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
     df8:	88db      	ldrh	r3, [r3, #6]
	((Adc *)hw)->CTRLB.reg = data;
     dfa:	80a3      	strh	r3, [r4, #4]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     dfc:	7e63      	ldrb	r3, [r4, #25]
     dfe:	09db      	lsrs	r3, r3, #7
     e00:	d1fc      	bne.n	dfc <_adc_init+0x84>
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
     e02:	00eb      	lsls	r3, r5, #3
     e04:	1b5b      	subs	r3, r3, r5
     e06:	009b      	lsls	r3, r3, #2
     e08:	4a1b      	ldr	r2, [pc, #108]	; (e78 <_adc_init+0x100>)
     e0a:	18d3      	adds	r3, r2, r3
     e0c:	68db      	ldr	r3, [r3, #12]
	((Adc *)hw)->INPUTCTRL.reg = data;
     e0e:	6123      	str	r3, [r4, #16]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     e10:	7e63      	ldrb	r3, [r4, #25]
     e12:	09db      	lsrs	r3, r3, #7
     e14:	d1fc      	bne.n	e10 <_adc_init+0x98>
	hri_adc_write_WINCTRL_reg(hw, _adcs[i].win_ctrl);
     e16:	00eb      	lsls	r3, r5, #3
     e18:	1b5b      	subs	r3, r3, r5
     e1a:	009b      	lsls	r3, r3, #2
     e1c:	4a16      	ldr	r2, [pc, #88]	; (e78 <_adc_init+0x100>)
     e1e:	18d3      	adds	r3, r2, r3
     e20:	7a1b      	ldrb	r3, [r3, #8]
	((Adc *)hw)->WINCTRL.reg = data;
     e22:	7223      	strb	r3, [r4, #8]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     e24:	7e63      	ldrb	r3, [r4, #25]
     e26:	09db      	lsrs	r3, r3, #7
     e28:	d1fc      	bne.n	e24 <_adc_init+0xac>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
     e2a:	00eb      	lsls	r3, r5, #3
     e2c:	1b5b      	subs	r3, r3, r5
     e2e:	009b      	lsls	r3, r3, #2
     e30:	4a11      	ldr	r2, [pc, #68]	; (e78 <_adc_init+0x100>)
     e32:	18d3      	adds	r3, r2, r3
     e34:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->WINLT.reg = data;
     e36:	83a3      	strh	r3, [r4, #28]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     e38:	7e63      	ldrb	r3, [r4, #25]
     e3a:	09db      	lsrs	r3, r3, #7
     e3c:	d1fc      	bne.n	e38 <_adc_init+0xc0>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
     e3e:	00eb      	lsls	r3, r5, #3
     e40:	1b5b      	subs	r3, r3, r5
     e42:	009b      	lsls	r3, r3, #2
     e44:	4a0c      	ldr	r2, [pc, #48]	; (e78 <_adc_init+0x100>)
     e46:	18d3      	adds	r3, r2, r3
     e48:	8a9b      	ldrh	r3, [r3, #20]
	((Adc *)hw)->WINUT.reg = data;
     e4a:	8423      	strh	r3, [r4, #32]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     e4c:	7e63      	ldrb	r3, [r4, #25]
     e4e:	09db      	lsrs	r3, r3, #7
     e50:	d1fc      	bne.n	e4c <_adc_init+0xd4>
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
     e52:	00eb      	lsls	r3, r5, #3
     e54:	1b5d      	subs	r5, r3, r5
     e56:	00ad      	lsls	r5, r5, #2
     e58:	4b07      	ldr	r3, [pc, #28]	; (e78 <_adc_init+0x100>)
     e5a:	195d      	adds	r5, r3, r5
     e5c:	786b      	ldrb	r3, [r5, #1]
	((Adc *)hw)->CTRLA.reg = data;
     e5e:	7023      	strb	r3, [r4, #0]

	return ERR_NONE;
}
     e60:	2000      	movs	r0, #0
     e62:	bd70      	pop	{r4, r5, r6, pc}
     e64:	bdffe000 	.word	0xbdffe000
     e68:	00002d98 	.word	0x00002d98
     e6c:	00000c05 	.word	0x00000c05
     e70:	00806024 	.word	0x00806024
     e74:	00806020 	.word	0x00806020
     e78:	00002d7c 	.word	0x00002d7c

00000e7c <_adc_async_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_async_init(struct _adc_async_device *const device, void *const hw)
{
     e7c:	b570      	push	{r4, r5, r6, lr}
     e7e:	0005      	movs	r5, r0
     e80:	000c      	movs	r4, r1
	int32_t init_status;

	ASSERT(device);
     e82:	1e43      	subs	r3, r0, #1
     e84:	4198      	sbcs	r0, r3
     e86:	b2c0      	uxtb	r0, r0
     e88:	22d3      	movs	r2, #211	; 0xd3
     e8a:	490e      	ldr	r1, [pc, #56]	; (ec4 <_adc_async_init+0x48>)
     e8c:	4b0e      	ldr	r3, [pc, #56]	; (ec8 <_adc_async_init+0x4c>)
     e8e:	4798      	blx	r3

	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
     e90:	0020      	movs	r0, r4
     e92:	4b0e      	ldr	r3, [pc, #56]	; (ecc <_adc_async_init+0x50>)
     e94:	4798      	blx	r3
     e96:	0001      	movs	r1, r0
     e98:	0020      	movs	r0, r4
     e9a:	4b0d      	ldr	r3, [pc, #52]	; (ed0 <_adc_async_init+0x54>)
     e9c:	4798      	blx	r3
	if (init_status) {
     e9e:	2800      	cmp	r0, #0
     ea0:	d10f      	bne.n	ec2 <_adc_async_init+0x46>
		return init_status;
	}
	device->hw = hw;
     ea2:	616c      	str	r4, [r5, #20]
	_adc_dev   = device;
     ea4:	4b0b      	ldr	r3, [pc, #44]	; (ed4 <_adc_async_init+0x58>)
     ea6:	601d      	str	r5, [r3, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ea8:	4b0b      	ldr	r3, [pc, #44]	; (ed8 <_adc_async_init+0x5c>)
     eaa:	2280      	movs	r2, #128	; 0x80
     eac:	0212      	lsls	r2, r2, #8
     eae:	2180      	movs	r1, #128	; 0x80
     eb0:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
     eb2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     eb6:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     eba:	3101      	adds	r1, #1
     ebc:	31ff      	adds	r1, #255	; 0xff
     ebe:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ec0:	601a      	str	r2, [r3, #0]
	NVIC_DisableIRQ(ADC_IRQn);
	NVIC_ClearPendingIRQ(ADC_IRQn);
	NVIC_EnableIRQ(ADC_IRQn);

	return ERR_NONE;
}
     ec2:	bd70      	pop	{r4, r5, r6, pc}
     ec4:	00002d98 	.word	0x00002d98
     ec8:	00000c05 	.word	0x00000c05
     ecc:	00000d75 	.word	0x00000d75
     ed0:	00000d79 	.word	0x00000d79
     ed4:	20000034 	.word	0x20000034
     ed8:	e000e100 	.word	0xe000e100

00000edc <_adc_async_enable_channel>:
 */
void _adc_async_enable_channel(struct _adc_async_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
     edc:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
     ede:	7813      	ldrb	r3, [r2, #0]
     ee0:	2102      	movs	r1, #2
     ee2:	430b      	orrs	r3, r1
     ee4:	7013      	strb	r3, [r2, #0]
}
     ee6:	4770      	bx	lr

00000ee8 <_adc_async_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_async_get_data_size(const struct _adc_async_device *const device)
{
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
     ee8:	6942      	ldr	r2, [r0, #20]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     eea:	7e53      	ldrb	r3, [r2, #25]
     eec:	09db      	lsrs	r3, r3, #7
     eee:	d1fc      	bne.n	eea <_adc_async_get_data_size+0x2>
	tmp = ((Adc *)hw)->CTRLB.reg;
     ef0:	8890      	ldrh	r0, [r2, #4]
	tmp = (tmp & ADC_CTRLB_RESSEL_Msk) >> ADC_CTRLB_RESSEL_Pos;
     ef2:	0680      	lsls	r0, r0, #26
     ef4:	0f80      	lsrs	r0, r0, #30
     ef6:	3803      	subs	r0, #3
     ef8:	1e43      	subs	r3, r0, #1
     efa:	4198      	sbcs	r0, r3
     efc:	3001      	adds	r0, #1
}
     efe:	4770      	bx	lr

00000f00 <_adc_async_convert>:
/**
 * \brief Make conversion
 */
void _adc_async_convert(struct _adc_async_device *const device)
{
	hri_adc_set_SWTRIG_START_bit(device->hw);
     f00:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
     f02:	7b13      	ldrb	r3, [r2, #12]
     f04:	2102      	movs	r1, #2
     f06:	430b      	orrs	r3, r1
     f08:	7313      	strb	r3, [r2, #12]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     f0a:	7e53      	ldrb	r3, [r2, #25]
     f0c:	09db      	lsrs	r3, r3, #7
     f0e:	d1fc      	bne.n	f0a <_adc_async_convert+0xa>
}
     f10:	4770      	bx	lr

00000f12 <_adc_async_set_irq_state>:
void _adc_async_set_irq_state(struct _adc_async_device *const device, const uint8_t channel,
                              const enum _adc_async_callback_type type, const bool state)
{
	(void)channel;

	void *const hw = device->hw;
     f12:	6941      	ldr	r1, [r0, #20]

	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
     f14:	2a01      	cmp	r2, #1
     f16:	d008      	beq.n	f2a <_adc_async_set_irq_state+0x18>
		hri_adc_write_INTEN_WINMON_bit(hw, state);
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
     f18:	2a02      	cmp	r2, #2
     f1a:	d00e      	beq.n	f3a <_adc_async_set_irq_state+0x28>
		hri_adc_write_INTEN_OVERRUN_bit(hw, state);
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
     f1c:	2a00      	cmp	r2, #0
     f1e:	d103      	bne.n	f28 <_adc_async_set_irq_state+0x16>
	if (value == 0x0) {
     f20:	2b00      	cmp	r3, #0
     f22:	d012      	beq.n	f4a <_adc_async_set_irq_state+0x38>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
     f24:	2301      	movs	r3, #1
     f26:	75cb      	strb	r3, [r1, #23]
		hri_adc_write_INTEN_RESRDY_bit(hw, state);
	}
}
     f28:	4770      	bx	lr
	if (value == 0x0) {
     f2a:	2b00      	cmp	r3, #0
     f2c:	d102      	bne.n	f34 <_adc_async_set_irq_state+0x22>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
     f2e:	3304      	adds	r3, #4
     f30:	758b      	strb	r3, [r1, #22]
     f32:	e7f9      	b.n	f28 <_adc_async_set_irq_state+0x16>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
     f34:	2304      	movs	r3, #4
     f36:	75cb      	strb	r3, [r1, #23]
     f38:	e7f6      	b.n	f28 <_adc_async_set_irq_state+0x16>
	if (value == 0x0) {
     f3a:	2b00      	cmp	r3, #0
     f3c:	d102      	bne.n	f44 <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
     f3e:	3302      	adds	r3, #2
     f40:	758b      	strb	r3, [r1, #22]
     f42:	e7f1      	b.n	f28 <_adc_async_set_irq_state+0x16>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
     f44:	2302      	movs	r3, #2
     f46:	75cb      	strb	r3, [r1, #23]
     f48:	e7ee      	b.n	f28 <_adc_async_set_irq_state+0x16>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
     f4a:	3301      	adds	r3, #1
     f4c:	758b      	strb	r3, [r1, #22]
     f4e:	e7eb      	b.n	f28 <_adc_async_set_irq_state+0x16>

00000f50 <ADC_Handler>:

/**
 * \internal ADC interrupt handler
 */
void ADC_Handler(void)
{
     f50:	b510      	push	{r4, lr}
	void *const hw      = _adc_dev->hw;
     f52:	4b11      	ldr	r3, [pc, #68]	; (f98 <ADC_Handler+0x48>)
     f54:	6818      	ldr	r0, [r3, #0]
     f56:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
     f58:	7e11      	ldrb	r1, [r2, #24]
	return ((Adc *)hw)->INTENSET.reg;
     f5a:	7dd3      	ldrb	r3, [r2, #23]
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
     f5c:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
     f5e:	07d9      	lsls	r1, r3, #31
     f60:	d50a      	bpl.n	f78 <ADC_Handler+0x28>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     f62:	2301      	movs	r3, #1
     f64:	7613      	strb	r3, [r2, #24]
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		_adc_dev->adc_async_ch_cb.convert_done(_adc_dev, 0, hri_adc_read_RESULT_reg(hw));
     f66:	6884      	ldr	r4, [r0, #8]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     f68:	7e53      	ldrb	r3, [r2, #25]
     f6a:	09db      	lsrs	r3, r3, #7
     f6c:	d1fc      	bne.n	f68 <ADC_Handler+0x18>
	return ((Adc *)hw)->RESULT.reg;
     f6e:	8b52      	ldrh	r2, [r2, #26]
     f70:	b292      	uxth	r2, r2
     f72:	2100      	movs	r1, #0
     f74:	47a0      	blx	r4
		_adc_dev->adc_async_cb.error_cb(_adc_dev, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
		hri_adc_clear_interrupt_WINMON_bit(hw);
		_adc_dev->adc_async_cb.window_cb(_adc_dev, 0);
	}
}
     f76:	bd10      	pop	{r4, pc}
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
     f78:	0799      	lsls	r1, r3, #30
     f7a:	d407      	bmi.n	f8c <ADC_Handler+0x3c>
	} else if (intflag & ADC_INTFLAG_WINMON) {
     f7c:	075b      	lsls	r3, r3, #29
     f7e:	d5fa      	bpl.n	f76 <ADC_Handler+0x26>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
     f80:	2304      	movs	r3, #4
     f82:	7613      	strb	r3, [r2, #24]
		_adc_dev->adc_async_cb.window_cb(_adc_dev, 0);
     f84:	6803      	ldr	r3, [r0, #0]
     f86:	2100      	movs	r1, #0
     f88:	4798      	blx	r3
}
     f8a:	e7f4      	b.n	f76 <ADC_Handler+0x26>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     f8c:	2302      	movs	r3, #2
     f8e:	7613      	strb	r3, [r2, #24]
		_adc_dev->adc_async_cb.error_cb(_adc_dev, 0);
     f90:	6843      	ldr	r3, [r0, #4]
     f92:	2100      	movs	r1, #0
     f94:	4798      	blx	r3
     f96:	e7ee      	b.n	f76 <ADC_Handler+0x26>
     f98:	20000034 	.word	0x20000034

00000f9c <_irq_set>:
  if ((int32_t)(IRQn) >= 0)
     f9c:	b243      	sxtb	r3, r0
     f9e:	2b00      	cmp	r3, #0
     fa0:	db07      	blt.n	fb2 <_irq_set+0x16>
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     fa2:	231f      	movs	r3, #31
     fa4:	4018      	ands	r0, r3
     fa6:	3b1e      	subs	r3, #30
     fa8:	4083      	lsls	r3, r0
     faa:	2280      	movs	r2, #128	; 0x80
     fac:	0052      	lsls	r2, r2, #1
     fae:	4901      	ldr	r1, [pc, #4]	; (fb4 <_irq_set+0x18>)
     fb0:	508b      	str	r3, [r1, r2]
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
}
     fb2:	4770      	bx	lr
     fb4:	e000e100 	.word	0xe000e100

00000fb8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     fb8:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     fba:	4b06      	ldr	r3, [pc, #24]	; (fd4 <_init_chip+0x1c>)
     fbc:	685a      	ldr	r2, [r3, #4]
     fbe:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     fc0:	4b05      	ldr	r3, [pc, #20]	; (fd8 <_init_chip+0x20>)
     fc2:	4798      	blx	r3
	_sysctrl_init_sources();
     fc4:	4b05      	ldr	r3, [pc, #20]	; (fdc <_init_chip+0x24>)
     fc6:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     fc8:	4b05      	ldr	r3, [pc, #20]	; (fe0 <_init_chip+0x28>)
     fca:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     fcc:	203f      	movs	r0, #63	; 0x3f
     fce:	4b05      	ldr	r3, [pc, #20]	; (fe4 <_init_chip+0x2c>)
     fd0:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     fd2:	bd10      	pop	{r4, pc}
     fd4:	41004000 	.word	0x41004000
     fd8:	000010ed 	.word	0x000010ed
     fdc:	00001219 	.word	0x00001219
     fe0:	00001261 	.word	0x00001261
     fe4:	000010cd 	.word	0x000010cd

00000fe8 <_dac_init>:
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw)
{
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
     fe8:	79c3      	ldrb	r3, [r0, #7]
     fea:	09db      	lsrs	r3, r3, #7
     fec:	d1fc      	bne.n	fe8 <_dac_init>
     fee:	79c3      	ldrb	r3, [r0, #7]
     ff0:	09db      	lsrs	r3, r3, #7
     ff2:	d1fc      	bne.n	fee <_dac_init+0x6>

static inline hri_dac_ctrla_reg_t hri_dac_get_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw);
	tmp = ((Dac *)hw)->CTRLA.reg;
     ff4:	7803      	ldrb	r3, [r0, #0]
 * param[in] hw The pointer to DAC hardware instance
 */
static int32_t _dac_init(void *const hw)
{
	hri_dac_wait_for_sync(hw);
	if (hri_dac_get_CTRLA_reg(hw, DAC_CTRLA_ENABLE)) {
     ff6:	079b      	lsls	r3, r3, #30
     ff8:	d507      	bpl.n	100a <_dac_init+0x22>
}

static inline void hri_dac_write_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLA.reg = data;
     ffa:	2300      	movs	r3, #0
     ffc:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
     ffe:	79c3      	ldrb	r3, [r0, #7]
    1000:	09db      	lsrs	r3, r3, #7
    1002:	d1fc      	bne.n	ffe <_dac_init+0x16>
    1004:	79c3      	ldrb	r3, [r0, #7]
    1006:	09db      	lsrs	r3, r3, #7
    1008:	d1fc      	bne.n	1004 <_dac_init+0x1c>
	((Dac *)hw)->CTRLA.reg = data;
    100a:	2301      	movs	r3, #1
    100c:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    100e:	79c3      	ldrb	r3, [r0, #7]
    1010:	09db      	lsrs	r3, r3, #7
    1012:	d1fc      	bne.n	100e <_dac_init+0x26>
    1014:	79c3      	ldrb	r3, [r0, #7]
    1016:	09db      	lsrs	r3, r3, #7
    1018:	d1fc      	bne.n	1014 <_dac_init+0x2c>
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    101a:	7083      	strb	r3, [r0, #2]
	((Dac *)hw)->CTRLB.reg = data;
    101c:	2201      	movs	r2, #1
    101e:	7042      	strb	r2, [r0, #1]
	((Dac *)hw)->CTRLA.reg = data;
    1020:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    1022:	79c3      	ldrb	r3, [r0, #7]
    1024:	09db      	lsrs	r3, r3, #7
    1026:	d1fc      	bne.n	1022 <_dac_init+0x3a>

	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_CTRLB_reg(hw, _dac.ctrlb);
	hri_dac_write_CTRLA_reg(hw, _dac.ctrla);
	return ERR_NONE;
}
    1028:	2000      	movs	r0, #0
    102a:	4770      	bx	lr

0000102c <DAC_Handler>:
{
    102c:	b510      	push	{r4, lr}
	void *const hw = _dac_dev->hw;
    102e:	4b0f      	ldr	r3, [pc, #60]	; (106c <DAC_Handler+0x40>)
    1030:	6818      	ldr	r0, [r3, #0]
    1032:	6903      	ldr	r3, [r0, #16]
	return (((Dac *)hw)->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) >> DAC_INTFLAG_UNDERRUN_Pos;
    1034:	799a      	ldrb	r2, [r3, #6]
	if (hri_dac_get_interrupt_UNDERRUN_bit(hw)) {
    1036:	07d2      	lsls	r2, r2, #31
    1038:	d507      	bpl.n	104a <DAC_Handler+0x1e>
	((Dac *)hw)->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
    103a:	2201      	movs	r2, #1
    103c:	719a      	strb	r2, [r3, #6]
		if (NULL != _dac_dev->dac_cb.tx_error_cb) {
    103e:	6843      	ldr	r3, [r0, #4]
    1040:	2b00      	cmp	r3, #0
    1042:	d001      	beq.n	1048 <DAC_Handler+0x1c>
			_dac_dev->dac_cb.tx_error_cb(_dac_dev, 0);
    1044:	2100      	movs	r1, #0
    1046:	4798      	blx	r3
}
    1048:	bd10      	pop	{r4, pc}
	return (((Dac *)hw)->INTFLAG.reg & DAC_INTFLAG_EMPTY) >> DAC_INTFLAG_EMPTY_Pos;
    104a:	799a      	ldrb	r2, [r3, #6]
	} else if (hri_dac_get_interrupt_EMPTY_bit(hw)) {
    104c:	0792      	lsls	r2, r2, #30
    104e:	d507      	bpl.n	1060 <DAC_Handler+0x34>
	((Dac *)hw)->INTFLAG.reg = DAC_INTFLAG_EMPTY;
    1050:	2202      	movs	r2, #2
    1052:	719a      	strb	r2, [r3, #6]
		if (NULL != _dac_dev->dac_cb.tx_ready_cb) {
    1054:	6803      	ldr	r3, [r0, #0]
    1056:	2b00      	cmp	r3, #0
    1058:	d0f6      	beq.n	1048 <DAC_Handler+0x1c>
			_dac_dev->dac_cb.tx_ready_cb(_dac_dev, 0);
    105a:	2100      	movs	r1, #0
    105c:	4798      	blx	r3
    105e:	e7f3      	b.n	1048 <DAC_Handler+0x1c>
	return (((Dac *)hw)->INTFLAG.reg & DAC_INTFLAG_SYNCRDY) >> DAC_INTFLAG_SYNCRDY_Pos;
    1060:	799a      	ldrb	r2, [r3, #6]
	} else if (hri_dac_get_interrupt_SYNCRDY_bit(hw)) {
    1062:	0752      	lsls	r2, r2, #29
    1064:	d5f0      	bpl.n	1048 <DAC_Handler+0x1c>
	((Dac *)hw)->INTFLAG.reg = DAC_INTFLAG_SYNCRDY;
    1066:	2204      	movs	r2, #4
    1068:	719a      	strb	r2, [r3, #6]
}
    106a:	e7ed      	b.n	1048 <DAC_Handler+0x1c>
    106c:	20000038 	.word	0x20000038

00001070 <_dac_async_init>:

/**
 * \brief Initialize DAC
 */
int32_t _dac_async_init(struct _dac_async_device *const device, void *const hw)
{
    1070:	b570      	push	{r4, r5, r6, lr}
    1072:	0004      	movs	r4, r0
    1074:	000d      	movs	r5, r1
	int32_t init_status;

	ASSERT(device);
    1076:	1e43      	subs	r3, r0, #1
    1078:	4198      	sbcs	r0, r3
    107a:	b2c0      	uxtb	r0, r0
    107c:	228e      	movs	r2, #142	; 0x8e
    107e:	490c      	ldr	r1, [pc, #48]	; (10b0 <_dac_async_init+0x40>)
    1080:	4b0c      	ldr	r3, [pc, #48]	; (10b4 <_dac_async_init+0x44>)
    1082:	4798      	blx	r3

	init_status = _dac_init(hw);
    1084:	0028      	movs	r0, r5
    1086:	4b0c      	ldr	r3, [pc, #48]	; (10b8 <_dac_async_init+0x48>)
    1088:	4798      	blx	r3
	if (init_status) {
    108a:	2800      	cmp	r0, #0
    108c:	d10f      	bne.n	10ae <_dac_async_init+0x3e>
		return init_status;
	}
	device->hw = hw;
    108e:	6125      	str	r5, [r4, #16]

	_dac_dev = device;
    1090:	4b0a      	ldr	r3, [pc, #40]	; (10bc <_dac_async_init+0x4c>)
    1092:	601c      	str	r4, [r3, #0]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1094:	4b0a      	ldr	r3, [pc, #40]	; (10c0 <_dac_async_init+0x50>)
    1096:	2280      	movs	r2, #128	; 0x80
    1098:	0292      	lsls	r2, r2, #10
    109a:	2180      	movs	r1, #128	; 0x80
    109c:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    109e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    10a2:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    10a6:	3101      	adds	r1, #1
    10a8:	31ff      	adds	r1, #255	; 0xff
    10aa:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    10ac:	601a      	str	r2, [r3, #0]
	NVIC_DisableIRQ(DAC_IRQn);
	NVIC_ClearPendingIRQ(DAC_IRQn);
	NVIC_EnableIRQ(DAC_IRQn);

	return ERR_NONE;
}
    10ae:	bd70      	pop	{r4, r5, r6, pc}
    10b0:	00002db0 	.word	0x00002db0
    10b4:	00000c05 	.word	0x00000c05
    10b8:	00000fe9 	.word	0x00000fe9
    10bc:	20000038 	.word	0x20000038
    10c0:	e000e100 	.word	0xe000e100

000010c4 <_dac_async_write_data>:
 * \brief write DAC data for output
 */
void _dac_async_write_data(struct _dac_async_device *const device, const uint16_t data, const uint8_t ch)
{
	(void)ch;
	hri_dac_write_DATABUF_reg(device->hw, data);
    10c4:	6903      	ldr	r3, [r0, #16]
}

static inline void hri_dac_write_DATABUF_reg(const void *const hw, hri_dac_databuf_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DATABUF.reg = data;
    10c6:	8199      	strh	r1, [r3, #12]
}
    10c8:	4770      	bx	lr
	...

000010cc <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    10cc:	07c3      	lsls	r3, r0, #31
    10ce:	d50a      	bpl.n	10e6 <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    10d0:	4b05      	ldr	r3, [pc, #20]	; (10e8 <_gclk_init_generators_by_fref+0x1c>)
    10d2:	2280      	movs	r2, #128	; 0x80
    10d4:	0052      	lsls	r2, r2, #1
    10d6:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    10d8:	2283      	movs	r2, #131	; 0x83
    10da:	0252      	lsls	r2, r2, #9
    10dc:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    10de:	001a      	movs	r2, r3
    10e0:	7853      	ldrb	r3, [r2, #1]
    10e2:	09db      	lsrs	r3, r3, #7
    10e4:	d1fc      	bne.n	10e0 <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GEN_5_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_5_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_5_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_5_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SRC | GCLK_GENCTRL_ID(5));
	}
#endif
}
    10e6:	4770      	bx	lr
    10e8:	40000c00 	.word	0x40000c00

000010ec <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    10ec:	4b06      	ldr	r3, [pc, #24]	; (1108 <_pm_init+0x1c>)
    10ee:	7a1a      	ldrb	r2, [r3, #8]
    10f0:	b2d2      	uxtb	r2, r2
    10f2:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    10f4:	7a5a      	ldrb	r2, [r3, #9]
    10f6:	b2d2      	uxtb	r2, r2
    10f8:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    10fa:	7a9a      	ldrb	r2, [r3, #10]
    10fc:	b2d2      	uxtb	r2, r2
    10fe:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    1100:	7ada      	ldrb	r2, [r3, #11]
    1102:	b2d2      	uxtb	r2, r2
    1104:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    1106:	4770      	bx	lr
    1108:	40000400 	.word	0x40000400

0000110c <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    110c:	b510      	push	{r4, lr}
    110e:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1110:	4b1f      	ldr	r3, [pc, #124]	; (1190 <_usart_init+0x84>)
    1112:	18c3      	adds	r3, r0, r3
    1114:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
    1116:	b2db      	uxtb	r3, r3
    1118:	2b02      	cmp	r3, #2
    111a:	d004      	beq.n	1126 <_usart_init+0x1a>
	ASSERT(false);
    111c:	4a1d      	ldr	r2, [pc, #116]	; (1194 <_usart_init+0x88>)
    111e:	491e      	ldr	r1, [pc, #120]	; (1198 <_usart_init+0x8c>)
    1120:	2000      	movs	r0, #0
    1122:	4b1e      	ldr	r3, [pc, #120]	; (119c <_usart_init+0x90>)
    1124:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1126:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1128:	07db      	lsls	r3, r3, #31
    112a:	d418      	bmi.n	115e <_usart_init+0x52>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    112c:	2203      	movs	r2, #3
    112e:	69e3      	ldr	r3, [r4, #28]
    1130:	421a      	tst	r2, r3
    1132:	d1fc      	bne.n	112e <_usart_init+0x22>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1134:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1136:	079b      	lsls	r3, r3, #30
    1138:	d50b      	bpl.n	1152 <_usart_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    113a:	6823      	ldr	r3, [r4, #0]
    113c:	2202      	movs	r2, #2
    113e:	4393      	bics	r3, r2
    1140:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1142:	3201      	adds	r2, #1
    1144:	69e3      	ldr	r3, [r4, #28]
    1146:	421a      	tst	r2, r3
    1148:	d1fc      	bne.n	1144 <_usart_init+0x38>
    114a:	2202      	movs	r2, #2
    114c:	69e3      	ldr	r3, [r4, #28]
    114e:	421a      	tst	r2, r3
    1150:	d1fc      	bne.n	114c <_usart_init+0x40>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1152:	2305      	movs	r3, #5
    1154:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1156:	2203      	movs	r2, #3
    1158:	69e3      	ldr	r3, [r4, #28]
    115a:	421a      	tst	r2, r3
    115c:	d1fc      	bne.n	1158 <_usart_init+0x4c>
    115e:	2201      	movs	r2, #1
    1160:	69e3      	ldr	r3, [r4, #28]
    1162:	421a      	tst	r2, r3
    1164:	d1fc      	bne.n	1160 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1166:	4b0e      	ldr	r3, [pc, #56]	; (11a0 <_usart_init+0x94>)
    1168:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    116a:	2203      	movs	r2, #3
    116c:	69e3      	ldr	r3, [r4, #28]
    116e:	421a      	tst	r2, r3
    1170:	d1fc      	bne.n	116c <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1172:	23c0      	movs	r3, #192	; 0xc0
    1174:	029b      	lsls	r3, r3, #10
    1176:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1178:	2207      	movs	r2, #7
    117a:	69e3      	ldr	r3, [r4, #28]
    117c:	421a      	tst	r2, r3
    117e:	d1fc      	bne.n	117a <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1180:	4b08      	ldr	r3, [pc, #32]	; (11a4 <_usart_init+0x98>)
    1182:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1184:	2300      	movs	r3, #0
    1186:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1188:	2230      	movs	r2, #48	; 0x30
    118a:	54a3      	strb	r3, [r4, r2]

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
    118c:	2000      	movs	r0, #0
    118e:	bd10      	pop	{r4, pc}
    1190:	bdfff800 	.word	0xbdfff800
    1194:	0000023a 	.word	0x0000023a
    1198:	00002dc8 	.word	0x00002dc8
    119c:	00000c05 	.word	0x00000c05
    11a0:	40310004 	.word	0x40310004
    11a4:	ffffd8ad 	.word	0xffffd8ad

000011a8 <_usart_sync_init>:
{
    11a8:	b570      	push	{r4, r5, r6, lr}
    11aa:	0005      	movs	r5, r0
    11ac:	000c      	movs	r4, r1
	ASSERT(device);
    11ae:	1e43      	subs	r3, r0, #1
    11b0:	4198      	sbcs	r0, r3
    11b2:	b2c0      	uxtb	r0, r0
    11b4:	22b4      	movs	r2, #180	; 0xb4
    11b6:	4904      	ldr	r1, [pc, #16]	; (11c8 <_usart_sync_init+0x20>)
    11b8:	4b04      	ldr	r3, [pc, #16]	; (11cc <_usart_sync_init+0x24>)
    11ba:	4798      	blx	r3
	device->hw = hw;
    11bc:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    11be:	0020      	movs	r0, r4
    11c0:	4b03      	ldr	r3, [pc, #12]	; (11d0 <_usart_sync_init+0x28>)
    11c2:	4798      	blx	r3
}
    11c4:	bd70      	pop	{r4, r5, r6, pc}
    11c6:	46c0      	nop			; (mov r8, r8)
    11c8:	00002dc8 	.word	0x00002dc8
    11cc:	00000c05 	.word	0x00000c05
    11d0:	0000110d 	.word	0x0000110d

000011d4 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    11d4:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    11d6:	6813      	ldr	r3, [r2, #0]
    11d8:	2102      	movs	r1, #2
    11da:	430b      	orrs	r3, r1
    11dc:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    11de:	3101      	adds	r1, #1
    11e0:	69d3      	ldr	r3, [r2, #28]
    11e2:	4219      	tst	r1, r3
    11e4:	d1fc      	bne.n	11e0 <_usart_sync_enable+0xc>
}
    11e6:	4770      	bx	lr

000011e8 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    11e8:	6803      	ldr	r3, [r0, #0]
    11ea:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    11ec:	8519      	strh	r1, [r3, #40]	; 0x28
}
    11ee:	4770      	bx	lr

000011f0 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    11f0:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    11f2:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    11f4:	b2c0      	uxtb	r0, r0
}
    11f6:	4770      	bx	lr

000011f8 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    11f8:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    11fa:	7e18      	ldrb	r0, [r3, #24]
    11fc:	2301      	movs	r3, #1
    11fe:	4018      	ands	r0, r3
}
    1200:	4770      	bx	lr

00001202 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    1202:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1204:	7e18      	ldrb	r0, [r3, #24]
    1206:	0780      	lsls	r0, r0, #30
    1208:	0fc0      	lsrs	r0, r0, #31
}
    120a:	4770      	bx	lr

0000120c <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    120c:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    120e:	7e18      	ldrb	r0, [r3, #24]
    1210:	0740      	lsls	r0, r0, #29
    1212:	0fc0      	lsrs	r0, r0, #31
}
    1214:	4770      	bx	lr
	...

00001218 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1218:	4b0e      	ldr	r3, [pc, #56]	; (1254 <_sysctrl_init_sources+0x3c>)
    121a:	6a1a      	ldr	r2, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    121c:	6a19      	ldr	r1, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    121e:	480e      	ldr	r0, [pc, #56]	; (1258 <_sysctrl_init_sources+0x40>)
    1220:	4002      	ands	r2, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1222:	0f89      	lsrs	r1, r1, #30
    1224:	0789      	lsls	r1, r1, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    1226:	480d      	ldr	r0, [pc, #52]	; (125c <_sysctrl_init_sources+0x44>)
    1228:	4301      	orrs	r1, r0
    122a:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    122c:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    122e:	699a      	ldr	r2, [r3, #24]
    1230:	2102      	movs	r1, #2
    1232:	430a      	orrs	r2, r1
    1234:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    1236:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    1238:	311d      	adds	r1, #29
    123a:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    123c:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    123e:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    1240:	2208      	movs	r2, #8
    1242:	68cb      	ldr	r3, [r1, #12]
    1244:	421a      	tst	r2, r3
    1246:	d0fc      	beq.n	1242 <_sysctrl_init_sources+0x2a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    1248:	4a02      	ldr	r2, [pc, #8]	; (1254 <_sysctrl_init_sources+0x3c>)
    124a:	6a13      	ldr	r3, [r2, #32]
    124c:	2180      	movs	r1, #128	; 0x80
    124e:	430b      	orrs	r3, r1
    1250:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1252:	4770      	bx	lr
    1254:	40000800 	.word	0x40000800
    1258:	0fff0000 	.word	0x0fff0000
    125c:	00000302 	.word	0x00000302

00001260 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    1260:	4a02      	ldr	r2, [pc, #8]	; (126c <_sysctrl_init_referenced_generators+0xc>)
    1262:	6993      	ldr	r3, [r2, #24]
    1264:	2102      	movs	r1, #2
    1266:	438b      	bics	r3, r1
    1268:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    126a:	4770      	bx	lr
    126c:	40000800 	.word	0x40000800

00001270 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1270:	4b02      	ldr	r3, [pc, #8]	; (127c <_delay_init+0xc>)
    1272:	4a03      	ldr	r2, [pc, #12]	; (1280 <_delay_init+0x10>)
    1274:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1276:	2205      	movs	r2, #5
    1278:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
    127a:	4770      	bx	lr
    127c:	e000e010 	.word	0xe000e010
    1280:	00ffffff 	.word	0x00ffffff

00001284 <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    1284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1286:	0007      	movs	r7, r0
    1288:	000c      	movs	r4, r1
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    128a:	4b3c      	ldr	r3, [pc, #240]	; (137c <_timer_init+0xf8>)
    128c:	18cd      	adds	r5, r1, r3
    128e:	0aad      	lsrs	r5, r5, #10
    1290:	b2ed      	uxtb	r5, r5
{
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
		if (_tcs[i].number == tc_offset) {
    1292:	2d00      	cmp	r5, #0
    1294:	d051      	beq.n	133a <_timer_init+0xb6>
			return i;
		}
	}

	ASSERT(false);
    1296:	2296      	movs	r2, #150	; 0x96
    1298:	0052      	lsls	r2, r2, #1
    129a:	4939      	ldr	r1, [pc, #228]	; (1380 <_timer_init+0xfc>)
    129c:	2000      	movs	r0, #0
    129e:	4b39      	ldr	r3, [pc, #228]	; (1384 <_timer_init+0x100>)
    12a0:	4798      	blx	r3
	return -1;
    12a2:	2601      	movs	r6, #1
    12a4:	4276      	negs	r6, r6
	device->hw = hw;
    12a6:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    12a8:	2279      	movs	r2, #121	; 0x79
    12aa:	4935      	ldr	r1, [pc, #212]	; (1380 <_timer_init+0xfc>)
    12ac:	2001      	movs	r0, #1
    12ae:	4b35      	ldr	r3, [pc, #212]	; (1384 <_timer_init+0x100>)
    12b0:	4798      	blx	r3
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw)
{
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    12b2:	7be3      	ldrb	r3, [r4, #15]
    12b4:	09db      	lsrs	r3, r3, #7
    12b6:	d1fc      	bne.n	12b2 <_timer_init+0x2e>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    12b8:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    12ba:	079b      	lsls	r3, r3, #30
    12bc:	d504      	bpl.n	12c8 <_timer_init+0x44>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    12be:	2300      	movs	r3, #0
    12c0:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    12c2:	7be3      	ldrb	r3, [r4, #15]
    12c4:	09db      	lsrs	r3, r3, #7
    12c6:	d1fc      	bne.n	12c2 <_timer_init+0x3e>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    12c8:	2301      	movs	r3, #1
    12ca:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    12cc:	7be3      	ldrb	r3, [r4, #15]
    12ce:	09db      	lsrs	r3, r3, #7
    12d0:	d1fc      	bne.n	12cc <_timer_init+0x48>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    12d2:	00b3      	lsls	r3, r6, #2
    12d4:	199b      	adds	r3, r3, r6
    12d6:	009a      	lsls	r2, r3, #2
    12d8:	4b2b      	ldr	r3, [pc, #172]	; (1388 <_timer_init+0x104>)
    12da:	189b      	adds	r3, r3, r2
    12dc:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    12de:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    12e0:	7918      	ldrb	r0, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    12e2:	7220      	strb	r0, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    12e4:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    12e6:	8163      	strh	r3, [r4, #10]
    12e8:	230c      	movs	r3, #12
    12ea:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    12ec:	2b08      	cmp	r3, #8
    12ee:	d026      	beq.n	133e <_timer_init+0xba>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    12f0:	2b00      	cmp	r3, #0
    12f2:	d12e      	bne.n	1352 <_timer_init+0xce>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    12f4:	00b3      	lsls	r3, r6, #2
    12f6:	199b      	adds	r3, r3, r6
    12f8:	009b      	lsls	r3, r3, #2
    12fa:	4a23      	ldr	r2, [pc, #140]	; (1388 <_timer_init+0x104>)
    12fc:	18d3      	adds	r3, r2, r3
    12fe:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1300:	8323      	strh	r3, [r4, #24]
    1302:	2300      	movs	r3, #0
    1304:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    1306:	2301      	movs	r3, #1
    1308:	7363      	strb	r3, [r4, #13]
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC1) {
    130a:	4b20      	ldr	r3, [pc, #128]	; (138c <_timer_init+0x108>)
    130c:	429c      	cmp	r4, r3
    130e:	d031      	beq.n	1374 <_timer_init+0xf0>
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1310:	350d      	adds	r5, #13
  if ((int32_t)(IRQn) >= 0)
    1312:	b2eb      	uxtb	r3, r5
    1314:	062a      	lsls	r2, r5, #24
    1316:	d40e      	bmi.n	1336 <_timer_init+0xb2>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1318:	221f      	movs	r2, #31
    131a:	401a      	ands	r2, r3
    131c:	2301      	movs	r3, #1
    131e:	4093      	lsls	r3, r2
    1320:	4a1b      	ldr	r2, [pc, #108]	; (1390 <_timer_init+0x10c>)
    1322:	2180      	movs	r1, #128	; 0x80
    1324:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1326:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    132a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    132e:	3101      	adds	r1, #1
    1330:	31ff      	adds	r1, #255	; 0xff
    1332:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1334:	6013      	str	r3, [r2, #0]
}
    1336:	2000      	movs	r0, #0
    1338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return i;
    133a:	2600      	movs	r6, #0
    133c:	e7b3      	b.n	12a6 <_timer_init+0x22>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    133e:	00b3      	lsls	r3, r6, #2
    1340:	199e      	adds	r6, r3, r6
    1342:	00b6      	lsls	r6, r6, #2
    1344:	4b10      	ldr	r3, [pc, #64]	; (1388 <_timer_init+0x104>)
    1346:	199e      	adds	r6, r3, r6
    1348:	68f3      	ldr	r3, [r6, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    134a:	61a3      	str	r3, [r4, #24]
    134c:	2300      	movs	r3, #0
    134e:	61e3      	str	r3, [r4, #28]
    1350:	e7d9      	b.n	1306 <_timer_init+0x82>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    1352:	2b04      	cmp	r3, #4
    1354:	d1d7      	bne.n	1306 <_timer_init+0x82>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tccount8_cc_reg_t)_tcs[i].cc0);
    1356:	480c      	ldr	r0, [pc, #48]	; (1388 <_timer_init+0x104>)
    1358:	00b3      	lsls	r3, r6, #2
    135a:	199a      	adds	r2, r3, r6
    135c:	0092      	lsls	r2, r2, #2
    135e:	1882      	adds	r2, r0, r2
    1360:	7b12      	ldrb	r2, [r2, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    1362:	7622      	strb	r2, [r4, #24]
    1364:	2200      	movs	r2, #0
    1366:	7662      	strb	r2, [r4, #25]
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    1368:	199b      	adds	r3, r3, r6
    136a:	009b      	lsls	r3, r3, #2
    136c:	18c3      	adds	r3, r0, r3
    136e:	7a1b      	ldrb	r3, [r3, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
    1370:	7523      	strb	r3, [r4, #20]
    1372:	e7c8      	b.n	1306 <_timer_init+0x82>
		_tc1_dev = (struct _timer_device *)dev;
    1374:	4b07      	ldr	r3, [pc, #28]	; (1394 <_timer_init+0x110>)
    1376:	601f      	str	r7, [r3, #0]
    1378:	e7ca      	b.n	1310 <_timer_init+0x8c>
    137a:	46c0      	nop			; (mov r8, r8)
    137c:	bdffe800 	.word	0xbdffe800
    1380:	00002df8 	.word	0x00002df8
    1384:	00000c05 	.word	0x00000c05
    1388:	00002de4 	.word	0x00002de4
    138c:	42001800 	.word	0x42001800
    1390:	e000e100 	.word	0xe000e100
    1394:	2000003c 	.word	0x2000003c

00001398 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    1398:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    139a:	8813      	ldrh	r3, [r2, #0]
    139c:	2102      	movs	r1, #2
    139e:	430b      	orrs	r3, r1
    13a0:	8013      	strh	r3, [r2, #0]
}
    13a2:	4770      	bx	lr

000013a4 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    13a4:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    13a6:	8818      	ldrh	r0, [r3, #0]
	return (bool)tmp;
    13a8:	0780      	lsls	r0, r0, #30
    13aa:	0fc0      	lsrs	r0, r0, #31
}
    13ac:	4770      	bx	lr

000013ae <_tc_get_timer>:
}
    13ae:	2000      	movs	r0, #0
    13b0:	4770      	bx	lr
	...

000013b4 <_timer_set_irq>:
{
    13b4:	b510      	push	{r4, lr}
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    13b6:	68c0      	ldr	r0, [r0, #12]
    13b8:	4b04      	ldr	r3, [pc, #16]	; (13cc <_timer_set_irq+0x18>)
    13ba:	469c      	mov	ip, r3
    13bc:	4460      	add	r0, ip
    13be:	0a80      	lsrs	r0, r0, #10
	_irq_set((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(device->hw)));
    13c0:	300d      	adds	r0, #13
    13c2:	b2c0      	uxtb	r0, r0
    13c4:	4b02      	ldr	r3, [pc, #8]	; (13d0 <_timer_set_irq+0x1c>)
    13c6:	4798      	blx	r3
}
    13c8:	bd10      	pop	{r4, pc}
    13ca:	46c0      	nop			; (mov r8, r8)
    13cc:	bdffe800 	.word	0xbdffe800
    13d0:	00000f9d 	.word	0x00000f9d

000013d4 <TC1_Handler>:
{
    13d4:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc1_dev);
    13d6:	4b06      	ldr	r3, [pc, #24]	; (13f0 <TC1_Handler+0x1c>)
    13d8:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    13da:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    13dc:	7b9a      	ldrb	r2, [r3, #14]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    13de:	07d2      	lsls	r2, r2, #31
    13e0:	d400      	bmi.n	13e4 <TC1_Handler+0x10>
}
    13e2:	bd10      	pop	{r4, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    13e4:	2201      	movs	r2, #1
    13e6:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
    13e8:	6803      	ldr	r3, [r0, #0]
    13ea:	4798      	blx	r3
}
    13ec:	e7f9      	b.n	13e2 <TC1_Handler+0xe>
    13ee:	46c0      	nop			; (mov r8, r8)
    13f0:	2000003c 	.word	0x2000003c

000013f4 <adc_cb>:
	usart_sync_enable(&USART_0);
}

static void adc_cb(const struct adc_async_descriptor *const descr, const uint8_t channel)
{
	conversion = true;
    13f4:	2201      	movs	r2, #1
    13f6:	4b01      	ldr	r3, [pc, #4]	; (13fc <adc_cb+0x8>)
    13f8:	701a      	strb	r2, [r3, #0]
}
    13fa:	4770      	bx	lr
    13fc:	20000040 	.word	0x20000040

00001400 <TIM0_cb>:
	adc_async_enable_channel(&ADC_0, 0);
	adc_async_start_conversion(&ADC_0);
}

static void TIM0_cb(const struct timer_task *const timer_task)
{
    1400:	b510      	push	{r4, lr}
	adc_async_start_conversion(&ADC_0);
    1402:	4802      	ldr	r0, [pc, #8]	; (140c <TIM0_cb+0xc>)
    1404:	4b02      	ldr	r3, [pc, #8]	; (1410 <TIM0_cb+0x10>)
    1406:	4798      	blx	r3

}
    1408:	bd10      	pop	{r4, pc}
    140a:	46c0      	nop			; (mov r8, r8)
    140c:	2000005c 	.word	0x2000005c
    1410:	00000731 	.word	0x00000731

00001414 <uart_init>:
{
    1414:	b510      	push	{r4, lr}
	usart_sync_get_io_descriptor(&USART_0, &io);
    1416:	4c04      	ldr	r4, [pc, #16]	; (1428 <uart_init+0x14>)
    1418:	4904      	ldr	r1, [pc, #16]	; (142c <uart_init+0x18>)
    141a:	0020      	movs	r0, r4
    141c:	4b04      	ldr	r3, [pc, #16]	; (1430 <uart_init+0x1c>)
    141e:	4798      	blx	r3
	usart_sync_enable(&USART_0);
    1420:	0020      	movs	r0, r4
    1422:	4b04      	ldr	r3, [pc, #16]	; (1434 <uart_init+0x20>)
    1424:	4798      	blx	r3
}
    1426:	bd10      	pop	{r4, pc}
    1428:	200000c4 	.word	0x200000c4
    142c:	200000f4 	.word	0x200000f4
    1430:	00000bd9 	.word	0x00000bd9
    1434:	00000bad 	.word	0x00000bad

00001438 <adc_init>:
{
    1438:	b570      	push	{r4, r5, r6, lr}
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB,adc_cb);
    143a:	4c07      	ldr	r4, [pc, #28]	; (1458 <adc_init+0x20>)
    143c:	4b07      	ldr	r3, [pc, #28]	; (145c <adc_init+0x24>)
    143e:	2200      	movs	r2, #0
    1440:	2100      	movs	r1, #0
    1442:	0020      	movs	r0, r4
    1444:	4d06      	ldr	r5, [pc, #24]	; (1460 <adc_init+0x28>)
    1446:	47a8      	blx	r5
	adc_async_enable_channel(&ADC_0, 0);
    1448:	2100      	movs	r1, #0
    144a:	0020      	movs	r0, r4
    144c:	4b05      	ldr	r3, [pc, #20]	; (1464 <adc_init+0x2c>)
    144e:	4798      	blx	r3
	adc_async_start_conversion(&ADC_0);
    1450:	0020      	movs	r0, r4
    1452:	4b05      	ldr	r3, [pc, #20]	; (1468 <adc_init+0x30>)
    1454:	4798      	blx	r3
}
    1456:	bd70      	pop	{r4, r5, r6, pc}
    1458:	2000005c 	.word	0x2000005c
    145c:	000013f5 	.word	0x000013f5
    1460:	000005c9 	.word	0x000005c9
    1464:	00000589 	.word	0x00000589
    1468:	00000731 	.word	0x00000731

0000146c <TIM0_init>:
void TIM0_init(void)
{
    146c:	b510      	push	{r4, lr}
	TIMER_0_task.interval = 10;
    146e:	4908      	ldr	r1, [pc, #32]	; (1490 <TIM0_init+0x24>)
    1470:	230a      	movs	r3, #10
    1472:	60cb      	str	r3, [r1, #12]
	TIMER_0_task.cb       = TIM0_cb;
    1474:	4b07      	ldr	r3, [pc, #28]	; (1494 <TIM0_init+0x28>)
    1476:	610b      	str	r3, [r1, #16]
	TIMER_0_task.mode     = TIMER_TASK_REPEAT;
    1478:	2301      	movs	r3, #1
    147a:	750b      	strb	r3, [r1, #20]

	timer_add_task(&TIMER_0, &TIMER_0_task);
    147c:	3104      	adds	r1, #4
    147e:	4c06      	ldr	r4, [pc, #24]	; (1498 <TIM0_init+0x2c>)
    1480:	0020      	movs	r0, r4
    1482:	4b06      	ldr	r3, [pc, #24]	; (149c <TIM0_init+0x30>)
    1484:	4798      	blx	r3
	timer_start(&TIMER_0);
    1486:	0020      	movs	r0, r4
    1488:	4b05      	ldr	r3, [pc, #20]	; (14a0 <TIM0_init+0x34>)
    148a:	4798      	blx	r3
}
    148c:	bd10      	pop	{r4, pc}
    148e:	46c0      	nop			; (mov r8, r8)
    1490:	20000040 	.word	0x20000040
    1494:	00001401 	.word	0x00001401
    1498:	200000d0 	.word	0x200000d0
    149c:	000009d1 	.word	0x000009d1
    14a0:	00000995 	.word	0x00000995

000014a4 <main>:
int main(void)
{
    14a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    14a6:	4b1e      	ldr	r3, [pc, #120]	; (1520 <main+0x7c>)
    14a8:	4798      	blx	r3
	uart_init();
    14aa:	4b1e      	ldr	r3, [pc, #120]	; (1524 <main+0x80>)
    14ac:	4798      	blx	r3
	adc_init();
    14ae:	4b1e      	ldr	r3, [pc, #120]	; (1528 <main+0x84>)
    14b0:	4798      	blx	r3
	adc_async_start_conversion(&ADC_0);
    14b2:	481e      	ldr	r0, [pc, #120]	; (152c <main+0x88>)
    14b4:	4b1e      	ldr	r3, [pc, #120]	; (1530 <main+0x8c>)
    14b6:	4798      	blx	r3
	io_write(io, (uint8_t *)"Hello World!", 12);
    14b8:	4b1e      	ldr	r3, [pc, #120]	; (1534 <main+0x90>)
    14ba:	6818      	ldr	r0, [r3, #0]
    14bc:	220c      	movs	r2, #12
    14be:	491e      	ldr	r1, [pc, #120]	; (1538 <main+0x94>)
    14c0:	4b1e      	ldr	r3, [pc, #120]	; (153c <main+0x98>)
    14c2:	4798      	blx	r3
	TIM0_init();
    14c4:	4b1e      	ldr	r3, [pc, #120]	; (1540 <main+0x9c>)
    14c6:	4798      	blx	r3
    14c8:	e00f      	b.n	14ea <main+0x46>
			{
			adc_async_read_channel(&ADC_0, 0, &adc_result, 1);
				while(!conversion){};
				decimation += adc_result*4;
			}
			decimation = decimation/32;
    14ca:	2200      	movs	r2, #0
    14cc:	4b1d      	ldr	r3, [pc, #116]	; (1544 <main+0xa0>)
    14ce:	4e1e      	ldr	r6, [pc, #120]	; (1548 <main+0xa4>)
    14d0:	47b0      	blx	r6
    14d2:	6020      	str	r0, [r4, #0]
    14d4:	6061      	str	r1, [r4, #4]
			fix = (uint8_t)decimation;
    14d6:	4e1d      	ldr	r6, [pc, #116]	; (154c <main+0xa8>)
    14d8:	4b1d      	ldr	r3, [pc, #116]	; (1550 <main+0xac>)
    14da:	4798      	blx	r3
    14dc:	7030      	strb	r0, [r6, #0]
// 		out = accumulator + 28;
// 		if(cur == 0)
// 		cur = COEF_LENGTH - 1;
// 		else
// 		cur--;
		io_write(io, &fix, 1);
    14de:	4b15      	ldr	r3, [pc, #84]	; (1534 <main+0x90>)
    14e0:	6818      	ldr	r0, [r3, #0]
    14e2:	2201      	movs	r2, #1
    14e4:	0031      	movs	r1, r6
    14e6:	4b15      	ldr	r3, [pc, #84]	; (153c <main+0x98>)
    14e8:	4798      	blx	r3
{
    14ea:	2708      	movs	r7, #8
			adc_async_read_channel(&ADC_0, 0, &adc_result, 1);
    14ec:	4e19      	ldr	r6, [pc, #100]	; (1554 <main+0xb0>)
    14ee:	2301      	movs	r3, #1
    14f0:	4a19      	ldr	r2, [pc, #100]	; (1558 <main+0xb4>)
    14f2:	2100      	movs	r1, #0
    14f4:	480d      	ldr	r0, [pc, #52]	; (152c <main+0x88>)
    14f6:	47b0      	blx	r6
				while(!conversion){};
    14f8:	4a18      	ldr	r2, [pc, #96]	; (155c <main+0xb8>)
    14fa:	7813      	ldrb	r3, [r2, #0]
    14fc:	2b00      	cmp	r3, #0
    14fe:	d0fc      	beq.n	14fa <main+0x56>
				decimation += adc_result*4;
    1500:	4b15      	ldr	r3, [pc, #84]	; (1558 <main+0xb4>)
    1502:	7818      	ldrb	r0, [r3, #0]
    1504:	0080      	lsls	r0, r0, #2
    1506:	4b16      	ldr	r3, [pc, #88]	; (1560 <main+0xbc>)
    1508:	4798      	blx	r3
    150a:	4c16      	ldr	r4, [pc, #88]	; (1564 <main+0xc0>)
    150c:	6822      	ldr	r2, [r4, #0]
    150e:	6863      	ldr	r3, [r4, #4]
    1510:	4d15      	ldr	r5, [pc, #84]	; (1568 <main+0xc4>)
    1512:	47a8      	blx	r5
    1514:	6020      	str	r0, [r4, #0]
    1516:	6061      	str	r1, [r4, #4]
    1518:	3f01      	subs	r7, #1
			for(int i = 0; i < 8; i++)
    151a:	2f00      	cmp	r7, #0
    151c:	d1e7      	bne.n	14ee <main+0x4a>
    151e:	e7d4      	b.n	14ca <main+0x26>
    1520:	000000ed 	.word	0x000000ed
    1524:	00001415 	.word	0x00001415
    1528:	00001439 	.word	0x00001439
    152c:	2000005c 	.word	0x2000005c
    1530:	00000731 	.word	0x00000731
    1534:	200000f4 	.word	0x200000f4
    1538:	00002e0c 	.word	0x00002e0c
    153c:	00000821 	.word	0x00000821
    1540:	0000146d 	.word	0x0000146d
    1544:	3fa00000 	.word	0x3fa00000
    1548:	00001da1 	.word	0x00001da1
    154c:	20000108 	.word	0x20000108
    1550:	00001745 	.word	0x00001745
    1554:	00000645 	.word	0x00000645
    1558:	200000f1 	.word	0x200000f1
    155c:	20000040 	.word	0x20000040
    1560:	00002935 	.word	0x00002935
    1564:	20000100 	.word	0x20000100
    1568:	00001781 	.word	0x00001781

0000156c <__divsi3>:
    156c:	4603      	mov	r3, r0
    156e:	430b      	orrs	r3, r1
    1570:	d47f      	bmi.n	1672 <__divsi3+0x106>
    1572:	2200      	movs	r2, #0
    1574:	0843      	lsrs	r3, r0, #1
    1576:	428b      	cmp	r3, r1
    1578:	d374      	bcc.n	1664 <__divsi3+0xf8>
    157a:	0903      	lsrs	r3, r0, #4
    157c:	428b      	cmp	r3, r1
    157e:	d35f      	bcc.n	1640 <__divsi3+0xd4>
    1580:	0a03      	lsrs	r3, r0, #8
    1582:	428b      	cmp	r3, r1
    1584:	d344      	bcc.n	1610 <__divsi3+0xa4>
    1586:	0b03      	lsrs	r3, r0, #12
    1588:	428b      	cmp	r3, r1
    158a:	d328      	bcc.n	15de <__divsi3+0x72>
    158c:	0c03      	lsrs	r3, r0, #16
    158e:	428b      	cmp	r3, r1
    1590:	d30d      	bcc.n	15ae <__divsi3+0x42>
    1592:	22ff      	movs	r2, #255	; 0xff
    1594:	0209      	lsls	r1, r1, #8
    1596:	ba12      	rev	r2, r2
    1598:	0c03      	lsrs	r3, r0, #16
    159a:	428b      	cmp	r3, r1
    159c:	d302      	bcc.n	15a4 <__divsi3+0x38>
    159e:	1212      	asrs	r2, r2, #8
    15a0:	0209      	lsls	r1, r1, #8
    15a2:	d065      	beq.n	1670 <__divsi3+0x104>
    15a4:	0b03      	lsrs	r3, r0, #12
    15a6:	428b      	cmp	r3, r1
    15a8:	d319      	bcc.n	15de <__divsi3+0x72>
    15aa:	e000      	b.n	15ae <__divsi3+0x42>
    15ac:	0a09      	lsrs	r1, r1, #8
    15ae:	0bc3      	lsrs	r3, r0, #15
    15b0:	428b      	cmp	r3, r1
    15b2:	d301      	bcc.n	15b8 <__divsi3+0x4c>
    15b4:	03cb      	lsls	r3, r1, #15
    15b6:	1ac0      	subs	r0, r0, r3
    15b8:	4152      	adcs	r2, r2
    15ba:	0b83      	lsrs	r3, r0, #14
    15bc:	428b      	cmp	r3, r1
    15be:	d301      	bcc.n	15c4 <__divsi3+0x58>
    15c0:	038b      	lsls	r3, r1, #14
    15c2:	1ac0      	subs	r0, r0, r3
    15c4:	4152      	adcs	r2, r2
    15c6:	0b43      	lsrs	r3, r0, #13
    15c8:	428b      	cmp	r3, r1
    15ca:	d301      	bcc.n	15d0 <__divsi3+0x64>
    15cc:	034b      	lsls	r3, r1, #13
    15ce:	1ac0      	subs	r0, r0, r3
    15d0:	4152      	adcs	r2, r2
    15d2:	0b03      	lsrs	r3, r0, #12
    15d4:	428b      	cmp	r3, r1
    15d6:	d301      	bcc.n	15dc <__divsi3+0x70>
    15d8:	030b      	lsls	r3, r1, #12
    15da:	1ac0      	subs	r0, r0, r3
    15dc:	4152      	adcs	r2, r2
    15de:	0ac3      	lsrs	r3, r0, #11
    15e0:	428b      	cmp	r3, r1
    15e2:	d301      	bcc.n	15e8 <__divsi3+0x7c>
    15e4:	02cb      	lsls	r3, r1, #11
    15e6:	1ac0      	subs	r0, r0, r3
    15e8:	4152      	adcs	r2, r2
    15ea:	0a83      	lsrs	r3, r0, #10
    15ec:	428b      	cmp	r3, r1
    15ee:	d301      	bcc.n	15f4 <__divsi3+0x88>
    15f0:	028b      	lsls	r3, r1, #10
    15f2:	1ac0      	subs	r0, r0, r3
    15f4:	4152      	adcs	r2, r2
    15f6:	0a43      	lsrs	r3, r0, #9
    15f8:	428b      	cmp	r3, r1
    15fa:	d301      	bcc.n	1600 <__divsi3+0x94>
    15fc:	024b      	lsls	r3, r1, #9
    15fe:	1ac0      	subs	r0, r0, r3
    1600:	4152      	adcs	r2, r2
    1602:	0a03      	lsrs	r3, r0, #8
    1604:	428b      	cmp	r3, r1
    1606:	d301      	bcc.n	160c <__divsi3+0xa0>
    1608:	020b      	lsls	r3, r1, #8
    160a:	1ac0      	subs	r0, r0, r3
    160c:	4152      	adcs	r2, r2
    160e:	d2cd      	bcs.n	15ac <__divsi3+0x40>
    1610:	09c3      	lsrs	r3, r0, #7
    1612:	428b      	cmp	r3, r1
    1614:	d301      	bcc.n	161a <__divsi3+0xae>
    1616:	01cb      	lsls	r3, r1, #7
    1618:	1ac0      	subs	r0, r0, r3
    161a:	4152      	adcs	r2, r2
    161c:	0983      	lsrs	r3, r0, #6
    161e:	428b      	cmp	r3, r1
    1620:	d301      	bcc.n	1626 <__divsi3+0xba>
    1622:	018b      	lsls	r3, r1, #6
    1624:	1ac0      	subs	r0, r0, r3
    1626:	4152      	adcs	r2, r2
    1628:	0943      	lsrs	r3, r0, #5
    162a:	428b      	cmp	r3, r1
    162c:	d301      	bcc.n	1632 <__divsi3+0xc6>
    162e:	014b      	lsls	r3, r1, #5
    1630:	1ac0      	subs	r0, r0, r3
    1632:	4152      	adcs	r2, r2
    1634:	0903      	lsrs	r3, r0, #4
    1636:	428b      	cmp	r3, r1
    1638:	d301      	bcc.n	163e <__divsi3+0xd2>
    163a:	010b      	lsls	r3, r1, #4
    163c:	1ac0      	subs	r0, r0, r3
    163e:	4152      	adcs	r2, r2
    1640:	08c3      	lsrs	r3, r0, #3
    1642:	428b      	cmp	r3, r1
    1644:	d301      	bcc.n	164a <__divsi3+0xde>
    1646:	00cb      	lsls	r3, r1, #3
    1648:	1ac0      	subs	r0, r0, r3
    164a:	4152      	adcs	r2, r2
    164c:	0883      	lsrs	r3, r0, #2
    164e:	428b      	cmp	r3, r1
    1650:	d301      	bcc.n	1656 <__divsi3+0xea>
    1652:	008b      	lsls	r3, r1, #2
    1654:	1ac0      	subs	r0, r0, r3
    1656:	4152      	adcs	r2, r2
    1658:	0843      	lsrs	r3, r0, #1
    165a:	428b      	cmp	r3, r1
    165c:	d301      	bcc.n	1662 <__divsi3+0xf6>
    165e:	004b      	lsls	r3, r1, #1
    1660:	1ac0      	subs	r0, r0, r3
    1662:	4152      	adcs	r2, r2
    1664:	1a41      	subs	r1, r0, r1
    1666:	d200      	bcs.n	166a <__divsi3+0xfe>
    1668:	4601      	mov	r1, r0
    166a:	4152      	adcs	r2, r2
    166c:	4610      	mov	r0, r2
    166e:	4770      	bx	lr
    1670:	e05d      	b.n	172e <__divsi3+0x1c2>
    1672:	0fca      	lsrs	r2, r1, #31
    1674:	d000      	beq.n	1678 <__divsi3+0x10c>
    1676:	4249      	negs	r1, r1
    1678:	1003      	asrs	r3, r0, #32
    167a:	d300      	bcc.n	167e <__divsi3+0x112>
    167c:	4240      	negs	r0, r0
    167e:	4053      	eors	r3, r2
    1680:	2200      	movs	r2, #0
    1682:	469c      	mov	ip, r3
    1684:	0903      	lsrs	r3, r0, #4
    1686:	428b      	cmp	r3, r1
    1688:	d32d      	bcc.n	16e6 <__divsi3+0x17a>
    168a:	0a03      	lsrs	r3, r0, #8
    168c:	428b      	cmp	r3, r1
    168e:	d312      	bcc.n	16b6 <__divsi3+0x14a>
    1690:	22fc      	movs	r2, #252	; 0xfc
    1692:	0189      	lsls	r1, r1, #6
    1694:	ba12      	rev	r2, r2
    1696:	0a03      	lsrs	r3, r0, #8
    1698:	428b      	cmp	r3, r1
    169a:	d30c      	bcc.n	16b6 <__divsi3+0x14a>
    169c:	0189      	lsls	r1, r1, #6
    169e:	1192      	asrs	r2, r2, #6
    16a0:	428b      	cmp	r3, r1
    16a2:	d308      	bcc.n	16b6 <__divsi3+0x14a>
    16a4:	0189      	lsls	r1, r1, #6
    16a6:	1192      	asrs	r2, r2, #6
    16a8:	428b      	cmp	r3, r1
    16aa:	d304      	bcc.n	16b6 <__divsi3+0x14a>
    16ac:	0189      	lsls	r1, r1, #6
    16ae:	d03a      	beq.n	1726 <__divsi3+0x1ba>
    16b0:	1192      	asrs	r2, r2, #6
    16b2:	e000      	b.n	16b6 <__divsi3+0x14a>
    16b4:	0989      	lsrs	r1, r1, #6
    16b6:	09c3      	lsrs	r3, r0, #7
    16b8:	428b      	cmp	r3, r1
    16ba:	d301      	bcc.n	16c0 <__divsi3+0x154>
    16bc:	01cb      	lsls	r3, r1, #7
    16be:	1ac0      	subs	r0, r0, r3
    16c0:	4152      	adcs	r2, r2
    16c2:	0983      	lsrs	r3, r0, #6
    16c4:	428b      	cmp	r3, r1
    16c6:	d301      	bcc.n	16cc <__divsi3+0x160>
    16c8:	018b      	lsls	r3, r1, #6
    16ca:	1ac0      	subs	r0, r0, r3
    16cc:	4152      	adcs	r2, r2
    16ce:	0943      	lsrs	r3, r0, #5
    16d0:	428b      	cmp	r3, r1
    16d2:	d301      	bcc.n	16d8 <__divsi3+0x16c>
    16d4:	014b      	lsls	r3, r1, #5
    16d6:	1ac0      	subs	r0, r0, r3
    16d8:	4152      	adcs	r2, r2
    16da:	0903      	lsrs	r3, r0, #4
    16dc:	428b      	cmp	r3, r1
    16de:	d301      	bcc.n	16e4 <__divsi3+0x178>
    16e0:	010b      	lsls	r3, r1, #4
    16e2:	1ac0      	subs	r0, r0, r3
    16e4:	4152      	adcs	r2, r2
    16e6:	08c3      	lsrs	r3, r0, #3
    16e8:	428b      	cmp	r3, r1
    16ea:	d301      	bcc.n	16f0 <__divsi3+0x184>
    16ec:	00cb      	lsls	r3, r1, #3
    16ee:	1ac0      	subs	r0, r0, r3
    16f0:	4152      	adcs	r2, r2
    16f2:	0883      	lsrs	r3, r0, #2
    16f4:	428b      	cmp	r3, r1
    16f6:	d301      	bcc.n	16fc <__divsi3+0x190>
    16f8:	008b      	lsls	r3, r1, #2
    16fa:	1ac0      	subs	r0, r0, r3
    16fc:	4152      	adcs	r2, r2
    16fe:	d2d9      	bcs.n	16b4 <__divsi3+0x148>
    1700:	0843      	lsrs	r3, r0, #1
    1702:	428b      	cmp	r3, r1
    1704:	d301      	bcc.n	170a <__divsi3+0x19e>
    1706:	004b      	lsls	r3, r1, #1
    1708:	1ac0      	subs	r0, r0, r3
    170a:	4152      	adcs	r2, r2
    170c:	1a41      	subs	r1, r0, r1
    170e:	d200      	bcs.n	1712 <__divsi3+0x1a6>
    1710:	4601      	mov	r1, r0
    1712:	4663      	mov	r3, ip
    1714:	4152      	adcs	r2, r2
    1716:	105b      	asrs	r3, r3, #1
    1718:	4610      	mov	r0, r2
    171a:	d301      	bcc.n	1720 <__divsi3+0x1b4>
    171c:	4240      	negs	r0, r0
    171e:	2b00      	cmp	r3, #0
    1720:	d500      	bpl.n	1724 <__divsi3+0x1b8>
    1722:	4249      	negs	r1, r1
    1724:	4770      	bx	lr
    1726:	4663      	mov	r3, ip
    1728:	105b      	asrs	r3, r3, #1
    172a:	d300      	bcc.n	172e <__divsi3+0x1c2>
    172c:	4240      	negs	r0, r0
    172e:	b501      	push	{r0, lr}
    1730:	2000      	movs	r0, #0
    1732:	f000 f805 	bl	1740 <__aeabi_idiv0>
    1736:	bd02      	pop	{r1, pc}

00001738 <__aeabi_idivmod>:
    1738:	2900      	cmp	r1, #0
    173a:	d0f8      	beq.n	172e <__divsi3+0x1c2>
    173c:	e716      	b.n	156c <__divsi3>
    173e:	4770      	bx	lr

00001740 <__aeabi_idiv0>:
    1740:	4770      	bx	lr
    1742:	46c0      	nop			; (mov r8, r8)

00001744 <__aeabi_d2uiz>:
    1744:	b570      	push	{r4, r5, r6, lr}
    1746:	2200      	movs	r2, #0
    1748:	4b0c      	ldr	r3, [pc, #48]	; (177c <__aeabi_d2uiz+0x38>)
    174a:	0004      	movs	r4, r0
    174c:	000d      	movs	r5, r1
    174e:	f001 f967 	bl	2a20 <__aeabi_dcmpge>
    1752:	2800      	cmp	r0, #0
    1754:	d104      	bne.n	1760 <__aeabi_d2uiz+0x1c>
    1756:	0020      	movs	r0, r4
    1758:	0029      	movs	r1, r5
    175a:	f001 f8b7 	bl	28cc <__aeabi_d2iz>
    175e:	bd70      	pop	{r4, r5, r6, pc}
    1760:	4b06      	ldr	r3, [pc, #24]	; (177c <__aeabi_d2uiz+0x38>)
    1762:	2200      	movs	r2, #0
    1764:	0020      	movs	r0, r4
    1766:	0029      	movs	r1, r5
    1768:	f000 fd9a 	bl	22a0 <__aeabi_dsub>
    176c:	f001 f8ae 	bl	28cc <__aeabi_d2iz>
    1770:	2380      	movs	r3, #128	; 0x80
    1772:	061b      	lsls	r3, r3, #24
    1774:	469c      	mov	ip, r3
    1776:	4460      	add	r0, ip
    1778:	e7f1      	b.n	175e <__aeabi_d2uiz+0x1a>
    177a:	46c0      	nop			; (mov r8, r8)
    177c:	41e00000 	.word	0x41e00000

00001780 <__aeabi_dadd>:
    1780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1782:	4645      	mov	r5, r8
    1784:	46de      	mov	lr, fp
    1786:	4657      	mov	r7, sl
    1788:	464e      	mov	r6, r9
    178a:	030c      	lsls	r4, r1, #12
    178c:	b5e0      	push	{r5, r6, r7, lr}
    178e:	004e      	lsls	r6, r1, #1
    1790:	0fc9      	lsrs	r1, r1, #31
    1792:	4688      	mov	r8, r1
    1794:	000d      	movs	r5, r1
    1796:	0a61      	lsrs	r1, r4, #9
    1798:	0f44      	lsrs	r4, r0, #29
    179a:	430c      	orrs	r4, r1
    179c:	00c7      	lsls	r7, r0, #3
    179e:	0319      	lsls	r1, r3, #12
    17a0:	0058      	lsls	r0, r3, #1
    17a2:	0fdb      	lsrs	r3, r3, #31
    17a4:	469b      	mov	fp, r3
    17a6:	0a4b      	lsrs	r3, r1, #9
    17a8:	0f51      	lsrs	r1, r2, #29
    17aa:	430b      	orrs	r3, r1
    17ac:	0d76      	lsrs	r6, r6, #21
    17ae:	0d40      	lsrs	r0, r0, #21
    17b0:	0019      	movs	r1, r3
    17b2:	00d2      	lsls	r2, r2, #3
    17b4:	45d8      	cmp	r8, fp
    17b6:	d100      	bne.n	17ba <__aeabi_dadd+0x3a>
    17b8:	e0ae      	b.n	1918 <__aeabi_dadd+0x198>
    17ba:	1a35      	subs	r5, r6, r0
    17bc:	2d00      	cmp	r5, #0
    17be:	dc00      	bgt.n	17c2 <__aeabi_dadd+0x42>
    17c0:	e0f6      	b.n	19b0 <__aeabi_dadd+0x230>
    17c2:	2800      	cmp	r0, #0
    17c4:	d10f      	bne.n	17e6 <__aeabi_dadd+0x66>
    17c6:	4313      	orrs	r3, r2
    17c8:	d100      	bne.n	17cc <__aeabi_dadd+0x4c>
    17ca:	e0db      	b.n	1984 <__aeabi_dadd+0x204>
    17cc:	1e6b      	subs	r3, r5, #1
    17ce:	2b00      	cmp	r3, #0
    17d0:	d000      	beq.n	17d4 <__aeabi_dadd+0x54>
    17d2:	e137      	b.n	1a44 <__aeabi_dadd+0x2c4>
    17d4:	1aba      	subs	r2, r7, r2
    17d6:	4297      	cmp	r7, r2
    17d8:	41bf      	sbcs	r7, r7
    17da:	1a64      	subs	r4, r4, r1
    17dc:	427f      	negs	r7, r7
    17de:	1be4      	subs	r4, r4, r7
    17e0:	2601      	movs	r6, #1
    17e2:	0017      	movs	r7, r2
    17e4:	e024      	b.n	1830 <__aeabi_dadd+0xb0>
    17e6:	4bc6      	ldr	r3, [pc, #792]	; (1b00 <__aeabi_dadd+0x380>)
    17e8:	429e      	cmp	r6, r3
    17ea:	d04d      	beq.n	1888 <__aeabi_dadd+0x108>
    17ec:	2380      	movs	r3, #128	; 0x80
    17ee:	041b      	lsls	r3, r3, #16
    17f0:	4319      	orrs	r1, r3
    17f2:	2d38      	cmp	r5, #56	; 0x38
    17f4:	dd00      	ble.n	17f8 <__aeabi_dadd+0x78>
    17f6:	e107      	b.n	1a08 <__aeabi_dadd+0x288>
    17f8:	2d1f      	cmp	r5, #31
    17fa:	dd00      	ble.n	17fe <__aeabi_dadd+0x7e>
    17fc:	e138      	b.n	1a70 <__aeabi_dadd+0x2f0>
    17fe:	2020      	movs	r0, #32
    1800:	1b43      	subs	r3, r0, r5
    1802:	469a      	mov	sl, r3
    1804:	000b      	movs	r3, r1
    1806:	4650      	mov	r0, sl
    1808:	4083      	lsls	r3, r0
    180a:	4699      	mov	r9, r3
    180c:	0013      	movs	r3, r2
    180e:	4648      	mov	r0, r9
    1810:	40eb      	lsrs	r3, r5
    1812:	4318      	orrs	r0, r3
    1814:	0003      	movs	r3, r0
    1816:	4650      	mov	r0, sl
    1818:	4082      	lsls	r2, r0
    181a:	1e50      	subs	r0, r2, #1
    181c:	4182      	sbcs	r2, r0
    181e:	40e9      	lsrs	r1, r5
    1820:	431a      	orrs	r2, r3
    1822:	1aba      	subs	r2, r7, r2
    1824:	1a61      	subs	r1, r4, r1
    1826:	4297      	cmp	r7, r2
    1828:	41a4      	sbcs	r4, r4
    182a:	0017      	movs	r7, r2
    182c:	4264      	negs	r4, r4
    182e:	1b0c      	subs	r4, r1, r4
    1830:	0223      	lsls	r3, r4, #8
    1832:	d562      	bpl.n	18fa <__aeabi_dadd+0x17a>
    1834:	0264      	lsls	r4, r4, #9
    1836:	0a65      	lsrs	r5, r4, #9
    1838:	2d00      	cmp	r5, #0
    183a:	d100      	bne.n	183e <__aeabi_dadd+0xbe>
    183c:	e0df      	b.n	19fe <__aeabi_dadd+0x27e>
    183e:	0028      	movs	r0, r5
    1840:	f001 f8f8 	bl	2a34 <__clzsi2>
    1844:	0003      	movs	r3, r0
    1846:	3b08      	subs	r3, #8
    1848:	2b1f      	cmp	r3, #31
    184a:	dd00      	ble.n	184e <__aeabi_dadd+0xce>
    184c:	e0d2      	b.n	19f4 <__aeabi_dadd+0x274>
    184e:	2220      	movs	r2, #32
    1850:	003c      	movs	r4, r7
    1852:	1ad2      	subs	r2, r2, r3
    1854:	409d      	lsls	r5, r3
    1856:	40d4      	lsrs	r4, r2
    1858:	409f      	lsls	r7, r3
    185a:	4325      	orrs	r5, r4
    185c:	429e      	cmp	r6, r3
    185e:	dd00      	ble.n	1862 <__aeabi_dadd+0xe2>
    1860:	e0c4      	b.n	19ec <__aeabi_dadd+0x26c>
    1862:	1b9e      	subs	r6, r3, r6
    1864:	1c73      	adds	r3, r6, #1
    1866:	2b1f      	cmp	r3, #31
    1868:	dd00      	ble.n	186c <__aeabi_dadd+0xec>
    186a:	e0f1      	b.n	1a50 <__aeabi_dadd+0x2d0>
    186c:	2220      	movs	r2, #32
    186e:	0038      	movs	r0, r7
    1870:	0029      	movs	r1, r5
    1872:	1ad2      	subs	r2, r2, r3
    1874:	40d8      	lsrs	r0, r3
    1876:	4091      	lsls	r1, r2
    1878:	4097      	lsls	r7, r2
    187a:	002c      	movs	r4, r5
    187c:	4301      	orrs	r1, r0
    187e:	1e78      	subs	r0, r7, #1
    1880:	4187      	sbcs	r7, r0
    1882:	40dc      	lsrs	r4, r3
    1884:	2600      	movs	r6, #0
    1886:	430f      	orrs	r7, r1
    1888:	077b      	lsls	r3, r7, #29
    188a:	d009      	beq.n	18a0 <__aeabi_dadd+0x120>
    188c:	230f      	movs	r3, #15
    188e:	403b      	ands	r3, r7
    1890:	2b04      	cmp	r3, #4
    1892:	d005      	beq.n	18a0 <__aeabi_dadd+0x120>
    1894:	1d3b      	adds	r3, r7, #4
    1896:	42bb      	cmp	r3, r7
    1898:	41bf      	sbcs	r7, r7
    189a:	427f      	negs	r7, r7
    189c:	19e4      	adds	r4, r4, r7
    189e:	001f      	movs	r7, r3
    18a0:	0223      	lsls	r3, r4, #8
    18a2:	d52c      	bpl.n	18fe <__aeabi_dadd+0x17e>
    18a4:	4b96      	ldr	r3, [pc, #600]	; (1b00 <__aeabi_dadd+0x380>)
    18a6:	3601      	adds	r6, #1
    18a8:	429e      	cmp	r6, r3
    18aa:	d100      	bne.n	18ae <__aeabi_dadd+0x12e>
    18ac:	e09a      	b.n	19e4 <__aeabi_dadd+0x264>
    18ae:	4645      	mov	r5, r8
    18b0:	4b94      	ldr	r3, [pc, #592]	; (1b04 <__aeabi_dadd+0x384>)
    18b2:	08ff      	lsrs	r7, r7, #3
    18b4:	401c      	ands	r4, r3
    18b6:	0760      	lsls	r0, r4, #29
    18b8:	0576      	lsls	r6, r6, #21
    18ba:	0264      	lsls	r4, r4, #9
    18bc:	4307      	orrs	r7, r0
    18be:	0b24      	lsrs	r4, r4, #12
    18c0:	0d76      	lsrs	r6, r6, #21
    18c2:	2100      	movs	r1, #0
    18c4:	0324      	lsls	r4, r4, #12
    18c6:	0b23      	lsrs	r3, r4, #12
    18c8:	0d0c      	lsrs	r4, r1, #20
    18ca:	4a8f      	ldr	r2, [pc, #572]	; (1b08 <__aeabi_dadd+0x388>)
    18cc:	0524      	lsls	r4, r4, #20
    18ce:	431c      	orrs	r4, r3
    18d0:	4014      	ands	r4, r2
    18d2:	0533      	lsls	r3, r6, #20
    18d4:	4323      	orrs	r3, r4
    18d6:	005b      	lsls	r3, r3, #1
    18d8:	07ed      	lsls	r5, r5, #31
    18da:	085b      	lsrs	r3, r3, #1
    18dc:	432b      	orrs	r3, r5
    18de:	0038      	movs	r0, r7
    18e0:	0019      	movs	r1, r3
    18e2:	bc3c      	pop	{r2, r3, r4, r5}
    18e4:	4690      	mov	r8, r2
    18e6:	4699      	mov	r9, r3
    18e8:	46a2      	mov	sl, r4
    18ea:	46ab      	mov	fp, r5
    18ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18ee:	4664      	mov	r4, ip
    18f0:	4304      	orrs	r4, r0
    18f2:	d100      	bne.n	18f6 <__aeabi_dadd+0x176>
    18f4:	e211      	b.n	1d1a <__aeabi_dadd+0x59a>
    18f6:	0004      	movs	r4, r0
    18f8:	4667      	mov	r7, ip
    18fa:	077b      	lsls	r3, r7, #29
    18fc:	d1c6      	bne.n	188c <__aeabi_dadd+0x10c>
    18fe:	4645      	mov	r5, r8
    1900:	0760      	lsls	r0, r4, #29
    1902:	08ff      	lsrs	r7, r7, #3
    1904:	4307      	orrs	r7, r0
    1906:	08e4      	lsrs	r4, r4, #3
    1908:	4b7d      	ldr	r3, [pc, #500]	; (1b00 <__aeabi_dadd+0x380>)
    190a:	429e      	cmp	r6, r3
    190c:	d030      	beq.n	1970 <__aeabi_dadd+0x1f0>
    190e:	0324      	lsls	r4, r4, #12
    1910:	0576      	lsls	r6, r6, #21
    1912:	0b24      	lsrs	r4, r4, #12
    1914:	0d76      	lsrs	r6, r6, #21
    1916:	e7d4      	b.n	18c2 <__aeabi_dadd+0x142>
    1918:	1a33      	subs	r3, r6, r0
    191a:	469a      	mov	sl, r3
    191c:	2b00      	cmp	r3, #0
    191e:	dd78      	ble.n	1a12 <__aeabi_dadd+0x292>
    1920:	2800      	cmp	r0, #0
    1922:	d031      	beq.n	1988 <__aeabi_dadd+0x208>
    1924:	4876      	ldr	r0, [pc, #472]	; (1b00 <__aeabi_dadd+0x380>)
    1926:	4286      	cmp	r6, r0
    1928:	d0ae      	beq.n	1888 <__aeabi_dadd+0x108>
    192a:	2080      	movs	r0, #128	; 0x80
    192c:	0400      	lsls	r0, r0, #16
    192e:	4301      	orrs	r1, r0
    1930:	4653      	mov	r3, sl
    1932:	2b38      	cmp	r3, #56	; 0x38
    1934:	dc00      	bgt.n	1938 <__aeabi_dadd+0x1b8>
    1936:	e0e9      	b.n	1b0c <__aeabi_dadd+0x38c>
    1938:	430a      	orrs	r2, r1
    193a:	1e51      	subs	r1, r2, #1
    193c:	418a      	sbcs	r2, r1
    193e:	2100      	movs	r1, #0
    1940:	19d2      	adds	r2, r2, r7
    1942:	42ba      	cmp	r2, r7
    1944:	41bf      	sbcs	r7, r7
    1946:	1909      	adds	r1, r1, r4
    1948:	427c      	negs	r4, r7
    194a:	0017      	movs	r7, r2
    194c:	190c      	adds	r4, r1, r4
    194e:	0223      	lsls	r3, r4, #8
    1950:	d5d3      	bpl.n	18fa <__aeabi_dadd+0x17a>
    1952:	4b6b      	ldr	r3, [pc, #428]	; (1b00 <__aeabi_dadd+0x380>)
    1954:	3601      	adds	r6, #1
    1956:	429e      	cmp	r6, r3
    1958:	d100      	bne.n	195c <__aeabi_dadd+0x1dc>
    195a:	e13a      	b.n	1bd2 <__aeabi_dadd+0x452>
    195c:	2001      	movs	r0, #1
    195e:	4b69      	ldr	r3, [pc, #420]	; (1b04 <__aeabi_dadd+0x384>)
    1960:	401c      	ands	r4, r3
    1962:	087b      	lsrs	r3, r7, #1
    1964:	4007      	ands	r7, r0
    1966:	431f      	orrs	r7, r3
    1968:	07e0      	lsls	r0, r4, #31
    196a:	4307      	orrs	r7, r0
    196c:	0864      	lsrs	r4, r4, #1
    196e:	e78b      	b.n	1888 <__aeabi_dadd+0x108>
    1970:	0023      	movs	r3, r4
    1972:	433b      	orrs	r3, r7
    1974:	d100      	bne.n	1978 <__aeabi_dadd+0x1f8>
    1976:	e1cb      	b.n	1d10 <__aeabi_dadd+0x590>
    1978:	2280      	movs	r2, #128	; 0x80
    197a:	0312      	lsls	r2, r2, #12
    197c:	4314      	orrs	r4, r2
    197e:	0324      	lsls	r4, r4, #12
    1980:	0b24      	lsrs	r4, r4, #12
    1982:	e79e      	b.n	18c2 <__aeabi_dadd+0x142>
    1984:	002e      	movs	r6, r5
    1986:	e77f      	b.n	1888 <__aeabi_dadd+0x108>
    1988:	0008      	movs	r0, r1
    198a:	4310      	orrs	r0, r2
    198c:	d100      	bne.n	1990 <__aeabi_dadd+0x210>
    198e:	e0b4      	b.n	1afa <__aeabi_dadd+0x37a>
    1990:	1e58      	subs	r0, r3, #1
    1992:	2800      	cmp	r0, #0
    1994:	d000      	beq.n	1998 <__aeabi_dadd+0x218>
    1996:	e0de      	b.n	1b56 <__aeabi_dadd+0x3d6>
    1998:	18ba      	adds	r2, r7, r2
    199a:	42ba      	cmp	r2, r7
    199c:	419b      	sbcs	r3, r3
    199e:	1864      	adds	r4, r4, r1
    19a0:	425b      	negs	r3, r3
    19a2:	18e4      	adds	r4, r4, r3
    19a4:	0017      	movs	r7, r2
    19a6:	2601      	movs	r6, #1
    19a8:	0223      	lsls	r3, r4, #8
    19aa:	d5a6      	bpl.n	18fa <__aeabi_dadd+0x17a>
    19ac:	2602      	movs	r6, #2
    19ae:	e7d5      	b.n	195c <__aeabi_dadd+0x1dc>
    19b0:	2d00      	cmp	r5, #0
    19b2:	d16e      	bne.n	1a92 <__aeabi_dadd+0x312>
    19b4:	1c70      	adds	r0, r6, #1
    19b6:	0540      	lsls	r0, r0, #21
    19b8:	0d40      	lsrs	r0, r0, #21
    19ba:	2801      	cmp	r0, #1
    19bc:	dc00      	bgt.n	19c0 <__aeabi_dadd+0x240>
    19be:	e0f9      	b.n	1bb4 <__aeabi_dadd+0x434>
    19c0:	1ab8      	subs	r0, r7, r2
    19c2:	4684      	mov	ip, r0
    19c4:	4287      	cmp	r7, r0
    19c6:	4180      	sbcs	r0, r0
    19c8:	1ae5      	subs	r5, r4, r3
    19ca:	4240      	negs	r0, r0
    19cc:	1a2d      	subs	r5, r5, r0
    19ce:	0228      	lsls	r0, r5, #8
    19d0:	d400      	bmi.n	19d4 <__aeabi_dadd+0x254>
    19d2:	e089      	b.n	1ae8 <__aeabi_dadd+0x368>
    19d4:	1bd7      	subs	r7, r2, r7
    19d6:	42ba      	cmp	r2, r7
    19d8:	4192      	sbcs	r2, r2
    19da:	1b1c      	subs	r4, r3, r4
    19dc:	4252      	negs	r2, r2
    19de:	1aa5      	subs	r5, r4, r2
    19e0:	46d8      	mov	r8, fp
    19e2:	e729      	b.n	1838 <__aeabi_dadd+0xb8>
    19e4:	4645      	mov	r5, r8
    19e6:	2400      	movs	r4, #0
    19e8:	2700      	movs	r7, #0
    19ea:	e76a      	b.n	18c2 <__aeabi_dadd+0x142>
    19ec:	4c45      	ldr	r4, [pc, #276]	; (1b04 <__aeabi_dadd+0x384>)
    19ee:	1af6      	subs	r6, r6, r3
    19f0:	402c      	ands	r4, r5
    19f2:	e749      	b.n	1888 <__aeabi_dadd+0x108>
    19f4:	003d      	movs	r5, r7
    19f6:	3828      	subs	r0, #40	; 0x28
    19f8:	4085      	lsls	r5, r0
    19fa:	2700      	movs	r7, #0
    19fc:	e72e      	b.n	185c <__aeabi_dadd+0xdc>
    19fe:	0038      	movs	r0, r7
    1a00:	f001 f818 	bl	2a34 <__clzsi2>
    1a04:	3020      	adds	r0, #32
    1a06:	e71d      	b.n	1844 <__aeabi_dadd+0xc4>
    1a08:	430a      	orrs	r2, r1
    1a0a:	1e51      	subs	r1, r2, #1
    1a0c:	418a      	sbcs	r2, r1
    1a0e:	2100      	movs	r1, #0
    1a10:	e707      	b.n	1822 <__aeabi_dadd+0xa2>
    1a12:	2b00      	cmp	r3, #0
    1a14:	d000      	beq.n	1a18 <__aeabi_dadd+0x298>
    1a16:	e0f3      	b.n	1c00 <__aeabi_dadd+0x480>
    1a18:	1c70      	adds	r0, r6, #1
    1a1a:	0543      	lsls	r3, r0, #21
    1a1c:	0d5b      	lsrs	r3, r3, #21
    1a1e:	2b01      	cmp	r3, #1
    1a20:	dc00      	bgt.n	1a24 <__aeabi_dadd+0x2a4>
    1a22:	e0ad      	b.n	1b80 <__aeabi_dadd+0x400>
    1a24:	4b36      	ldr	r3, [pc, #216]	; (1b00 <__aeabi_dadd+0x380>)
    1a26:	4298      	cmp	r0, r3
    1a28:	d100      	bne.n	1a2c <__aeabi_dadd+0x2ac>
    1a2a:	e0d1      	b.n	1bd0 <__aeabi_dadd+0x450>
    1a2c:	18ba      	adds	r2, r7, r2
    1a2e:	42ba      	cmp	r2, r7
    1a30:	41bf      	sbcs	r7, r7
    1a32:	1864      	adds	r4, r4, r1
    1a34:	427f      	negs	r7, r7
    1a36:	19e4      	adds	r4, r4, r7
    1a38:	07e7      	lsls	r7, r4, #31
    1a3a:	0852      	lsrs	r2, r2, #1
    1a3c:	4317      	orrs	r7, r2
    1a3e:	0864      	lsrs	r4, r4, #1
    1a40:	0006      	movs	r6, r0
    1a42:	e721      	b.n	1888 <__aeabi_dadd+0x108>
    1a44:	482e      	ldr	r0, [pc, #184]	; (1b00 <__aeabi_dadd+0x380>)
    1a46:	4285      	cmp	r5, r0
    1a48:	d100      	bne.n	1a4c <__aeabi_dadd+0x2cc>
    1a4a:	e093      	b.n	1b74 <__aeabi_dadd+0x3f4>
    1a4c:	001d      	movs	r5, r3
    1a4e:	e6d0      	b.n	17f2 <__aeabi_dadd+0x72>
    1a50:	0029      	movs	r1, r5
    1a52:	3e1f      	subs	r6, #31
    1a54:	40f1      	lsrs	r1, r6
    1a56:	2b20      	cmp	r3, #32
    1a58:	d100      	bne.n	1a5c <__aeabi_dadd+0x2dc>
    1a5a:	e08d      	b.n	1b78 <__aeabi_dadd+0x3f8>
    1a5c:	2240      	movs	r2, #64	; 0x40
    1a5e:	1ad3      	subs	r3, r2, r3
    1a60:	409d      	lsls	r5, r3
    1a62:	432f      	orrs	r7, r5
    1a64:	1e7d      	subs	r5, r7, #1
    1a66:	41af      	sbcs	r7, r5
    1a68:	2400      	movs	r4, #0
    1a6a:	430f      	orrs	r7, r1
    1a6c:	2600      	movs	r6, #0
    1a6e:	e744      	b.n	18fa <__aeabi_dadd+0x17a>
    1a70:	002b      	movs	r3, r5
    1a72:	0008      	movs	r0, r1
    1a74:	3b20      	subs	r3, #32
    1a76:	40d8      	lsrs	r0, r3
    1a78:	0003      	movs	r3, r0
    1a7a:	2d20      	cmp	r5, #32
    1a7c:	d100      	bne.n	1a80 <__aeabi_dadd+0x300>
    1a7e:	e07d      	b.n	1b7c <__aeabi_dadd+0x3fc>
    1a80:	2040      	movs	r0, #64	; 0x40
    1a82:	1b45      	subs	r5, r0, r5
    1a84:	40a9      	lsls	r1, r5
    1a86:	430a      	orrs	r2, r1
    1a88:	1e51      	subs	r1, r2, #1
    1a8a:	418a      	sbcs	r2, r1
    1a8c:	2100      	movs	r1, #0
    1a8e:	431a      	orrs	r2, r3
    1a90:	e6c7      	b.n	1822 <__aeabi_dadd+0xa2>
    1a92:	2e00      	cmp	r6, #0
    1a94:	d050      	beq.n	1b38 <__aeabi_dadd+0x3b8>
    1a96:	4e1a      	ldr	r6, [pc, #104]	; (1b00 <__aeabi_dadd+0x380>)
    1a98:	42b0      	cmp	r0, r6
    1a9a:	d057      	beq.n	1b4c <__aeabi_dadd+0x3cc>
    1a9c:	2680      	movs	r6, #128	; 0x80
    1a9e:	426b      	negs	r3, r5
    1aa0:	4699      	mov	r9, r3
    1aa2:	0436      	lsls	r6, r6, #16
    1aa4:	4334      	orrs	r4, r6
    1aa6:	464b      	mov	r3, r9
    1aa8:	2b38      	cmp	r3, #56	; 0x38
    1aaa:	dd00      	ble.n	1aae <__aeabi_dadd+0x32e>
    1aac:	e0d6      	b.n	1c5c <__aeabi_dadd+0x4dc>
    1aae:	2b1f      	cmp	r3, #31
    1ab0:	dd00      	ble.n	1ab4 <__aeabi_dadd+0x334>
    1ab2:	e135      	b.n	1d20 <__aeabi_dadd+0x5a0>
    1ab4:	2620      	movs	r6, #32
    1ab6:	1af5      	subs	r5, r6, r3
    1ab8:	0026      	movs	r6, r4
    1aba:	40ae      	lsls	r6, r5
    1abc:	46b2      	mov	sl, r6
    1abe:	003e      	movs	r6, r7
    1ac0:	40de      	lsrs	r6, r3
    1ac2:	46ac      	mov	ip, r5
    1ac4:	0035      	movs	r5, r6
    1ac6:	4656      	mov	r6, sl
    1ac8:	432e      	orrs	r6, r5
    1aca:	4665      	mov	r5, ip
    1acc:	40af      	lsls	r7, r5
    1ace:	1e7d      	subs	r5, r7, #1
    1ad0:	41af      	sbcs	r7, r5
    1ad2:	40dc      	lsrs	r4, r3
    1ad4:	4337      	orrs	r7, r6
    1ad6:	1bd7      	subs	r7, r2, r7
    1ad8:	42ba      	cmp	r2, r7
    1ada:	4192      	sbcs	r2, r2
    1adc:	1b0c      	subs	r4, r1, r4
    1ade:	4252      	negs	r2, r2
    1ae0:	1aa4      	subs	r4, r4, r2
    1ae2:	0006      	movs	r6, r0
    1ae4:	46d8      	mov	r8, fp
    1ae6:	e6a3      	b.n	1830 <__aeabi_dadd+0xb0>
    1ae8:	4664      	mov	r4, ip
    1aea:	4667      	mov	r7, ip
    1aec:	432c      	orrs	r4, r5
    1aee:	d000      	beq.n	1af2 <__aeabi_dadd+0x372>
    1af0:	e6a2      	b.n	1838 <__aeabi_dadd+0xb8>
    1af2:	2500      	movs	r5, #0
    1af4:	2600      	movs	r6, #0
    1af6:	2700      	movs	r7, #0
    1af8:	e706      	b.n	1908 <__aeabi_dadd+0x188>
    1afa:	001e      	movs	r6, r3
    1afc:	e6c4      	b.n	1888 <__aeabi_dadd+0x108>
    1afe:	46c0      	nop			; (mov r8, r8)
    1b00:	000007ff 	.word	0x000007ff
    1b04:	ff7fffff 	.word	0xff7fffff
    1b08:	800fffff 	.word	0x800fffff
    1b0c:	2b1f      	cmp	r3, #31
    1b0e:	dc63      	bgt.n	1bd8 <__aeabi_dadd+0x458>
    1b10:	2020      	movs	r0, #32
    1b12:	1ac3      	subs	r3, r0, r3
    1b14:	0008      	movs	r0, r1
    1b16:	4098      	lsls	r0, r3
    1b18:	469c      	mov	ip, r3
    1b1a:	4683      	mov	fp, r0
    1b1c:	4653      	mov	r3, sl
    1b1e:	0010      	movs	r0, r2
    1b20:	40d8      	lsrs	r0, r3
    1b22:	0003      	movs	r3, r0
    1b24:	4658      	mov	r0, fp
    1b26:	4318      	orrs	r0, r3
    1b28:	4663      	mov	r3, ip
    1b2a:	409a      	lsls	r2, r3
    1b2c:	1e53      	subs	r3, r2, #1
    1b2e:	419a      	sbcs	r2, r3
    1b30:	4653      	mov	r3, sl
    1b32:	4302      	orrs	r2, r0
    1b34:	40d9      	lsrs	r1, r3
    1b36:	e703      	b.n	1940 <__aeabi_dadd+0x1c0>
    1b38:	0026      	movs	r6, r4
    1b3a:	433e      	orrs	r6, r7
    1b3c:	d006      	beq.n	1b4c <__aeabi_dadd+0x3cc>
    1b3e:	43eb      	mvns	r3, r5
    1b40:	4699      	mov	r9, r3
    1b42:	2b00      	cmp	r3, #0
    1b44:	d0c7      	beq.n	1ad6 <__aeabi_dadd+0x356>
    1b46:	4e94      	ldr	r6, [pc, #592]	; (1d98 <__aeabi_dadd+0x618>)
    1b48:	42b0      	cmp	r0, r6
    1b4a:	d1ac      	bne.n	1aa6 <__aeabi_dadd+0x326>
    1b4c:	000c      	movs	r4, r1
    1b4e:	0017      	movs	r7, r2
    1b50:	0006      	movs	r6, r0
    1b52:	46d8      	mov	r8, fp
    1b54:	e698      	b.n	1888 <__aeabi_dadd+0x108>
    1b56:	4b90      	ldr	r3, [pc, #576]	; (1d98 <__aeabi_dadd+0x618>)
    1b58:	459a      	cmp	sl, r3
    1b5a:	d00b      	beq.n	1b74 <__aeabi_dadd+0x3f4>
    1b5c:	4682      	mov	sl, r0
    1b5e:	e6e7      	b.n	1930 <__aeabi_dadd+0x1b0>
    1b60:	2800      	cmp	r0, #0
    1b62:	d000      	beq.n	1b66 <__aeabi_dadd+0x3e6>
    1b64:	e09e      	b.n	1ca4 <__aeabi_dadd+0x524>
    1b66:	0018      	movs	r0, r3
    1b68:	4310      	orrs	r0, r2
    1b6a:	d100      	bne.n	1b6e <__aeabi_dadd+0x3ee>
    1b6c:	e0e9      	b.n	1d42 <__aeabi_dadd+0x5c2>
    1b6e:	001c      	movs	r4, r3
    1b70:	0017      	movs	r7, r2
    1b72:	46d8      	mov	r8, fp
    1b74:	4e88      	ldr	r6, [pc, #544]	; (1d98 <__aeabi_dadd+0x618>)
    1b76:	e687      	b.n	1888 <__aeabi_dadd+0x108>
    1b78:	2500      	movs	r5, #0
    1b7a:	e772      	b.n	1a62 <__aeabi_dadd+0x2e2>
    1b7c:	2100      	movs	r1, #0
    1b7e:	e782      	b.n	1a86 <__aeabi_dadd+0x306>
    1b80:	0023      	movs	r3, r4
    1b82:	433b      	orrs	r3, r7
    1b84:	2e00      	cmp	r6, #0
    1b86:	d000      	beq.n	1b8a <__aeabi_dadd+0x40a>
    1b88:	e0ab      	b.n	1ce2 <__aeabi_dadd+0x562>
    1b8a:	2b00      	cmp	r3, #0
    1b8c:	d100      	bne.n	1b90 <__aeabi_dadd+0x410>
    1b8e:	e0e7      	b.n	1d60 <__aeabi_dadd+0x5e0>
    1b90:	000b      	movs	r3, r1
    1b92:	4313      	orrs	r3, r2
    1b94:	d100      	bne.n	1b98 <__aeabi_dadd+0x418>
    1b96:	e677      	b.n	1888 <__aeabi_dadd+0x108>
    1b98:	18ba      	adds	r2, r7, r2
    1b9a:	42ba      	cmp	r2, r7
    1b9c:	41bf      	sbcs	r7, r7
    1b9e:	1864      	adds	r4, r4, r1
    1ba0:	427f      	negs	r7, r7
    1ba2:	19e4      	adds	r4, r4, r7
    1ba4:	0223      	lsls	r3, r4, #8
    1ba6:	d400      	bmi.n	1baa <__aeabi_dadd+0x42a>
    1ba8:	e0f2      	b.n	1d90 <__aeabi_dadd+0x610>
    1baa:	4b7c      	ldr	r3, [pc, #496]	; (1d9c <__aeabi_dadd+0x61c>)
    1bac:	0017      	movs	r7, r2
    1bae:	401c      	ands	r4, r3
    1bb0:	0006      	movs	r6, r0
    1bb2:	e669      	b.n	1888 <__aeabi_dadd+0x108>
    1bb4:	0020      	movs	r0, r4
    1bb6:	4338      	orrs	r0, r7
    1bb8:	2e00      	cmp	r6, #0
    1bba:	d1d1      	bne.n	1b60 <__aeabi_dadd+0x3e0>
    1bbc:	2800      	cmp	r0, #0
    1bbe:	d15b      	bne.n	1c78 <__aeabi_dadd+0x4f8>
    1bc0:	001c      	movs	r4, r3
    1bc2:	4314      	orrs	r4, r2
    1bc4:	d100      	bne.n	1bc8 <__aeabi_dadd+0x448>
    1bc6:	e0a8      	b.n	1d1a <__aeabi_dadd+0x59a>
    1bc8:	001c      	movs	r4, r3
    1bca:	0017      	movs	r7, r2
    1bcc:	46d8      	mov	r8, fp
    1bce:	e65b      	b.n	1888 <__aeabi_dadd+0x108>
    1bd0:	0006      	movs	r6, r0
    1bd2:	2400      	movs	r4, #0
    1bd4:	2700      	movs	r7, #0
    1bd6:	e697      	b.n	1908 <__aeabi_dadd+0x188>
    1bd8:	4650      	mov	r0, sl
    1bda:	000b      	movs	r3, r1
    1bdc:	3820      	subs	r0, #32
    1bde:	40c3      	lsrs	r3, r0
    1be0:	4699      	mov	r9, r3
    1be2:	4653      	mov	r3, sl
    1be4:	2b20      	cmp	r3, #32
    1be6:	d100      	bne.n	1bea <__aeabi_dadd+0x46a>
    1be8:	e095      	b.n	1d16 <__aeabi_dadd+0x596>
    1bea:	2340      	movs	r3, #64	; 0x40
    1bec:	4650      	mov	r0, sl
    1bee:	1a1b      	subs	r3, r3, r0
    1bf0:	4099      	lsls	r1, r3
    1bf2:	430a      	orrs	r2, r1
    1bf4:	1e51      	subs	r1, r2, #1
    1bf6:	418a      	sbcs	r2, r1
    1bf8:	464b      	mov	r3, r9
    1bfa:	2100      	movs	r1, #0
    1bfc:	431a      	orrs	r2, r3
    1bfe:	e69f      	b.n	1940 <__aeabi_dadd+0x1c0>
    1c00:	2e00      	cmp	r6, #0
    1c02:	d130      	bne.n	1c66 <__aeabi_dadd+0x4e6>
    1c04:	0026      	movs	r6, r4
    1c06:	433e      	orrs	r6, r7
    1c08:	d067      	beq.n	1cda <__aeabi_dadd+0x55a>
    1c0a:	43db      	mvns	r3, r3
    1c0c:	469a      	mov	sl, r3
    1c0e:	2b00      	cmp	r3, #0
    1c10:	d01c      	beq.n	1c4c <__aeabi_dadd+0x4cc>
    1c12:	4e61      	ldr	r6, [pc, #388]	; (1d98 <__aeabi_dadd+0x618>)
    1c14:	42b0      	cmp	r0, r6
    1c16:	d060      	beq.n	1cda <__aeabi_dadd+0x55a>
    1c18:	4653      	mov	r3, sl
    1c1a:	2b38      	cmp	r3, #56	; 0x38
    1c1c:	dd00      	ble.n	1c20 <__aeabi_dadd+0x4a0>
    1c1e:	e096      	b.n	1d4e <__aeabi_dadd+0x5ce>
    1c20:	2b1f      	cmp	r3, #31
    1c22:	dd00      	ble.n	1c26 <__aeabi_dadd+0x4a6>
    1c24:	e09f      	b.n	1d66 <__aeabi_dadd+0x5e6>
    1c26:	2620      	movs	r6, #32
    1c28:	1af3      	subs	r3, r6, r3
    1c2a:	0026      	movs	r6, r4
    1c2c:	409e      	lsls	r6, r3
    1c2e:	469c      	mov	ip, r3
    1c30:	46b3      	mov	fp, r6
    1c32:	4653      	mov	r3, sl
    1c34:	003e      	movs	r6, r7
    1c36:	40de      	lsrs	r6, r3
    1c38:	0033      	movs	r3, r6
    1c3a:	465e      	mov	r6, fp
    1c3c:	431e      	orrs	r6, r3
    1c3e:	4663      	mov	r3, ip
    1c40:	409f      	lsls	r7, r3
    1c42:	1e7b      	subs	r3, r7, #1
    1c44:	419f      	sbcs	r7, r3
    1c46:	4653      	mov	r3, sl
    1c48:	40dc      	lsrs	r4, r3
    1c4a:	4337      	orrs	r7, r6
    1c4c:	18bf      	adds	r7, r7, r2
    1c4e:	4297      	cmp	r7, r2
    1c50:	4192      	sbcs	r2, r2
    1c52:	1864      	adds	r4, r4, r1
    1c54:	4252      	negs	r2, r2
    1c56:	18a4      	adds	r4, r4, r2
    1c58:	0006      	movs	r6, r0
    1c5a:	e678      	b.n	194e <__aeabi_dadd+0x1ce>
    1c5c:	4327      	orrs	r7, r4
    1c5e:	1e7c      	subs	r4, r7, #1
    1c60:	41a7      	sbcs	r7, r4
    1c62:	2400      	movs	r4, #0
    1c64:	e737      	b.n	1ad6 <__aeabi_dadd+0x356>
    1c66:	4e4c      	ldr	r6, [pc, #304]	; (1d98 <__aeabi_dadd+0x618>)
    1c68:	42b0      	cmp	r0, r6
    1c6a:	d036      	beq.n	1cda <__aeabi_dadd+0x55a>
    1c6c:	2680      	movs	r6, #128	; 0x80
    1c6e:	425b      	negs	r3, r3
    1c70:	0436      	lsls	r6, r6, #16
    1c72:	469a      	mov	sl, r3
    1c74:	4334      	orrs	r4, r6
    1c76:	e7cf      	b.n	1c18 <__aeabi_dadd+0x498>
    1c78:	0018      	movs	r0, r3
    1c7a:	4310      	orrs	r0, r2
    1c7c:	d100      	bne.n	1c80 <__aeabi_dadd+0x500>
    1c7e:	e603      	b.n	1888 <__aeabi_dadd+0x108>
    1c80:	1ab8      	subs	r0, r7, r2
    1c82:	4684      	mov	ip, r0
    1c84:	4567      	cmp	r7, ip
    1c86:	41ad      	sbcs	r5, r5
    1c88:	1ae0      	subs	r0, r4, r3
    1c8a:	426d      	negs	r5, r5
    1c8c:	1b40      	subs	r0, r0, r5
    1c8e:	0205      	lsls	r5, r0, #8
    1c90:	d400      	bmi.n	1c94 <__aeabi_dadd+0x514>
    1c92:	e62c      	b.n	18ee <__aeabi_dadd+0x16e>
    1c94:	1bd7      	subs	r7, r2, r7
    1c96:	42ba      	cmp	r2, r7
    1c98:	4192      	sbcs	r2, r2
    1c9a:	1b1c      	subs	r4, r3, r4
    1c9c:	4252      	negs	r2, r2
    1c9e:	1aa4      	subs	r4, r4, r2
    1ca0:	46d8      	mov	r8, fp
    1ca2:	e5f1      	b.n	1888 <__aeabi_dadd+0x108>
    1ca4:	0018      	movs	r0, r3
    1ca6:	4310      	orrs	r0, r2
    1ca8:	d100      	bne.n	1cac <__aeabi_dadd+0x52c>
    1caa:	e763      	b.n	1b74 <__aeabi_dadd+0x3f4>
    1cac:	08f8      	lsrs	r0, r7, #3
    1cae:	0767      	lsls	r7, r4, #29
    1cb0:	4307      	orrs	r7, r0
    1cb2:	2080      	movs	r0, #128	; 0x80
    1cb4:	08e4      	lsrs	r4, r4, #3
    1cb6:	0300      	lsls	r0, r0, #12
    1cb8:	4204      	tst	r4, r0
    1cba:	d008      	beq.n	1cce <__aeabi_dadd+0x54e>
    1cbc:	08dd      	lsrs	r5, r3, #3
    1cbe:	4205      	tst	r5, r0
    1cc0:	d105      	bne.n	1cce <__aeabi_dadd+0x54e>
    1cc2:	08d2      	lsrs	r2, r2, #3
    1cc4:	0759      	lsls	r1, r3, #29
    1cc6:	4311      	orrs	r1, r2
    1cc8:	000f      	movs	r7, r1
    1cca:	002c      	movs	r4, r5
    1ccc:	46d8      	mov	r8, fp
    1cce:	0f7b      	lsrs	r3, r7, #29
    1cd0:	00e4      	lsls	r4, r4, #3
    1cd2:	431c      	orrs	r4, r3
    1cd4:	00ff      	lsls	r7, r7, #3
    1cd6:	4e30      	ldr	r6, [pc, #192]	; (1d98 <__aeabi_dadd+0x618>)
    1cd8:	e5d6      	b.n	1888 <__aeabi_dadd+0x108>
    1cda:	000c      	movs	r4, r1
    1cdc:	0017      	movs	r7, r2
    1cde:	0006      	movs	r6, r0
    1ce0:	e5d2      	b.n	1888 <__aeabi_dadd+0x108>
    1ce2:	2b00      	cmp	r3, #0
    1ce4:	d038      	beq.n	1d58 <__aeabi_dadd+0x5d8>
    1ce6:	000b      	movs	r3, r1
    1ce8:	4313      	orrs	r3, r2
    1cea:	d100      	bne.n	1cee <__aeabi_dadd+0x56e>
    1cec:	e742      	b.n	1b74 <__aeabi_dadd+0x3f4>
    1cee:	08f8      	lsrs	r0, r7, #3
    1cf0:	0767      	lsls	r7, r4, #29
    1cf2:	4307      	orrs	r7, r0
    1cf4:	2080      	movs	r0, #128	; 0x80
    1cf6:	08e4      	lsrs	r4, r4, #3
    1cf8:	0300      	lsls	r0, r0, #12
    1cfa:	4204      	tst	r4, r0
    1cfc:	d0e7      	beq.n	1cce <__aeabi_dadd+0x54e>
    1cfe:	08cb      	lsrs	r3, r1, #3
    1d00:	4203      	tst	r3, r0
    1d02:	d1e4      	bne.n	1cce <__aeabi_dadd+0x54e>
    1d04:	08d2      	lsrs	r2, r2, #3
    1d06:	0749      	lsls	r1, r1, #29
    1d08:	4311      	orrs	r1, r2
    1d0a:	000f      	movs	r7, r1
    1d0c:	001c      	movs	r4, r3
    1d0e:	e7de      	b.n	1cce <__aeabi_dadd+0x54e>
    1d10:	2700      	movs	r7, #0
    1d12:	2400      	movs	r4, #0
    1d14:	e5d5      	b.n	18c2 <__aeabi_dadd+0x142>
    1d16:	2100      	movs	r1, #0
    1d18:	e76b      	b.n	1bf2 <__aeabi_dadd+0x472>
    1d1a:	2500      	movs	r5, #0
    1d1c:	2700      	movs	r7, #0
    1d1e:	e5f3      	b.n	1908 <__aeabi_dadd+0x188>
    1d20:	464e      	mov	r6, r9
    1d22:	0025      	movs	r5, r4
    1d24:	3e20      	subs	r6, #32
    1d26:	40f5      	lsrs	r5, r6
    1d28:	464b      	mov	r3, r9
    1d2a:	002e      	movs	r6, r5
    1d2c:	2b20      	cmp	r3, #32
    1d2e:	d02d      	beq.n	1d8c <__aeabi_dadd+0x60c>
    1d30:	2540      	movs	r5, #64	; 0x40
    1d32:	1aed      	subs	r5, r5, r3
    1d34:	40ac      	lsls	r4, r5
    1d36:	4327      	orrs	r7, r4
    1d38:	1e7c      	subs	r4, r7, #1
    1d3a:	41a7      	sbcs	r7, r4
    1d3c:	2400      	movs	r4, #0
    1d3e:	4337      	orrs	r7, r6
    1d40:	e6c9      	b.n	1ad6 <__aeabi_dadd+0x356>
    1d42:	2480      	movs	r4, #128	; 0x80
    1d44:	2500      	movs	r5, #0
    1d46:	0324      	lsls	r4, r4, #12
    1d48:	4e13      	ldr	r6, [pc, #76]	; (1d98 <__aeabi_dadd+0x618>)
    1d4a:	2700      	movs	r7, #0
    1d4c:	e5dc      	b.n	1908 <__aeabi_dadd+0x188>
    1d4e:	4327      	orrs	r7, r4
    1d50:	1e7c      	subs	r4, r7, #1
    1d52:	41a7      	sbcs	r7, r4
    1d54:	2400      	movs	r4, #0
    1d56:	e779      	b.n	1c4c <__aeabi_dadd+0x4cc>
    1d58:	000c      	movs	r4, r1
    1d5a:	0017      	movs	r7, r2
    1d5c:	4e0e      	ldr	r6, [pc, #56]	; (1d98 <__aeabi_dadd+0x618>)
    1d5e:	e593      	b.n	1888 <__aeabi_dadd+0x108>
    1d60:	000c      	movs	r4, r1
    1d62:	0017      	movs	r7, r2
    1d64:	e590      	b.n	1888 <__aeabi_dadd+0x108>
    1d66:	4656      	mov	r6, sl
    1d68:	0023      	movs	r3, r4
    1d6a:	3e20      	subs	r6, #32
    1d6c:	40f3      	lsrs	r3, r6
    1d6e:	4699      	mov	r9, r3
    1d70:	4653      	mov	r3, sl
    1d72:	2b20      	cmp	r3, #32
    1d74:	d00e      	beq.n	1d94 <__aeabi_dadd+0x614>
    1d76:	2340      	movs	r3, #64	; 0x40
    1d78:	4656      	mov	r6, sl
    1d7a:	1b9b      	subs	r3, r3, r6
    1d7c:	409c      	lsls	r4, r3
    1d7e:	4327      	orrs	r7, r4
    1d80:	1e7c      	subs	r4, r7, #1
    1d82:	41a7      	sbcs	r7, r4
    1d84:	464b      	mov	r3, r9
    1d86:	2400      	movs	r4, #0
    1d88:	431f      	orrs	r7, r3
    1d8a:	e75f      	b.n	1c4c <__aeabi_dadd+0x4cc>
    1d8c:	2400      	movs	r4, #0
    1d8e:	e7d2      	b.n	1d36 <__aeabi_dadd+0x5b6>
    1d90:	0017      	movs	r7, r2
    1d92:	e5b2      	b.n	18fa <__aeabi_dadd+0x17a>
    1d94:	2400      	movs	r4, #0
    1d96:	e7f2      	b.n	1d7e <__aeabi_dadd+0x5fe>
    1d98:	000007ff 	.word	0x000007ff
    1d9c:	ff7fffff 	.word	0xff7fffff

00001da0 <__aeabi_dmul>:
    1da0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1da2:	4657      	mov	r7, sl
    1da4:	4645      	mov	r5, r8
    1da6:	46de      	mov	lr, fp
    1da8:	464e      	mov	r6, r9
    1daa:	b5e0      	push	{r5, r6, r7, lr}
    1dac:	030c      	lsls	r4, r1, #12
    1dae:	4698      	mov	r8, r3
    1db0:	004e      	lsls	r6, r1, #1
    1db2:	0b23      	lsrs	r3, r4, #12
    1db4:	b087      	sub	sp, #28
    1db6:	0007      	movs	r7, r0
    1db8:	4692      	mov	sl, r2
    1dba:	469b      	mov	fp, r3
    1dbc:	0d76      	lsrs	r6, r6, #21
    1dbe:	0fcd      	lsrs	r5, r1, #31
    1dc0:	2e00      	cmp	r6, #0
    1dc2:	d06b      	beq.n	1e9c <__aeabi_dmul+0xfc>
    1dc4:	4b6d      	ldr	r3, [pc, #436]	; (1f7c <__aeabi_dmul+0x1dc>)
    1dc6:	429e      	cmp	r6, r3
    1dc8:	d035      	beq.n	1e36 <__aeabi_dmul+0x96>
    1dca:	2480      	movs	r4, #128	; 0x80
    1dcc:	465b      	mov	r3, fp
    1dce:	0f42      	lsrs	r2, r0, #29
    1dd0:	0424      	lsls	r4, r4, #16
    1dd2:	00db      	lsls	r3, r3, #3
    1dd4:	4314      	orrs	r4, r2
    1dd6:	431c      	orrs	r4, r3
    1dd8:	00c3      	lsls	r3, r0, #3
    1dda:	4699      	mov	r9, r3
    1ddc:	4b68      	ldr	r3, [pc, #416]	; (1f80 <__aeabi_dmul+0x1e0>)
    1dde:	46a3      	mov	fp, r4
    1de0:	469c      	mov	ip, r3
    1de2:	2300      	movs	r3, #0
    1de4:	2700      	movs	r7, #0
    1de6:	4466      	add	r6, ip
    1de8:	9302      	str	r3, [sp, #8]
    1dea:	4643      	mov	r3, r8
    1dec:	031c      	lsls	r4, r3, #12
    1dee:	005a      	lsls	r2, r3, #1
    1df0:	0fdb      	lsrs	r3, r3, #31
    1df2:	4650      	mov	r0, sl
    1df4:	0b24      	lsrs	r4, r4, #12
    1df6:	0d52      	lsrs	r2, r2, #21
    1df8:	4698      	mov	r8, r3
    1dfa:	d100      	bne.n	1dfe <__aeabi_dmul+0x5e>
    1dfc:	e076      	b.n	1eec <__aeabi_dmul+0x14c>
    1dfe:	4b5f      	ldr	r3, [pc, #380]	; (1f7c <__aeabi_dmul+0x1dc>)
    1e00:	429a      	cmp	r2, r3
    1e02:	d06d      	beq.n	1ee0 <__aeabi_dmul+0x140>
    1e04:	2380      	movs	r3, #128	; 0x80
    1e06:	0f41      	lsrs	r1, r0, #29
    1e08:	041b      	lsls	r3, r3, #16
    1e0a:	430b      	orrs	r3, r1
    1e0c:	495c      	ldr	r1, [pc, #368]	; (1f80 <__aeabi_dmul+0x1e0>)
    1e0e:	00e4      	lsls	r4, r4, #3
    1e10:	468c      	mov	ip, r1
    1e12:	431c      	orrs	r4, r3
    1e14:	00c3      	lsls	r3, r0, #3
    1e16:	2000      	movs	r0, #0
    1e18:	4462      	add	r2, ip
    1e1a:	4641      	mov	r1, r8
    1e1c:	18b6      	adds	r6, r6, r2
    1e1e:	4069      	eors	r1, r5
    1e20:	1c72      	adds	r2, r6, #1
    1e22:	9101      	str	r1, [sp, #4]
    1e24:	4694      	mov	ip, r2
    1e26:	4307      	orrs	r7, r0
    1e28:	2f0f      	cmp	r7, #15
    1e2a:	d900      	bls.n	1e2e <__aeabi_dmul+0x8e>
    1e2c:	e0b0      	b.n	1f90 <__aeabi_dmul+0x1f0>
    1e2e:	4a55      	ldr	r2, [pc, #340]	; (1f84 <__aeabi_dmul+0x1e4>)
    1e30:	00bf      	lsls	r7, r7, #2
    1e32:	59d2      	ldr	r2, [r2, r7]
    1e34:	4697      	mov	pc, r2
    1e36:	465b      	mov	r3, fp
    1e38:	4303      	orrs	r3, r0
    1e3a:	4699      	mov	r9, r3
    1e3c:	d000      	beq.n	1e40 <__aeabi_dmul+0xa0>
    1e3e:	e087      	b.n	1f50 <__aeabi_dmul+0x1b0>
    1e40:	2300      	movs	r3, #0
    1e42:	469b      	mov	fp, r3
    1e44:	3302      	adds	r3, #2
    1e46:	2708      	movs	r7, #8
    1e48:	9302      	str	r3, [sp, #8]
    1e4a:	e7ce      	b.n	1dea <__aeabi_dmul+0x4a>
    1e4c:	4642      	mov	r2, r8
    1e4e:	9201      	str	r2, [sp, #4]
    1e50:	2802      	cmp	r0, #2
    1e52:	d067      	beq.n	1f24 <__aeabi_dmul+0x184>
    1e54:	2803      	cmp	r0, #3
    1e56:	d100      	bne.n	1e5a <__aeabi_dmul+0xba>
    1e58:	e20e      	b.n	2278 <__aeabi_dmul+0x4d8>
    1e5a:	2801      	cmp	r0, #1
    1e5c:	d000      	beq.n	1e60 <__aeabi_dmul+0xc0>
    1e5e:	e162      	b.n	2126 <__aeabi_dmul+0x386>
    1e60:	2300      	movs	r3, #0
    1e62:	2400      	movs	r4, #0
    1e64:	2200      	movs	r2, #0
    1e66:	4699      	mov	r9, r3
    1e68:	9901      	ldr	r1, [sp, #4]
    1e6a:	4001      	ands	r1, r0
    1e6c:	b2cd      	uxtb	r5, r1
    1e6e:	2100      	movs	r1, #0
    1e70:	0312      	lsls	r2, r2, #12
    1e72:	0d0b      	lsrs	r3, r1, #20
    1e74:	0b12      	lsrs	r2, r2, #12
    1e76:	051b      	lsls	r3, r3, #20
    1e78:	4313      	orrs	r3, r2
    1e7a:	4a43      	ldr	r2, [pc, #268]	; (1f88 <__aeabi_dmul+0x1e8>)
    1e7c:	0524      	lsls	r4, r4, #20
    1e7e:	4013      	ands	r3, r2
    1e80:	431c      	orrs	r4, r3
    1e82:	0064      	lsls	r4, r4, #1
    1e84:	07ed      	lsls	r5, r5, #31
    1e86:	0864      	lsrs	r4, r4, #1
    1e88:	432c      	orrs	r4, r5
    1e8a:	4648      	mov	r0, r9
    1e8c:	0021      	movs	r1, r4
    1e8e:	b007      	add	sp, #28
    1e90:	bc3c      	pop	{r2, r3, r4, r5}
    1e92:	4690      	mov	r8, r2
    1e94:	4699      	mov	r9, r3
    1e96:	46a2      	mov	sl, r4
    1e98:	46ab      	mov	fp, r5
    1e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e9c:	4303      	orrs	r3, r0
    1e9e:	4699      	mov	r9, r3
    1ea0:	d04f      	beq.n	1f42 <__aeabi_dmul+0x1a2>
    1ea2:	465b      	mov	r3, fp
    1ea4:	2b00      	cmp	r3, #0
    1ea6:	d100      	bne.n	1eaa <__aeabi_dmul+0x10a>
    1ea8:	e189      	b.n	21be <__aeabi_dmul+0x41e>
    1eaa:	4658      	mov	r0, fp
    1eac:	f000 fdc2 	bl	2a34 <__clzsi2>
    1eb0:	0003      	movs	r3, r0
    1eb2:	3b0b      	subs	r3, #11
    1eb4:	2b1c      	cmp	r3, #28
    1eb6:	dd00      	ble.n	1eba <__aeabi_dmul+0x11a>
    1eb8:	e17a      	b.n	21b0 <__aeabi_dmul+0x410>
    1eba:	221d      	movs	r2, #29
    1ebc:	1ad3      	subs	r3, r2, r3
    1ebe:	003a      	movs	r2, r7
    1ec0:	0001      	movs	r1, r0
    1ec2:	465c      	mov	r4, fp
    1ec4:	40da      	lsrs	r2, r3
    1ec6:	3908      	subs	r1, #8
    1ec8:	408c      	lsls	r4, r1
    1eca:	0013      	movs	r3, r2
    1ecc:	408f      	lsls	r7, r1
    1ece:	4323      	orrs	r3, r4
    1ed0:	469b      	mov	fp, r3
    1ed2:	46b9      	mov	r9, r7
    1ed4:	2300      	movs	r3, #0
    1ed6:	4e2d      	ldr	r6, [pc, #180]	; (1f8c <__aeabi_dmul+0x1ec>)
    1ed8:	2700      	movs	r7, #0
    1eda:	1a36      	subs	r6, r6, r0
    1edc:	9302      	str	r3, [sp, #8]
    1ede:	e784      	b.n	1dea <__aeabi_dmul+0x4a>
    1ee0:	4653      	mov	r3, sl
    1ee2:	4323      	orrs	r3, r4
    1ee4:	d12a      	bne.n	1f3c <__aeabi_dmul+0x19c>
    1ee6:	2400      	movs	r4, #0
    1ee8:	2002      	movs	r0, #2
    1eea:	e796      	b.n	1e1a <__aeabi_dmul+0x7a>
    1eec:	4653      	mov	r3, sl
    1eee:	4323      	orrs	r3, r4
    1ef0:	d020      	beq.n	1f34 <__aeabi_dmul+0x194>
    1ef2:	2c00      	cmp	r4, #0
    1ef4:	d100      	bne.n	1ef8 <__aeabi_dmul+0x158>
    1ef6:	e157      	b.n	21a8 <__aeabi_dmul+0x408>
    1ef8:	0020      	movs	r0, r4
    1efa:	f000 fd9b 	bl	2a34 <__clzsi2>
    1efe:	0003      	movs	r3, r0
    1f00:	3b0b      	subs	r3, #11
    1f02:	2b1c      	cmp	r3, #28
    1f04:	dd00      	ble.n	1f08 <__aeabi_dmul+0x168>
    1f06:	e149      	b.n	219c <__aeabi_dmul+0x3fc>
    1f08:	211d      	movs	r1, #29
    1f0a:	1acb      	subs	r3, r1, r3
    1f0c:	4651      	mov	r1, sl
    1f0e:	0002      	movs	r2, r0
    1f10:	40d9      	lsrs	r1, r3
    1f12:	4653      	mov	r3, sl
    1f14:	3a08      	subs	r2, #8
    1f16:	4094      	lsls	r4, r2
    1f18:	4093      	lsls	r3, r2
    1f1a:	430c      	orrs	r4, r1
    1f1c:	4a1b      	ldr	r2, [pc, #108]	; (1f8c <__aeabi_dmul+0x1ec>)
    1f1e:	1a12      	subs	r2, r2, r0
    1f20:	2000      	movs	r0, #0
    1f22:	e77a      	b.n	1e1a <__aeabi_dmul+0x7a>
    1f24:	2501      	movs	r5, #1
    1f26:	9b01      	ldr	r3, [sp, #4]
    1f28:	4c14      	ldr	r4, [pc, #80]	; (1f7c <__aeabi_dmul+0x1dc>)
    1f2a:	401d      	ands	r5, r3
    1f2c:	2300      	movs	r3, #0
    1f2e:	2200      	movs	r2, #0
    1f30:	4699      	mov	r9, r3
    1f32:	e79c      	b.n	1e6e <__aeabi_dmul+0xce>
    1f34:	2400      	movs	r4, #0
    1f36:	2200      	movs	r2, #0
    1f38:	2001      	movs	r0, #1
    1f3a:	e76e      	b.n	1e1a <__aeabi_dmul+0x7a>
    1f3c:	4653      	mov	r3, sl
    1f3e:	2003      	movs	r0, #3
    1f40:	e76b      	b.n	1e1a <__aeabi_dmul+0x7a>
    1f42:	2300      	movs	r3, #0
    1f44:	469b      	mov	fp, r3
    1f46:	3301      	adds	r3, #1
    1f48:	2704      	movs	r7, #4
    1f4a:	2600      	movs	r6, #0
    1f4c:	9302      	str	r3, [sp, #8]
    1f4e:	e74c      	b.n	1dea <__aeabi_dmul+0x4a>
    1f50:	2303      	movs	r3, #3
    1f52:	4681      	mov	r9, r0
    1f54:	270c      	movs	r7, #12
    1f56:	9302      	str	r3, [sp, #8]
    1f58:	e747      	b.n	1dea <__aeabi_dmul+0x4a>
    1f5a:	2280      	movs	r2, #128	; 0x80
    1f5c:	2300      	movs	r3, #0
    1f5e:	2500      	movs	r5, #0
    1f60:	0312      	lsls	r2, r2, #12
    1f62:	4699      	mov	r9, r3
    1f64:	4c05      	ldr	r4, [pc, #20]	; (1f7c <__aeabi_dmul+0x1dc>)
    1f66:	e782      	b.n	1e6e <__aeabi_dmul+0xce>
    1f68:	465c      	mov	r4, fp
    1f6a:	464b      	mov	r3, r9
    1f6c:	9802      	ldr	r0, [sp, #8]
    1f6e:	e76f      	b.n	1e50 <__aeabi_dmul+0xb0>
    1f70:	465c      	mov	r4, fp
    1f72:	464b      	mov	r3, r9
    1f74:	9501      	str	r5, [sp, #4]
    1f76:	9802      	ldr	r0, [sp, #8]
    1f78:	e76a      	b.n	1e50 <__aeabi_dmul+0xb0>
    1f7a:	46c0      	nop			; (mov r8, r8)
    1f7c:	000007ff 	.word	0x000007ff
    1f80:	fffffc01 	.word	0xfffffc01
    1f84:	00002e1c 	.word	0x00002e1c
    1f88:	800fffff 	.word	0x800fffff
    1f8c:	fffffc0d 	.word	0xfffffc0d
    1f90:	464a      	mov	r2, r9
    1f92:	4649      	mov	r1, r9
    1f94:	0c17      	lsrs	r7, r2, #16
    1f96:	0c1a      	lsrs	r2, r3, #16
    1f98:	041b      	lsls	r3, r3, #16
    1f9a:	0c1b      	lsrs	r3, r3, #16
    1f9c:	0408      	lsls	r0, r1, #16
    1f9e:	0019      	movs	r1, r3
    1fa0:	0c00      	lsrs	r0, r0, #16
    1fa2:	4341      	muls	r1, r0
    1fa4:	0015      	movs	r5, r2
    1fa6:	4688      	mov	r8, r1
    1fa8:	0019      	movs	r1, r3
    1faa:	437d      	muls	r5, r7
    1fac:	4379      	muls	r1, r7
    1fae:	9503      	str	r5, [sp, #12]
    1fb0:	4689      	mov	r9, r1
    1fb2:	0029      	movs	r1, r5
    1fb4:	0015      	movs	r5, r2
    1fb6:	4345      	muls	r5, r0
    1fb8:	444d      	add	r5, r9
    1fba:	9502      	str	r5, [sp, #8]
    1fbc:	4645      	mov	r5, r8
    1fbe:	0c2d      	lsrs	r5, r5, #16
    1fc0:	46aa      	mov	sl, r5
    1fc2:	9d02      	ldr	r5, [sp, #8]
    1fc4:	4455      	add	r5, sl
    1fc6:	45a9      	cmp	r9, r5
    1fc8:	d906      	bls.n	1fd8 <__aeabi_dmul+0x238>
    1fca:	468a      	mov	sl, r1
    1fcc:	2180      	movs	r1, #128	; 0x80
    1fce:	0249      	lsls	r1, r1, #9
    1fd0:	4689      	mov	r9, r1
    1fd2:	44ca      	add	sl, r9
    1fd4:	4651      	mov	r1, sl
    1fd6:	9103      	str	r1, [sp, #12]
    1fd8:	0c29      	lsrs	r1, r5, #16
    1fda:	9104      	str	r1, [sp, #16]
    1fdc:	4641      	mov	r1, r8
    1fde:	0409      	lsls	r1, r1, #16
    1fe0:	042d      	lsls	r5, r5, #16
    1fe2:	0c09      	lsrs	r1, r1, #16
    1fe4:	4688      	mov	r8, r1
    1fe6:	0029      	movs	r1, r5
    1fe8:	0c25      	lsrs	r5, r4, #16
    1fea:	0424      	lsls	r4, r4, #16
    1fec:	4441      	add	r1, r8
    1fee:	0c24      	lsrs	r4, r4, #16
    1ff0:	9105      	str	r1, [sp, #20]
    1ff2:	0021      	movs	r1, r4
    1ff4:	4341      	muls	r1, r0
    1ff6:	4688      	mov	r8, r1
    1ff8:	0021      	movs	r1, r4
    1ffa:	4379      	muls	r1, r7
    1ffc:	468a      	mov	sl, r1
    1ffe:	4368      	muls	r0, r5
    2000:	4641      	mov	r1, r8
    2002:	4450      	add	r0, sl
    2004:	4681      	mov	r9, r0
    2006:	0c08      	lsrs	r0, r1, #16
    2008:	4448      	add	r0, r9
    200a:	436f      	muls	r7, r5
    200c:	4582      	cmp	sl, r0
    200e:	d903      	bls.n	2018 <__aeabi_dmul+0x278>
    2010:	2180      	movs	r1, #128	; 0x80
    2012:	0249      	lsls	r1, r1, #9
    2014:	4689      	mov	r9, r1
    2016:	444f      	add	r7, r9
    2018:	0c01      	lsrs	r1, r0, #16
    201a:	4689      	mov	r9, r1
    201c:	0039      	movs	r1, r7
    201e:	4449      	add	r1, r9
    2020:	9102      	str	r1, [sp, #8]
    2022:	4641      	mov	r1, r8
    2024:	040f      	lsls	r7, r1, #16
    2026:	9904      	ldr	r1, [sp, #16]
    2028:	0c3f      	lsrs	r7, r7, #16
    202a:	4688      	mov	r8, r1
    202c:	0400      	lsls	r0, r0, #16
    202e:	19c0      	adds	r0, r0, r7
    2030:	4480      	add	r8, r0
    2032:	4641      	mov	r1, r8
    2034:	9104      	str	r1, [sp, #16]
    2036:	4659      	mov	r1, fp
    2038:	0c0f      	lsrs	r7, r1, #16
    203a:	0409      	lsls	r1, r1, #16
    203c:	0c09      	lsrs	r1, r1, #16
    203e:	4688      	mov	r8, r1
    2040:	4359      	muls	r1, r3
    2042:	468a      	mov	sl, r1
    2044:	0039      	movs	r1, r7
    2046:	4351      	muls	r1, r2
    2048:	4689      	mov	r9, r1
    204a:	4641      	mov	r1, r8
    204c:	434a      	muls	r2, r1
    204e:	4651      	mov	r1, sl
    2050:	0c09      	lsrs	r1, r1, #16
    2052:	468b      	mov	fp, r1
    2054:	437b      	muls	r3, r7
    2056:	18d2      	adds	r2, r2, r3
    2058:	445a      	add	r2, fp
    205a:	4293      	cmp	r3, r2
    205c:	d903      	bls.n	2066 <__aeabi_dmul+0x2c6>
    205e:	2380      	movs	r3, #128	; 0x80
    2060:	025b      	lsls	r3, r3, #9
    2062:	469b      	mov	fp, r3
    2064:	44d9      	add	r9, fp
    2066:	4651      	mov	r1, sl
    2068:	0409      	lsls	r1, r1, #16
    206a:	0c09      	lsrs	r1, r1, #16
    206c:	468a      	mov	sl, r1
    206e:	4641      	mov	r1, r8
    2070:	4361      	muls	r1, r4
    2072:	437c      	muls	r4, r7
    2074:	0c13      	lsrs	r3, r2, #16
    2076:	0412      	lsls	r2, r2, #16
    2078:	444b      	add	r3, r9
    207a:	4452      	add	r2, sl
    207c:	46a1      	mov	r9, r4
    207e:	468a      	mov	sl, r1
    2080:	003c      	movs	r4, r7
    2082:	4641      	mov	r1, r8
    2084:	436c      	muls	r4, r5
    2086:	434d      	muls	r5, r1
    2088:	4651      	mov	r1, sl
    208a:	444d      	add	r5, r9
    208c:	0c0f      	lsrs	r7, r1, #16
    208e:	197d      	adds	r5, r7, r5
    2090:	45a9      	cmp	r9, r5
    2092:	d903      	bls.n	209c <__aeabi_dmul+0x2fc>
    2094:	2180      	movs	r1, #128	; 0x80
    2096:	0249      	lsls	r1, r1, #9
    2098:	4688      	mov	r8, r1
    209a:	4444      	add	r4, r8
    209c:	9f04      	ldr	r7, [sp, #16]
    209e:	9903      	ldr	r1, [sp, #12]
    20a0:	46b8      	mov	r8, r7
    20a2:	4441      	add	r1, r8
    20a4:	468b      	mov	fp, r1
    20a6:	4583      	cmp	fp, r0
    20a8:	4180      	sbcs	r0, r0
    20aa:	4241      	negs	r1, r0
    20ac:	4688      	mov	r8, r1
    20ae:	4651      	mov	r1, sl
    20b0:	0408      	lsls	r0, r1, #16
    20b2:	042f      	lsls	r7, r5, #16
    20b4:	0c00      	lsrs	r0, r0, #16
    20b6:	183f      	adds	r7, r7, r0
    20b8:	4658      	mov	r0, fp
    20ba:	9902      	ldr	r1, [sp, #8]
    20bc:	1810      	adds	r0, r2, r0
    20be:	4689      	mov	r9, r1
    20c0:	4290      	cmp	r0, r2
    20c2:	4192      	sbcs	r2, r2
    20c4:	444f      	add	r7, r9
    20c6:	46ba      	mov	sl, r7
    20c8:	4252      	negs	r2, r2
    20ca:	4699      	mov	r9, r3
    20cc:	4693      	mov	fp, r2
    20ce:	44c2      	add	sl, r8
    20d0:	44d1      	add	r9, sl
    20d2:	44cb      	add	fp, r9
    20d4:	428f      	cmp	r7, r1
    20d6:	41bf      	sbcs	r7, r7
    20d8:	45c2      	cmp	sl, r8
    20da:	4189      	sbcs	r1, r1
    20dc:	4599      	cmp	r9, r3
    20de:	419b      	sbcs	r3, r3
    20e0:	4593      	cmp	fp, r2
    20e2:	4192      	sbcs	r2, r2
    20e4:	427f      	negs	r7, r7
    20e6:	4249      	negs	r1, r1
    20e8:	0c2d      	lsrs	r5, r5, #16
    20ea:	4252      	negs	r2, r2
    20ec:	430f      	orrs	r7, r1
    20ee:	425b      	negs	r3, r3
    20f0:	4313      	orrs	r3, r2
    20f2:	197f      	adds	r7, r7, r5
    20f4:	18ff      	adds	r7, r7, r3
    20f6:	465b      	mov	r3, fp
    20f8:	193c      	adds	r4, r7, r4
    20fa:	0ddb      	lsrs	r3, r3, #23
    20fc:	9a05      	ldr	r2, [sp, #20]
    20fe:	0264      	lsls	r4, r4, #9
    2100:	431c      	orrs	r4, r3
    2102:	0243      	lsls	r3, r0, #9
    2104:	4313      	orrs	r3, r2
    2106:	1e5d      	subs	r5, r3, #1
    2108:	41ab      	sbcs	r3, r5
    210a:	465a      	mov	r2, fp
    210c:	0dc0      	lsrs	r0, r0, #23
    210e:	4303      	orrs	r3, r0
    2110:	0252      	lsls	r2, r2, #9
    2112:	4313      	orrs	r3, r2
    2114:	01e2      	lsls	r2, r4, #7
    2116:	d556      	bpl.n	21c6 <__aeabi_dmul+0x426>
    2118:	2001      	movs	r0, #1
    211a:	085a      	lsrs	r2, r3, #1
    211c:	4003      	ands	r3, r0
    211e:	4313      	orrs	r3, r2
    2120:	07e2      	lsls	r2, r4, #31
    2122:	4313      	orrs	r3, r2
    2124:	0864      	lsrs	r4, r4, #1
    2126:	485a      	ldr	r0, [pc, #360]	; (2290 <__aeabi_dmul+0x4f0>)
    2128:	4460      	add	r0, ip
    212a:	2800      	cmp	r0, #0
    212c:	dd4d      	ble.n	21ca <__aeabi_dmul+0x42a>
    212e:	075a      	lsls	r2, r3, #29
    2130:	d009      	beq.n	2146 <__aeabi_dmul+0x3a6>
    2132:	220f      	movs	r2, #15
    2134:	401a      	ands	r2, r3
    2136:	2a04      	cmp	r2, #4
    2138:	d005      	beq.n	2146 <__aeabi_dmul+0x3a6>
    213a:	1d1a      	adds	r2, r3, #4
    213c:	429a      	cmp	r2, r3
    213e:	419b      	sbcs	r3, r3
    2140:	425b      	negs	r3, r3
    2142:	18e4      	adds	r4, r4, r3
    2144:	0013      	movs	r3, r2
    2146:	01e2      	lsls	r2, r4, #7
    2148:	d504      	bpl.n	2154 <__aeabi_dmul+0x3b4>
    214a:	2080      	movs	r0, #128	; 0x80
    214c:	4a51      	ldr	r2, [pc, #324]	; (2294 <__aeabi_dmul+0x4f4>)
    214e:	00c0      	lsls	r0, r0, #3
    2150:	4014      	ands	r4, r2
    2152:	4460      	add	r0, ip
    2154:	4a50      	ldr	r2, [pc, #320]	; (2298 <__aeabi_dmul+0x4f8>)
    2156:	4290      	cmp	r0, r2
    2158:	dd00      	ble.n	215c <__aeabi_dmul+0x3bc>
    215a:	e6e3      	b.n	1f24 <__aeabi_dmul+0x184>
    215c:	2501      	movs	r5, #1
    215e:	08db      	lsrs	r3, r3, #3
    2160:	0762      	lsls	r2, r4, #29
    2162:	431a      	orrs	r2, r3
    2164:	0264      	lsls	r4, r4, #9
    2166:	9b01      	ldr	r3, [sp, #4]
    2168:	4691      	mov	r9, r2
    216a:	0b22      	lsrs	r2, r4, #12
    216c:	0544      	lsls	r4, r0, #21
    216e:	0d64      	lsrs	r4, r4, #21
    2170:	401d      	ands	r5, r3
    2172:	e67c      	b.n	1e6e <__aeabi_dmul+0xce>
    2174:	2280      	movs	r2, #128	; 0x80
    2176:	4659      	mov	r1, fp
    2178:	0312      	lsls	r2, r2, #12
    217a:	4211      	tst	r1, r2
    217c:	d008      	beq.n	2190 <__aeabi_dmul+0x3f0>
    217e:	4214      	tst	r4, r2
    2180:	d106      	bne.n	2190 <__aeabi_dmul+0x3f0>
    2182:	4322      	orrs	r2, r4
    2184:	0312      	lsls	r2, r2, #12
    2186:	0b12      	lsrs	r2, r2, #12
    2188:	4645      	mov	r5, r8
    218a:	4699      	mov	r9, r3
    218c:	4c43      	ldr	r4, [pc, #268]	; (229c <__aeabi_dmul+0x4fc>)
    218e:	e66e      	b.n	1e6e <__aeabi_dmul+0xce>
    2190:	465b      	mov	r3, fp
    2192:	431a      	orrs	r2, r3
    2194:	0312      	lsls	r2, r2, #12
    2196:	0b12      	lsrs	r2, r2, #12
    2198:	4c40      	ldr	r4, [pc, #256]	; (229c <__aeabi_dmul+0x4fc>)
    219a:	e668      	b.n	1e6e <__aeabi_dmul+0xce>
    219c:	0003      	movs	r3, r0
    219e:	4654      	mov	r4, sl
    21a0:	3b28      	subs	r3, #40	; 0x28
    21a2:	409c      	lsls	r4, r3
    21a4:	2300      	movs	r3, #0
    21a6:	e6b9      	b.n	1f1c <__aeabi_dmul+0x17c>
    21a8:	f000 fc44 	bl	2a34 <__clzsi2>
    21ac:	3020      	adds	r0, #32
    21ae:	e6a6      	b.n	1efe <__aeabi_dmul+0x15e>
    21b0:	0003      	movs	r3, r0
    21b2:	3b28      	subs	r3, #40	; 0x28
    21b4:	409f      	lsls	r7, r3
    21b6:	2300      	movs	r3, #0
    21b8:	46bb      	mov	fp, r7
    21ba:	4699      	mov	r9, r3
    21bc:	e68a      	b.n	1ed4 <__aeabi_dmul+0x134>
    21be:	f000 fc39 	bl	2a34 <__clzsi2>
    21c2:	3020      	adds	r0, #32
    21c4:	e674      	b.n	1eb0 <__aeabi_dmul+0x110>
    21c6:	46b4      	mov	ip, r6
    21c8:	e7ad      	b.n	2126 <__aeabi_dmul+0x386>
    21ca:	2501      	movs	r5, #1
    21cc:	1a2a      	subs	r2, r5, r0
    21ce:	2a38      	cmp	r2, #56	; 0x38
    21d0:	dd06      	ble.n	21e0 <__aeabi_dmul+0x440>
    21d2:	9b01      	ldr	r3, [sp, #4]
    21d4:	2400      	movs	r4, #0
    21d6:	401d      	ands	r5, r3
    21d8:	2300      	movs	r3, #0
    21da:	2200      	movs	r2, #0
    21dc:	4699      	mov	r9, r3
    21de:	e646      	b.n	1e6e <__aeabi_dmul+0xce>
    21e0:	2a1f      	cmp	r2, #31
    21e2:	dc21      	bgt.n	2228 <__aeabi_dmul+0x488>
    21e4:	2520      	movs	r5, #32
    21e6:	0020      	movs	r0, r4
    21e8:	1aad      	subs	r5, r5, r2
    21ea:	001e      	movs	r6, r3
    21ec:	40ab      	lsls	r3, r5
    21ee:	40a8      	lsls	r0, r5
    21f0:	40d6      	lsrs	r6, r2
    21f2:	1e5d      	subs	r5, r3, #1
    21f4:	41ab      	sbcs	r3, r5
    21f6:	4330      	orrs	r0, r6
    21f8:	4318      	orrs	r0, r3
    21fa:	40d4      	lsrs	r4, r2
    21fc:	0743      	lsls	r3, r0, #29
    21fe:	d009      	beq.n	2214 <__aeabi_dmul+0x474>
    2200:	230f      	movs	r3, #15
    2202:	4003      	ands	r3, r0
    2204:	2b04      	cmp	r3, #4
    2206:	d005      	beq.n	2214 <__aeabi_dmul+0x474>
    2208:	0003      	movs	r3, r0
    220a:	1d18      	adds	r0, r3, #4
    220c:	4298      	cmp	r0, r3
    220e:	419b      	sbcs	r3, r3
    2210:	425b      	negs	r3, r3
    2212:	18e4      	adds	r4, r4, r3
    2214:	0223      	lsls	r3, r4, #8
    2216:	d521      	bpl.n	225c <__aeabi_dmul+0x4bc>
    2218:	2501      	movs	r5, #1
    221a:	9b01      	ldr	r3, [sp, #4]
    221c:	2401      	movs	r4, #1
    221e:	401d      	ands	r5, r3
    2220:	2300      	movs	r3, #0
    2222:	2200      	movs	r2, #0
    2224:	4699      	mov	r9, r3
    2226:	e622      	b.n	1e6e <__aeabi_dmul+0xce>
    2228:	251f      	movs	r5, #31
    222a:	0021      	movs	r1, r4
    222c:	426d      	negs	r5, r5
    222e:	1a28      	subs	r0, r5, r0
    2230:	40c1      	lsrs	r1, r0
    2232:	0008      	movs	r0, r1
    2234:	2a20      	cmp	r2, #32
    2236:	d01d      	beq.n	2274 <__aeabi_dmul+0x4d4>
    2238:	355f      	adds	r5, #95	; 0x5f
    223a:	1aaa      	subs	r2, r5, r2
    223c:	4094      	lsls	r4, r2
    223e:	4323      	orrs	r3, r4
    2240:	1e5c      	subs	r4, r3, #1
    2242:	41a3      	sbcs	r3, r4
    2244:	2507      	movs	r5, #7
    2246:	4303      	orrs	r3, r0
    2248:	401d      	ands	r5, r3
    224a:	2200      	movs	r2, #0
    224c:	2d00      	cmp	r5, #0
    224e:	d009      	beq.n	2264 <__aeabi_dmul+0x4c4>
    2250:	220f      	movs	r2, #15
    2252:	2400      	movs	r4, #0
    2254:	401a      	ands	r2, r3
    2256:	0018      	movs	r0, r3
    2258:	2a04      	cmp	r2, #4
    225a:	d1d6      	bne.n	220a <__aeabi_dmul+0x46a>
    225c:	0003      	movs	r3, r0
    225e:	0765      	lsls	r5, r4, #29
    2260:	0264      	lsls	r4, r4, #9
    2262:	0b22      	lsrs	r2, r4, #12
    2264:	08db      	lsrs	r3, r3, #3
    2266:	432b      	orrs	r3, r5
    2268:	2501      	movs	r5, #1
    226a:	4699      	mov	r9, r3
    226c:	9b01      	ldr	r3, [sp, #4]
    226e:	2400      	movs	r4, #0
    2270:	401d      	ands	r5, r3
    2272:	e5fc      	b.n	1e6e <__aeabi_dmul+0xce>
    2274:	2400      	movs	r4, #0
    2276:	e7e2      	b.n	223e <__aeabi_dmul+0x49e>
    2278:	2280      	movs	r2, #128	; 0x80
    227a:	2501      	movs	r5, #1
    227c:	0312      	lsls	r2, r2, #12
    227e:	4322      	orrs	r2, r4
    2280:	9901      	ldr	r1, [sp, #4]
    2282:	0312      	lsls	r2, r2, #12
    2284:	0b12      	lsrs	r2, r2, #12
    2286:	400d      	ands	r5, r1
    2288:	4699      	mov	r9, r3
    228a:	4c04      	ldr	r4, [pc, #16]	; (229c <__aeabi_dmul+0x4fc>)
    228c:	e5ef      	b.n	1e6e <__aeabi_dmul+0xce>
    228e:	46c0      	nop			; (mov r8, r8)
    2290:	000003ff 	.word	0x000003ff
    2294:	feffffff 	.word	0xfeffffff
    2298:	000007fe 	.word	0x000007fe
    229c:	000007ff 	.word	0x000007ff

000022a0 <__aeabi_dsub>:
    22a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    22a2:	4646      	mov	r6, r8
    22a4:	46d6      	mov	lr, sl
    22a6:	464f      	mov	r7, r9
    22a8:	030c      	lsls	r4, r1, #12
    22aa:	b5c0      	push	{r6, r7, lr}
    22ac:	0fcd      	lsrs	r5, r1, #31
    22ae:	004e      	lsls	r6, r1, #1
    22b0:	0a61      	lsrs	r1, r4, #9
    22b2:	0f44      	lsrs	r4, r0, #29
    22b4:	430c      	orrs	r4, r1
    22b6:	00c1      	lsls	r1, r0, #3
    22b8:	0058      	lsls	r0, r3, #1
    22ba:	0d40      	lsrs	r0, r0, #21
    22bc:	4684      	mov	ip, r0
    22be:	468a      	mov	sl, r1
    22c0:	000f      	movs	r7, r1
    22c2:	0319      	lsls	r1, r3, #12
    22c4:	0f50      	lsrs	r0, r2, #29
    22c6:	0a49      	lsrs	r1, r1, #9
    22c8:	4301      	orrs	r1, r0
    22ca:	48c6      	ldr	r0, [pc, #792]	; (25e4 <__aeabi_dsub+0x344>)
    22cc:	0d76      	lsrs	r6, r6, #21
    22ce:	46a8      	mov	r8, r5
    22d0:	0fdb      	lsrs	r3, r3, #31
    22d2:	00d2      	lsls	r2, r2, #3
    22d4:	4584      	cmp	ip, r0
    22d6:	d100      	bne.n	22da <__aeabi_dsub+0x3a>
    22d8:	e0d8      	b.n	248c <__aeabi_dsub+0x1ec>
    22da:	2001      	movs	r0, #1
    22dc:	4043      	eors	r3, r0
    22de:	42ab      	cmp	r3, r5
    22e0:	d100      	bne.n	22e4 <__aeabi_dsub+0x44>
    22e2:	e0a6      	b.n	2432 <__aeabi_dsub+0x192>
    22e4:	4660      	mov	r0, ip
    22e6:	1a35      	subs	r5, r6, r0
    22e8:	2d00      	cmp	r5, #0
    22ea:	dc00      	bgt.n	22ee <__aeabi_dsub+0x4e>
    22ec:	e105      	b.n	24fa <__aeabi_dsub+0x25a>
    22ee:	2800      	cmp	r0, #0
    22f0:	d110      	bne.n	2314 <__aeabi_dsub+0x74>
    22f2:	000b      	movs	r3, r1
    22f4:	4313      	orrs	r3, r2
    22f6:	d100      	bne.n	22fa <__aeabi_dsub+0x5a>
    22f8:	e0d7      	b.n	24aa <__aeabi_dsub+0x20a>
    22fa:	1e6b      	subs	r3, r5, #1
    22fc:	2b00      	cmp	r3, #0
    22fe:	d000      	beq.n	2302 <__aeabi_dsub+0x62>
    2300:	e14b      	b.n	259a <__aeabi_dsub+0x2fa>
    2302:	4653      	mov	r3, sl
    2304:	1a9f      	subs	r7, r3, r2
    2306:	45ba      	cmp	sl, r7
    2308:	4180      	sbcs	r0, r0
    230a:	1a64      	subs	r4, r4, r1
    230c:	4240      	negs	r0, r0
    230e:	1a24      	subs	r4, r4, r0
    2310:	2601      	movs	r6, #1
    2312:	e01e      	b.n	2352 <__aeabi_dsub+0xb2>
    2314:	4bb3      	ldr	r3, [pc, #716]	; (25e4 <__aeabi_dsub+0x344>)
    2316:	429e      	cmp	r6, r3
    2318:	d048      	beq.n	23ac <__aeabi_dsub+0x10c>
    231a:	2380      	movs	r3, #128	; 0x80
    231c:	041b      	lsls	r3, r3, #16
    231e:	4319      	orrs	r1, r3
    2320:	2d38      	cmp	r5, #56	; 0x38
    2322:	dd00      	ble.n	2326 <__aeabi_dsub+0x86>
    2324:	e119      	b.n	255a <__aeabi_dsub+0x2ba>
    2326:	2d1f      	cmp	r5, #31
    2328:	dd00      	ble.n	232c <__aeabi_dsub+0x8c>
    232a:	e14c      	b.n	25c6 <__aeabi_dsub+0x326>
    232c:	2320      	movs	r3, #32
    232e:	000f      	movs	r7, r1
    2330:	1b5b      	subs	r3, r3, r5
    2332:	0010      	movs	r0, r2
    2334:	409a      	lsls	r2, r3
    2336:	409f      	lsls	r7, r3
    2338:	40e8      	lsrs	r0, r5
    233a:	1e53      	subs	r3, r2, #1
    233c:	419a      	sbcs	r2, r3
    233e:	40e9      	lsrs	r1, r5
    2340:	4307      	orrs	r7, r0
    2342:	4317      	orrs	r7, r2
    2344:	4653      	mov	r3, sl
    2346:	1bdf      	subs	r7, r3, r7
    2348:	1a61      	subs	r1, r4, r1
    234a:	45ba      	cmp	sl, r7
    234c:	41a4      	sbcs	r4, r4
    234e:	4264      	negs	r4, r4
    2350:	1b0c      	subs	r4, r1, r4
    2352:	0223      	lsls	r3, r4, #8
    2354:	d400      	bmi.n	2358 <__aeabi_dsub+0xb8>
    2356:	e0c5      	b.n	24e4 <__aeabi_dsub+0x244>
    2358:	0264      	lsls	r4, r4, #9
    235a:	0a65      	lsrs	r5, r4, #9
    235c:	2d00      	cmp	r5, #0
    235e:	d100      	bne.n	2362 <__aeabi_dsub+0xc2>
    2360:	e0f6      	b.n	2550 <__aeabi_dsub+0x2b0>
    2362:	0028      	movs	r0, r5
    2364:	f000 fb66 	bl	2a34 <__clzsi2>
    2368:	0003      	movs	r3, r0
    236a:	3b08      	subs	r3, #8
    236c:	2b1f      	cmp	r3, #31
    236e:	dd00      	ble.n	2372 <__aeabi_dsub+0xd2>
    2370:	e0e9      	b.n	2546 <__aeabi_dsub+0x2a6>
    2372:	2220      	movs	r2, #32
    2374:	003c      	movs	r4, r7
    2376:	1ad2      	subs	r2, r2, r3
    2378:	409d      	lsls	r5, r3
    237a:	40d4      	lsrs	r4, r2
    237c:	409f      	lsls	r7, r3
    237e:	4325      	orrs	r5, r4
    2380:	429e      	cmp	r6, r3
    2382:	dd00      	ble.n	2386 <__aeabi_dsub+0xe6>
    2384:	e0db      	b.n	253e <__aeabi_dsub+0x29e>
    2386:	1b9e      	subs	r6, r3, r6
    2388:	1c73      	adds	r3, r6, #1
    238a:	2b1f      	cmp	r3, #31
    238c:	dd00      	ble.n	2390 <__aeabi_dsub+0xf0>
    238e:	e10a      	b.n	25a6 <__aeabi_dsub+0x306>
    2390:	2220      	movs	r2, #32
    2392:	0038      	movs	r0, r7
    2394:	1ad2      	subs	r2, r2, r3
    2396:	0029      	movs	r1, r5
    2398:	4097      	lsls	r7, r2
    239a:	002c      	movs	r4, r5
    239c:	4091      	lsls	r1, r2
    239e:	40d8      	lsrs	r0, r3
    23a0:	1e7a      	subs	r2, r7, #1
    23a2:	4197      	sbcs	r7, r2
    23a4:	40dc      	lsrs	r4, r3
    23a6:	2600      	movs	r6, #0
    23a8:	4301      	orrs	r1, r0
    23aa:	430f      	orrs	r7, r1
    23ac:	077b      	lsls	r3, r7, #29
    23ae:	d009      	beq.n	23c4 <__aeabi_dsub+0x124>
    23b0:	230f      	movs	r3, #15
    23b2:	403b      	ands	r3, r7
    23b4:	2b04      	cmp	r3, #4
    23b6:	d005      	beq.n	23c4 <__aeabi_dsub+0x124>
    23b8:	1d3b      	adds	r3, r7, #4
    23ba:	42bb      	cmp	r3, r7
    23bc:	41bf      	sbcs	r7, r7
    23be:	427f      	negs	r7, r7
    23c0:	19e4      	adds	r4, r4, r7
    23c2:	001f      	movs	r7, r3
    23c4:	0223      	lsls	r3, r4, #8
    23c6:	d525      	bpl.n	2414 <__aeabi_dsub+0x174>
    23c8:	4b86      	ldr	r3, [pc, #536]	; (25e4 <__aeabi_dsub+0x344>)
    23ca:	3601      	adds	r6, #1
    23cc:	429e      	cmp	r6, r3
    23ce:	d100      	bne.n	23d2 <__aeabi_dsub+0x132>
    23d0:	e0af      	b.n	2532 <__aeabi_dsub+0x292>
    23d2:	4b85      	ldr	r3, [pc, #532]	; (25e8 <__aeabi_dsub+0x348>)
    23d4:	2501      	movs	r5, #1
    23d6:	401c      	ands	r4, r3
    23d8:	4643      	mov	r3, r8
    23da:	0762      	lsls	r2, r4, #29
    23dc:	08ff      	lsrs	r7, r7, #3
    23de:	0264      	lsls	r4, r4, #9
    23e0:	0576      	lsls	r6, r6, #21
    23e2:	4317      	orrs	r7, r2
    23e4:	0b24      	lsrs	r4, r4, #12
    23e6:	0d76      	lsrs	r6, r6, #21
    23e8:	401d      	ands	r5, r3
    23ea:	2100      	movs	r1, #0
    23ec:	0324      	lsls	r4, r4, #12
    23ee:	0b23      	lsrs	r3, r4, #12
    23f0:	0d0c      	lsrs	r4, r1, #20
    23f2:	4a7e      	ldr	r2, [pc, #504]	; (25ec <__aeabi_dsub+0x34c>)
    23f4:	0524      	lsls	r4, r4, #20
    23f6:	431c      	orrs	r4, r3
    23f8:	4014      	ands	r4, r2
    23fa:	0533      	lsls	r3, r6, #20
    23fc:	4323      	orrs	r3, r4
    23fe:	005b      	lsls	r3, r3, #1
    2400:	07ed      	lsls	r5, r5, #31
    2402:	085b      	lsrs	r3, r3, #1
    2404:	432b      	orrs	r3, r5
    2406:	0038      	movs	r0, r7
    2408:	0019      	movs	r1, r3
    240a:	bc1c      	pop	{r2, r3, r4}
    240c:	4690      	mov	r8, r2
    240e:	4699      	mov	r9, r3
    2410:	46a2      	mov	sl, r4
    2412:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2414:	2501      	movs	r5, #1
    2416:	4643      	mov	r3, r8
    2418:	0762      	lsls	r2, r4, #29
    241a:	08ff      	lsrs	r7, r7, #3
    241c:	4317      	orrs	r7, r2
    241e:	08e4      	lsrs	r4, r4, #3
    2420:	401d      	ands	r5, r3
    2422:	4b70      	ldr	r3, [pc, #448]	; (25e4 <__aeabi_dsub+0x344>)
    2424:	429e      	cmp	r6, r3
    2426:	d036      	beq.n	2496 <__aeabi_dsub+0x1f6>
    2428:	0324      	lsls	r4, r4, #12
    242a:	0576      	lsls	r6, r6, #21
    242c:	0b24      	lsrs	r4, r4, #12
    242e:	0d76      	lsrs	r6, r6, #21
    2430:	e7db      	b.n	23ea <__aeabi_dsub+0x14a>
    2432:	4663      	mov	r3, ip
    2434:	1af3      	subs	r3, r6, r3
    2436:	2b00      	cmp	r3, #0
    2438:	dc00      	bgt.n	243c <__aeabi_dsub+0x19c>
    243a:	e094      	b.n	2566 <__aeabi_dsub+0x2c6>
    243c:	4660      	mov	r0, ip
    243e:	2800      	cmp	r0, #0
    2440:	d035      	beq.n	24ae <__aeabi_dsub+0x20e>
    2442:	4868      	ldr	r0, [pc, #416]	; (25e4 <__aeabi_dsub+0x344>)
    2444:	4286      	cmp	r6, r0
    2446:	d0b1      	beq.n	23ac <__aeabi_dsub+0x10c>
    2448:	2780      	movs	r7, #128	; 0x80
    244a:	043f      	lsls	r7, r7, #16
    244c:	4339      	orrs	r1, r7
    244e:	2b38      	cmp	r3, #56	; 0x38
    2450:	dc00      	bgt.n	2454 <__aeabi_dsub+0x1b4>
    2452:	e0fd      	b.n	2650 <__aeabi_dsub+0x3b0>
    2454:	430a      	orrs	r2, r1
    2456:	0017      	movs	r7, r2
    2458:	2100      	movs	r1, #0
    245a:	1e7a      	subs	r2, r7, #1
    245c:	4197      	sbcs	r7, r2
    245e:	4457      	add	r7, sl
    2460:	4557      	cmp	r7, sl
    2462:	4180      	sbcs	r0, r0
    2464:	1909      	adds	r1, r1, r4
    2466:	4244      	negs	r4, r0
    2468:	190c      	adds	r4, r1, r4
    246a:	0223      	lsls	r3, r4, #8
    246c:	d53a      	bpl.n	24e4 <__aeabi_dsub+0x244>
    246e:	4b5d      	ldr	r3, [pc, #372]	; (25e4 <__aeabi_dsub+0x344>)
    2470:	3601      	adds	r6, #1
    2472:	429e      	cmp	r6, r3
    2474:	d100      	bne.n	2478 <__aeabi_dsub+0x1d8>
    2476:	e14b      	b.n	2710 <__aeabi_dsub+0x470>
    2478:	2201      	movs	r2, #1
    247a:	4b5b      	ldr	r3, [pc, #364]	; (25e8 <__aeabi_dsub+0x348>)
    247c:	401c      	ands	r4, r3
    247e:	087b      	lsrs	r3, r7, #1
    2480:	4017      	ands	r7, r2
    2482:	431f      	orrs	r7, r3
    2484:	07e2      	lsls	r2, r4, #31
    2486:	4317      	orrs	r7, r2
    2488:	0864      	lsrs	r4, r4, #1
    248a:	e78f      	b.n	23ac <__aeabi_dsub+0x10c>
    248c:	0008      	movs	r0, r1
    248e:	4310      	orrs	r0, r2
    2490:	d000      	beq.n	2494 <__aeabi_dsub+0x1f4>
    2492:	e724      	b.n	22de <__aeabi_dsub+0x3e>
    2494:	e721      	b.n	22da <__aeabi_dsub+0x3a>
    2496:	0023      	movs	r3, r4
    2498:	433b      	orrs	r3, r7
    249a:	d100      	bne.n	249e <__aeabi_dsub+0x1fe>
    249c:	e1b9      	b.n	2812 <__aeabi_dsub+0x572>
    249e:	2280      	movs	r2, #128	; 0x80
    24a0:	0312      	lsls	r2, r2, #12
    24a2:	4314      	orrs	r4, r2
    24a4:	0324      	lsls	r4, r4, #12
    24a6:	0b24      	lsrs	r4, r4, #12
    24a8:	e79f      	b.n	23ea <__aeabi_dsub+0x14a>
    24aa:	002e      	movs	r6, r5
    24ac:	e77e      	b.n	23ac <__aeabi_dsub+0x10c>
    24ae:	0008      	movs	r0, r1
    24b0:	4310      	orrs	r0, r2
    24b2:	d100      	bne.n	24b6 <__aeabi_dsub+0x216>
    24b4:	e0ca      	b.n	264c <__aeabi_dsub+0x3ac>
    24b6:	1e58      	subs	r0, r3, #1
    24b8:	4684      	mov	ip, r0
    24ba:	2800      	cmp	r0, #0
    24bc:	d000      	beq.n	24c0 <__aeabi_dsub+0x220>
    24be:	e0e7      	b.n	2690 <__aeabi_dsub+0x3f0>
    24c0:	4452      	add	r2, sl
    24c2:	4552      	cmp	r2, sl
    24c4:	4180      	sbcs	r0, r0
    24c6:	1864      	adds	r4, r4, r1
    24c8:	4240      	negs	r0, r0
    24ca:	1824      	adds	r4, r4, r0
    24cc:	0017      	movs	r7, r2
    24ce:	2601      	movs	r6, #1
    24d0:	0223      	lsls	r3, r4, #8
    24d2:	d507      	bpl.n	24e4 <__aeabi_dsub+0x244>
    24d4:	2602      	movs	r6, #2
    24d6:	e7cf      	b.n	2478 <__aeabi_dsub+0x1d8>
    24d8:	4664      	mov	r4, ip
    24da:	432c      	orrs	r4, r5
    24dc:	d100      	bne.n	24e0 <__aeabi_dsub+0x240>
    24de:	e1b3      	b.n	2848 <__aeabi_dsub+0x5a8>
    24e0:	002c      	movs	r4, r5
    24e2:	4667      	mov	r7, ip
    24e4:	077b      	lsls	r3, r7, #29
    24e6:	d000      	beq.n	24ea <__aeabi_dsub+0x24a>
    24e8:	e762      	b.n	23b0 <__aeabi_dsub+0x110>
    24ea:	0763      	lsls	r3, r4, #29
    24ec:	08ff      	lsrs	r7, r7, #3
    24ee:	431f      	orrs	r7, r3
    24f0:	2501      	movs	r5, #1
    24f2:	4643      	mov	r3, r8
    24f4:	08e4      	lsrs	r4, r4, #3
    24f6:	401d      	ands	r5, r3
    24f8:	e793      	b.n	2422 <__aeabi_dsub+0x182>
    24fa:	2d00      	cmp	r5, #0
    24fc:	d178      	bne.n	25f0 <__aeabi_dsub+0x350>
    24fe:	1c75      	adds	r5, r6, #1
    2500:	056d      	lsls	r5, r5, #21
    2502:	0d6d      	lsrs	r5, r5, #21
    2504:	2d01      	cmp	r5, #1
    2506:	dc00      	bgt.n	250a <__aeabi_dsub+0x26a>
    2508:	e0f2      	b.n	26f0 <__aeabi_dsub+0x450>
    250a:	4650      	mov	r0, sl
    250c:	1a80      	subs	r0, r0, r2
    250e:	4582      	cmp	sl, r0
    2510:	41bf      	sbcs	r7, r7
    2512:	1a65      	subs	r5, r4, r1
    2514:	427f      	negs	r7, r7
    2516:	1bed      	subs	r5, r5, r7
    2518:	4684      	mov	ip, r0
    251a:	0228      	lsls	r0, r5, #8
    251c:	d400      	bmi.n	2520 <__aeabi_dsub+0x280>
    251e:	e08c      	b.n	263a <__aeabi_dsub+0x39a>
    2520:	4650      	mov	r0, sl
    2522:	1a17      	subs	r7, r2, r0
    2524:	42ba      	cmp	r2, r7
    2526:	4192      	sbcs	r2, r2
    2528:	1b0c      	subs	r4, r1, r4
    252a:	4255      	negs	r5, r2
    252c:	1b65      	subs	r5, r4, r5
    252e:	4698      	mov	r8, r3
    2530:	e714      	b.n	235c <__aeabi_dsub+0xbc>
    2532:	2501      	movs	r5, #1
    2534:	4643      	mov	r3, r8
    2536:	2400      	movs	r4, #0
    2538:	401d      	ands	r5, r3
    253a:	2700      	movs	r7, #0
    253c:	e755      	b.n	23ea <__aeabi_dsub+0x14a>
    253e:	4c2a      	ldr	r4, [pc, #168]	; (25e8 <__aeabi_dsub+0x348>)
    2540:	1af6      	subs	r6, r6, r3
    2542:	402c      	ands	r4, r5
    2544:	e732      	b.n	23ac <__aeabi_dsub+0x10c>
    2546:	003d      	movs	r5, r7
    2548:	3828      	subs	r0, #40	; 0x28
    254a:	4085      	lsls	r5, r0
    254c:	2700      	movs	r7, #0
    254e:	e717      	b.n	2380 <__aeabi_dsub+0xe0>
    2550:	0038      	movs	r0, r7
    2552:	f000 fa6f 	bl	2a34 <__clzsi2>
    2556:	3020      	adds	r0, #32
    2558:	e706      	b.n	2368 <__aeabi_dsub+0xc8>
    255a:	430a      	orrs	r2, r1
    255c:	0017      	movs	r7, r2
    255e:	2100      	movs	r1, #0
    2560:	1e7a      	subs	r2, r7, #1
    2562:	4197      	sbcs	r7, r2
    2564:	e6ee      	b.n	2344 <__aeabi_dsub+0xa4>
    2566:	2b00      	cmp	r3, #0
    2568:	d000      	beq.n	256c <__aeabi_dsub+0x2cc>
    256a:	e0e5      	b.n	2738 <__aeabi_dsub+0x498>
    256c:	1c73      	adds	r3, r6, #1
    256e:	469c      	mov	ip, r3
    2570:	055b      	lsls	r3, r3, #21
    2572:	0d5b      	lsrs	r3, r3, #21
    2574:	2b01      	cmp	r3, #1
    2576:	dc00      	bgt.n	257a <__aeabi_dsub+0x2da>
    2578:	e09f      	b.n	26ba <__aeabi_dsub+0x41a>
    257a:	4b1a      	ldr	r3, [pc, #104]	; (25e4 <__aeabi_dsub+0x344>)
    257c:	459c      	cmp	ip, r3
    257e:	d100      	bne.n	2582 <__aeabi_dsub+0x2e2>
    2580:	e0c5      	b.n	270e <__aeabi_dsub+0x46e>
    2582:	4452      	add	r2, sl
    2584:	4552      	cmp	r2, sl
    2586:	4180      	sbcs	r0, r0
    2588:	1864      	adds	r4, r4, r1
    258a:	4240      	negs	r0, r0
    258c:	1824      	adds	r4, r4, r0
    258e:	07e7      	lsls	r7, r4, #31
    2590:	0852      	lsrs	r2, r2, #1
    2592:	4317      	orrs	r7, r2
    2594:	0864      	lsrs	r4, r4, #1
    2596:	4666      	mov	r6, ip
    2598:	e708      	b.n	23ac <__aeabi_dsub+0x10c>
    259a:	4812      	ldr	r0, [pc, #72]	; (25e4 <__aeabi_dsub+0x344>)
    259c:	4285      	cmp	r5, r0
    259e:	d100      	bne.n	25a2 <__aeabi_dsub+0x302>
    25a0:	e085      	b.n	26ae <__aeabi_dsub+0x40e>
    25a2:	001d      	movs	r5, r3
    25a4:	e6bc      	b.n	2320 <__aeabi_dsub+0x80>
    25a6:	0029      	movs	r1, r5
    25a8:	3e1f      	subs	r6, #31
    25aa:	40f1      	lsrs	r1, r6
    25ac:	2b20      	cmp	r3, #32
    25ae:	d100      	bne.n	25b2 <__aeabi_dsub+0x312>
    25b0:	e07f      	b.n	26b2 <__aeabi_dsub+0x412>
    25b2:	2240      	movs	r2, #64	; 0x40
    25b4:	1ad3      	subs	r3, r2, r3
    25b6:	409d      	lsls	r5, r3
    25b8:	432f      	orrs	r7, r5
    25ba:	1e7d      	subs	r5, r7, #1
    25bc:	41af      	sbcs	r7, r5
    25be:	2400      	movs	r4, #0
    25c0:	430f      	orrs	r7, r1
    25c2:	2600      	movs	r6, #0
    25c4:	e78e      	b.n	24e4 <__aeabi_dsub+0x244>
    25c6:	002b      	movs	r3, r5
    25c8:	000f      	movs	r7, r1
    25ca:	3b20      	subs	r3, #32
    25cc:	40df      	lsrs	r7, r3
    25ce:	2d20      	cmp	r5, #32
    25d0:	d071      	beq.n	26b6 <__aeabi_dsub+0x416>
    25d2:	2340      	movs	r3, #64	; 0x40
    25d4:	1b5d      	subs	r5, r3, r5
    25d6:	40a9      	lsls	r1, r5
    25d8:	430a      	orrs	r2, r1
    25da:	1e51      	subs	r1, r2, #1
    25dc:	418a      	sbcs	r2, r1
    25de:	2100      	movs	r1, #0
    25e0:	4317      	orrs	r7, r2
    25e2:	e6af      	b.n	2344 <__aeabi_dsub+0xa4>
    25e4:	000007ff 	.word	0x000007ff
    25e8:	ff7fffff 	.word	0xff7fffff
    25ec:	800fffff 	.word	0x800fffff
    25f0:	2e00      	cmp	r6, #0
    25f2:	d03e      	beq.n	2672 <__aeabi_dsub+0x3d2>
    25f4:	4eb3      	ldr	r6, [pc, #716]	; (28c4 <__aeabi_dsub+0x624>)
    25f6:	45b4      	cmp	ip, r6
    25f8:	d045      	beq.n	2686 <__aeabi_dsub+0x3e6>
    25fa:	2680      	movs	r6, #128	; 0x80
    25fc:	0436      	lsls	r6, r6, #16
    25fe:	426d      	negs	r5, r5
    2600:	4334      	orrs	r4, r6
    2602:	2d38      	cmp	r5, #56	; 0x38
    2604:	dd00      	ble.n	2608 <__aeabi_dsub+0x368>
    2606:	e0a8      	b.n	275a <__aeabi_dsub+0x4ba>
    2608:	2d1f      	cmp	r5, #31
    260a:	dd00      	ble.n	260e <__aeabi_dsub+0x36e>
    260c:	e11f      	b.n	284e <__aeabi_dsub+0x5ae>
    260e:	2620      	movs	r6, #32
    2610:	0027      	movs	r7, r4
    2612:	4650      	mov	r0, sl
    2614:	1b76      	subs	r6, r6, r5
    2616:	40b7      	lsls	r7, r6
    2618:	40e8      	lsrs	r0, r5
    261a:	4307      	orrs	r7, r0
    261c:	4650      	mov	r0, sl
    261e:	40b0      	lsls	r0, r6
    2620:	1e46      	subs	r6, r0, #1
    2622:	41b0      	sbcs	r0, r6
    2624:	40ec      	lsrs	r4, r5
    2626:	4338      	orrs	r0, r7
    2628:	1a17      	subs	r7, r2, r0
    262a:	42ba      	cmp	r2, r7
    262c:	4192      	sbcs	r2, r2
    262e:	1b0c      	subs	r4, r1, r4
    2630:	4252      	negs	r2, r2
    2632:	1aa4      	subs	r4, r4, r2
    2634:	4666      	mov	r6, ip
    2636:	4698      	mov	r8, r3
    2638:	e68b      	b.n	2352 <__aeabi_dsub+0xb2>
    263a:	4664      	mov	r4, ip
    263c:	4667      	mov	r7, ip
    263e:	432c      	orrs	r4, r5
    2640:	d000      	beq.n	2644 <__aeabi_dsub+0x3a4>
    2642:	e68b      	b.n	235c <__aeabi_dsub+0xbc>
    2644:	2500      	movs	r5, #0
    2646:	2600      	movs	r6, #0
    2648:	2700      	movs	r7, #0
    264a:	e6ea      	b.n	2422 <__aeabi_dsub+0x182>
    264c:	001e      	movs	r6, r3
    264e:	e6ad      	b.n	23ac <__aeabi_dsub+0x10c>
    2650:	2b1f      	cmp	r3, #31
    2652:	dc60      	bgt.n	2716 <__aeabi_dsub+0x476>
    2654:	2720      	movs	r7, #32
    2656:	1af8      	subs	r0, r7, r3
    2658:	000f      	movs	r7, r1
    265a:	4684      	mov	ip, r0
    265c:	4087      	lsls	r7, r0
    265e:	0010      	movs	r0, r2
    2660:	40d8      	lsrs	r0, r3
    2662:	4307      	orrs	r7, r0
    2664:	4660      	mov	r0, ip
    2666:	4082      	lsls	r2, r0
    2668:	1e50      	subs	r0, r2, #1
    266a:	4182      	sbcs	r2, r0
    266c:	40d9      	lsrs	r1, r3
    266e:	4317      	orrs	r7, r2
    2670:	e6f5      	b.n	245e <__aeabi_dsub+0x1be>
    2672:	0026      	movs	r6, r4
    2674:	4650      	mov	r0, sl
    2676:	4306      	orrs	r6, r0
    2678:	d005      	beq.n	2686 <__aeabi_dsub+0x3e6>
    267a:	43ed      	mvns	r5, r5
    267c:	2d00      	cmp	r5, #0
    267e:	d0d3      	beq.n	2628 <__aeabi_dsub+0x388>
    2680:	4e90      	ldr	r6, [pc, #576]	; (28c4 <__aeabi_dsub+0x624>)
    2682:	45b4      	cmp	ip, r6
    2684:	d1bd      	bne.n	2602 <__aeabi_dsub+0x362>
    2686:	000c      	movs	r4, r1
    2688:	0017      	movs	r7, r2
    268a:	4666      	mov	r6, ip
    268c:	4698      	mov	r8, r3
    268e:	e68d      	b.n	23ac <__aeabi_dsub+0x10c>
    2690:	488c      	ldr	r0, [pc, #560]	; (28c4 <__aeabi_dsub+0x624>)
    2692:	4283      	cmp	r3, r0
    2694:	d00b      	beq.n	26ae <__aeabi_dsub+0x40e>
    2696:	4663      	mov	r3, ip
    2698:	e6d9      	b.n	244e <__aeabi_dsub+0x1ae>
    269a:	2d00      	cmp	r5, #0
    269c:	d000      	beq.n	26a0 <__aeabi_dsub+0x400>
    269e:	e096      	b.n	27ce <__aeabi_dsub+0x52e>
    26a0:	0008      	movs	r0, r1
    26a2:	4310      	orrs	r0, r2
    26a4:	d100      	bne.n	26a8 <__aeabi_dsub+0x408>
    26a6:	e0e2      	b.n	286e <__aeabi_dsub+0x5ce>
    26a8:	000c      	movs	r4, r1
    26aa:	0017      	movs	r7, r2
    26ac:	4698      	mov	r8, r3
    26ae:	4e85      	ldr	r6, [pc, #532]	; (28c4 <__aeabi_dsub+0x624>)
    26b0:	e67c      	b.n	23ac <__aeabi_dsub+0x10c>
    26b2:	2500      	movs	r5, #0
    26b4:	e780      	b.n	25b8 <__aeabi_dsub+0x318>
    26b6:	2100      	movs	r1, #0
    26b8:	e78e      	b.n	25d8 <__aeabi_dsub+0x338>
    26ba:	0023      	movs	r3, r4
    26bc:	4650      	mov	r0, sl
    26be:	4303      	orrs	r3, r0
    26c0:	2e00      	cmp	r6, #0
    26c2:	d000      	beq.n	26c6 <__aeabi_dsub+0x426>
    26c4:	e0a8      	b.n	2818 <__aeabi_dsub+0x578>
    26c6:	2b00      	cmp	r3, #0
    26c8:	d100      	bne.n	26cc <__aeabi_dsub+0x42c>
    26ca:	e0de      	b.n	288a <__aeabi_dsub+0x5ea>
    26cc:	000b      	movs	r3, r1
    26ce:	4313      	orrs	r3, r2
    26d0:	d100      	bne.n	26d4 <__aeabi_dsub+0x434>
    26d2:	e66b      	b.n	23ac <__aeabi_dsub+0x10c>
    26d4:	4452      	add	r2, sl
    26d6:	4552      	cmp	r2, sl
    26d8:	4180      	sbcs	r0, r0
    26da:	1864      	adds	r4, r4, r1
    26dc:	4240      	negs	r0, r0
    26de:	1824      	adds	r4, r4, r0
    26e0:	0017      	movs	r7, r2
    26e2:	0223      	lsls	r3, r4, #8
    26e4:	d400      	bmi.n	26e8 <__aeabi_dsub+0x448>
    26e6:	e6fd      	b.n	24e4 <__aeabi_dsub+0x244>
    26e8:	4b77      	ldr	r3, [pc, #476]	; (28c8 <__aeabi_dsub+0x628>)
    26ea:	4666      	mov	r6, ip
    26ec:	401c      	ands	r4, r3
    26ee:	e65d      	b.n	23ac <__aeabi_dsub+0x10c>
    26f0:	0025      	movs	r5, r4
    26f2:	4650      	mov	r0, sl
    26f4:	4305      	orrs	r5, r0
    26f6:	2e00      	cmp	r6, #0
    26f8:	d1cf      	bne.n	269a <__aeabi_dsub+0x3fa>
    26fa:	2d00      	cmp	r5, #0
    26fc:	d14f      	bne.n	279e <__aeabi_dsub+0x4fe>
    26fe:	000c      	movs	r4, r1
    2700:	4314      	orrs	r4, r2
    2702:	d100      	bne.n	2706 <__aeabi_dsub+0x466>
    2704:	e0a0      	b.n	2848 <__aeabi_dsub+0x5a8>
    2706:	000c      	movs	r4, r1
    2708:	0017      	movs	r7, r2
    270a:	4698      	mov	r8, r3
    270c:	e64e      	b.n	23ac <__aeabi_dsub+0x10c>
    270e:	4666      	mov	r6, ip
    2710:	2400      	movs	r4, #0
    2712:	2700      	movs	r7, #0
    2714:	e685      	b.n	2422 <__aeabi_dsub+0x182>
    2716:	001f      	movs	r7, r3
    2718:	0008      	movs	r0, r1
    271a:	3f20      	subs	r7, #32
    271c:	40f8      	lsrs	r0, r7
    271e:	0007      	movs	r7, r0
    2720:	2b20      	cmp	r3, #32
    2722:	d100      	bne.n	2726 <__aeabi_dsub+0x486>
    2724:	e08e      	b.n	2844 <__aeabi_dsub+0x5a4>
    2726:	2040      	movs	r0, #64	; 0x40
    2728:	1ac3      	subs	r3, r0, r3
    272a:	4099      	lsls	r1, r3
    272c:	430a      	orrs	r2, r1
    272e:	1e51      	subs	r1, r2, #1
    2730:	418a      	sbcs	r2, r1
    2732:	2100      	movs	r1, #0
    2734:	4317      	orrs	r7, r2
    2736:	e692      	b.n	245e <__aeabi_dsub+0x1be>
    2738:	2e00      	cmp	r6, #0
    273a:	d114      	bne.n	2766 <__aeabi_dsub+0x4c6>
    273c:	0026      	movs	r6, r4
    273e:	4650      	mov	r0, sl
    2740:	4306      	orrs	r6, r0
    2742:	d062      	beq.n	280a <__aeabi_dsub+0x56a>
    2744:	43db      	mvns	r3, r3
    2746:	2b00      	cmp	r3, #0
    2748:	d15c      	bne.n	2804 <__aeabi_dsub+0x564>
    274a:	1887      	adds	r7, r0, r2
    274c:	4297      	cmp	r7, r2
    274e:	4192      	sbcs	r2, r2
    2750:	1864      	adds	r4, r4, r1
    2752:	4252      	negs	r2, r2
    2754:	18a4      	adds	r4, r4, r2
    2756:	4666      	mov	r6, ip
    2758:	e687      	b.n	246a <__aeabi_dsub+0x1ca>
    275a:	4650      	mov	r0, sl
    275c:	4320      	orrs	r0, r4
    275e:	1e44      	subs	r4, r0, #1
    2760:	41a0      	sbcs	r0, r4
    2762:	2400      	movs	r4, #0
    2764:	e760      	b.n	2628 <__aeabi_dsub+0x388>
    2766:	4e57      	ldr	r6, [pc, #348]	; (28c4 <__aeabi_dsub+0x624>)
    2768:	45b4      	cmp	ip, r6
    276a:	d04e      	beq.n	280a <__aeabi_dsub+0x56a>
    276c:	2680      	movs	r6, #128	; 0x80
    276e:	0436      	lsls	r6, r6, #16
    2770:	425b      	negs	r3, r3
    2772:	4334      	orrs	r4, r6
    2774:	2b38      	cmp	r3, #56	; 0x38
    2776:	dd00      	ble.n	277a <__aeabi_dsub+0x4da>
    2778:	e07f      	b.n	287a <__aeabi_dsub+0x5da>
    277a:	2b1f      	cmp	r3, #31
    277c:	dd00      	ble.n	2780 <__aeabi_dsub+0x4e0>
    277e:	e08b      	b.n	2898 <__aeabi_dsub+0x5f8>
    2780:	2620      	movs	r6, #32
    2782:	0027      	movs	r7, r4
    2784:	4650      	mov	r0, sl
    2786:	1af6      	subs	r6, r6, r3
    2788:	40b7      	lsls	r7, r6
    278a:	40d8      	lsrs	r0, r3
    278c:	4307      	orrs	r7, r0
    278e:	4650      	mov	r0, sl
    2790:	40b0      	lsls	r0, r6
    2792:	1e46      	subs	r6, r0, #1
    2794:	41b0      	sbcs	r0, r6
    2796:	4307      	orrs	r7, r0
    2798:	40dc      	lsrs	r4, r3
    279a:	18bf      	adds	r7, r7, r2
    279c:	e7d6      	b.n	274c <__aeabi_dsub+0x4ac>
    279e:	000d      	movs	r5, r1
    27a0:	4315      	orrs	r5, r2
    27a2:	d100      	bne.n	27a6 <__aeabi_dsub+0x506>
    27a4:	e602      	b.n	23ac <__aeabi_dsub+0x10c>
    27a6:	4650      	mov	r0, sl
    27a8:	1a80      	subs	r0, r0, r2
    27aa:	4582      	cmp	sl, r0
    27ac:	41bf      	sbcs	r7, r7
    27ae:	1a65      	subs	r5, r4, r1
    27b0:	427f      	negs	r7, r7
    27b2:	1bed      	subs	r5, r5, r7
    27b4:	4684      	mov	ip, r0
    27b6:	0228      	lsls	r0, r5, #8
    27b8:	d400      	bmi.n	27bc <__aeabi_dsub+0x51c>
    27ba:	e68d      	b.n	24d8 <__aeabi_dsub+0x238>
    27bc:	4650      	mov	r0, sl
    27be:	1a17      	subs	r7, r2, r0
    27c0:	42ba      	cmp	r2, r7
    27c2:	4192      	sbcs	r2, r2
    27c4:	1b0c      	subs	r4, r1, r4
    27c6:	4252      	negs	r2, r2
    27c8:	1aa4      	subs	r4, r4, r2
    27ca:	4698      	mov	r8, r3
    27cc:	e5ee      	b.n	23ac <__aeabi_dsub+0x10c>
    27ce:	000d      	movs	r5, r1
    27d0:	4315      	orrs	r5, r2
    27d2:	d100      	bne.n	27d6 <__aeabi_dsub+0x536>
    27d4:	e76b      	b.n	26ae <__aeabi_dsub+0x40e>
    27d6:	4650      	mov	r0, sl
    27d8:	0767      	lsls	r7, r4, #29
    27da:	08c0      	lsrs	r0, r0, #3
    27dc:	4307      	orrs	r7, r0
    27de:	2080      	movs	r0, #128	; 0x80
    27e0:	08e4      	lsrs	r4, r4, #3
    27e2:	0300      	lsls	r0, r0, #12
    27e4:	4204      	tst	r4, r0
    27e6:	d007      	beq.n	27f8 <__aeabi_dsub+0x558>
    27e8:	08cd      	lsrs	r5, r1, #3
    27ea:	4205      	tst	r5, r0
    27ec:	d104      	bne.n	27f8 <__aeabi_dsub+0x558>
    27ee:	002c      	movs	r4, r5
    27f0:	4698      	mov	r8, r3
    27f2:	08d7      	lsrs	r7, r2, #3
    27f4:	0749      	lsls	r1, r1, #29
    27f6:	430f      	orrs	r7, r1
    27f8:	0f7b      	lsrs	r3, r7, #29
    27fa:	00e4      	lsls	r4, r4, #3
    27fc:	431c      	orrs	r4, r3
    27fe:	00ff      	lsls	r7, r7, #3
    2800:	4e30      	ldr	r6, [pc, #192]	; (28c4 <__aeabi_dsub+0x624>)
    2802:	e5d3      	b.n	23ac <__aeabi_dsub+0x10c>
    2804:	4e2f      	ldr	r6, [pc, #188]	; (28c4 <__aeabi_dsub+0x624>)
    2806:	45b4      	cmp	ip, r6
    2808:	d1b4      	bne.n	2774 <__aeabi_dsub+0x4d4>
    280a:	000c      	movs	r4, r1
    280c:	0017      	movs	r7, r2
    280e:	4666      	mov	r6, ip
    2810:	e5cc      	b.n	23ac <__aeabi_dsub+0x10c>
    2812:	2700      	movs	r7, #0
    2814:	2400      	movs	r4, #0
    2816:	e5e8      	b.n	23ea <__aeabi_dsub+0x14a>
    2818:	2b00      	cmp	r3, #0
    281a:	d039      	beq.n	2890 <__aeabi_dsub+0x5f0>
    281c:	000b      	movs	r3, r1
    281e:	4313      	orrs	r3, r2
    2820:	d100      	bne.n	2824 <__aeabi_dsub+0x584>
    2822:	e744      	b.n	26ae <__aeabi_dsub+0x40e>
    2824:	08c0      	lsrs	r0, r0, #3
    2826:	0767      	lsls	r7, r4, #29
    2828:	4307      	orrs	r7, r0
    282a:	2080      	movs	r0, #128	; 0x80
    282c:	08e4      	lsrs	r4, r4, #3
    282e:	0300      	lsls	r0, r0, #12
    2830:	4204      	tst	r4, r0
    2832:	d0e1      	beq.n	27f8 <__aeabi_dsub+0x558>
    2834:	08cb      	lsrs	r3, r1, #3
    2836:	4203      	tst	r3, r0
    2838:	d1de      	bne.n	27f8 <__aeabi_dsub+0x558>
    283a:	08d7      	lsrs	r7, r2, #3
    283c:	0749      	lsls	r1, r1, #29
    283e:	430f      	orrs	r7, r1
    2840:	001c      	movs	r4, r3
    2842:	e7d9      	b.n	27f8 <__aeabi_dsub+0x558>
    2844:	2100      	movs	r1, #0
    2846:	e771      	b.n	272c <__aeabi_dsub+0x48c>
    2848:	2500      	movs	r5, #0
    284a:	2700      	movs	r7, #0
    284c:	e5e9      	b.n	2422 <__aeabi_dsub+0x182>
    284e:	002e      	movs	r6, r5
    2850:	0027      	movs	r7, r4
    2852:	3e20      	subs	r6, #32
    2854:	40f7      	lsrs	r7, r6
    2856:	2d20      	cmp	r5, #32
    2858:	d02f      	beq.n	28ba <__aeabi_dsub+0x61a>
    285a:	2640      	movs	r6, #64	; 0x40
    285c:	1b75      	subs	r5, r6, r5
    285e:	40ac      	lsls	r4, r5
    2860:	4650      	mov	r0, sl
    2862:	4320      	orrs	r0, r4
    2864:	1e44      	subs	r4, r0, #1
    2866:	41a0      	sbcs	r0, r4
    2868:	2400      	movs	r4, #0
    286a:	4338      	orrs	r0, r7
    286c:	e6dc      	b.n	2628 <__aeabi_dsub+0x388>
    286e:	2480      	movs	r4, #128	; 0x80
    2870:	2500      	movs	r5, #0
    2872:	0324      	lsls	r4, r4, #12
    2874:	4e13      	ldr	r6, [pc, #76]	; (28c4 <__aeabi_dsub+0x624>)
    2876:	2700      	movs	r7, #0
    2878:	e5d3      	b.n	2422 <__aeabi_dsub+0x182>
    287a:	4650      	mov	r0, sl
    287c:	4320      	orrs	r0, r4
    287e:	0007      	movs	r7, r0
    2880:	1e78      	subs	r0, r7, #1
    2882:	4187      	sbcs	r7, r0
    2884:	2400      	movs	r4, #0
    2886:	18bf      	adds	r7, r7, r2
    2888:	e760      	b.n	274c <__aeabi_dsub+0x4ac>
    288a:	000c      	movs	r4, r1
    288c:	0017      	movs	r7, r2
    288e:	e58d      	b.n	23ac <__aeabi_dsub+0x10c>
    2890:	000c      	movs	r4, r1
    2892:	0017      	movs	r7, r2
    2894:	4e0b      	ldr	r6, [pc, #44]	; (28c4 <__aeabi_dsub+0x624>)
    2896:	e589      	b.n	23ac <__aeabi_dsub+0x10c>
    2898:	001e      	movs	r6, r3
    289a:	0027      	movs	r7, r4
    289c:	3e20      	subs	r6, #32
    289e:	40f7      	lsrs	r7, r6
    28a0:	2b20      	cmp	r3, #32
    28a2:	d00c      	beq.n	28be <__aeabi_dsub+0x61e>
    28a4:	2640      	movs	r6, #64	; 0x40
    28a6:	1af3      	subs	r3, r6, r3
    28a8:	409c      	lsls	r4, r3
    28aa:	4650      	mov	r0, sl
    28ac:	4320      	orrs	r0, r4
    28ae:	1e44      	subs	r4, r0, #1
    28b0:	41a0      	sbcs	r0, r4
    28b2:	4307      	orrs	r7, r0
    28b4:	2400      	movs	r4, #0
    28b6:	18bf      	adds	r7, r7, r2
    28b8:	e748      	b.n	274c <__aeabi_dsub+0x4ac>
    28ba:	2400      	movs	r4, #0
    28bc:	e7d0      	b.n	2860 <__aeabi_dsub+0x5c0>
    28be:	2400      	movs	r4, #0
    28c0:	e7f3      	b.n	28aa <__aeabi_dsub+0x60a>
    28c2:	46c0      	nop			; (mov r8, r8)
    28c4:	000007ff 	.word	0x000007ff
    28c8:	ff7fffff 	.word	0xff7fffff

000028cc <__aeabi_d2iz>:
    28cc:	b530      	push	{r4, r5, lr}
    28ce:	4d13      	ldr	r5, [pc, #76]	; (291c <__aeabi_d2iz+0x50>)
    28d0:	030a      	lsls	r2, r1, #12
    28d2:	004b      	lsls	r3, r1, #1
    28d4:	0b12      	lsrs	r2, r2, #12
    28d6:	0d5b      	lsrs	r3, r3, #21
    28d8:	0fc9      	lsrs	r1, r1, #31
    28da:	2400      	movs	r4, #0
    28dc:	42ab      	cmp	r3, r5
    28de:	dd10      	ble.n	2902 <__aeabi_d2iz+0x36>
    28e0:	4c0f      	ldr	r4, [pc, #60]	; (2920 <__aeabi_d2iz+0x54>)
    28e2:	42a3      	cmp	r3, r4
    28e4:	dc0f      	bgt.n	2906 <__aeabi_d2iz+0x3a>
    28e6:	2480      	movs	r4, #128	; 0x80
    28e8:	4d0e      	ldr	r5, [pc, #56]	; (2924 <__aeabi_d2iz+0x58>)
    28ea:	0364      	lsls	r4, r4, #13
    28ec:	4322      	orrs	r2, r4
    28ee:	1aed      	subs	r5, r5, r3
    28f0:	2d1f      	cmp	r5, #31
    28f2:	dd0b      	ble.n	290c <__aeabi_d2iz+0x40>
    28f4:	480c      	ldr	r0, [pc, #48]	; (2928 <__aeabi_d2iz+0x5c>)
    28f6:	1ac3      	subs	r3, r0, r3
    28f8:	40da      	lsrs	r2, r3
    28fa:	4254      	negs	r4, r2
    28fc:	2900      	cmp	r1, #0
    28fe:	d100      	bne.n	2902 <__aeabi_d2iz+0x36>
    2900:	0014      	movs	r4, r2
    2902:	0020      	movs	r0, r4
    2904:	bd30      	pop	{r4, r5, pc}
    2906:	4b09      	ldr	r3, [pc, #36]	; (292c <__aeabi_d2iz+0x60>)
    2908:	18cc      	adds	r4, r1, r3
    290a:	e7fa      	b.n	2902 <__aeabi_d2iz+0x36>
    290c:	4c08      	ldr	r4, [pc, #32]	; (2930 <__aeabi_d2iz+0x64>)
    290e:	40e8      	lsrs	r0, r5
    2910:	46a4      	mov	ip, r4
    2912:	4463      	add	r3, ip
    2914:	409a      	lsls	r2, r3
    2916:	4302      	orrs	r2, r0
    2918:	e7ef      	b.n	28fa <__aeabi_d2iz+0x2e>
    291a:	46c0      	nop			; (mov r8, r8)
    291c:	000003fe 	.word	0x000003fe
    2920:	0000041d 	.word	0x0000041d
    2924:	00000433 	.word	0x00000433
    2928:	00000413 	.word	0x00000413
    292c:	7fffffff 	.word	0x7fffffff
    2930:	fffffbed 	.word	0xfffffbed

00002934 <__aeabi_i2d>:
    2934:	b570      	push	{r4, r5, r6, lr}
    2936:	2800      	cmp	r0, #0
    2938:	d030      	beq.n	299c <__aeabi_i2d+0x68>
    293a:	17c3      	asrs	r3, r0, #31
    293c:	18c4      	adds	r4, r0, r3
    293e:	405c      	eors	r4, r3
    2940:	0fc5      	lsrs	r5, r0, #31
    2942:	0020      	movs	r0, r4
    2944:	f000 f876 	bl	2a34 <__clzsi2>
    2948:	4b17      	ldr	r3, [pc, #92]	; (29a8 <__aeabi_i2d+0x74>)
    294a:	4a18      	ldr	r2, [pc, #96]	; (29ac <__aeabi_i2d+0x78>)
    294c:	1a1b      	subs	r3, r3, r0
    294e:	1ad2      	subs	r2, r2, r3
    2950:	2a1f      	cmp	r2, #31
    2952:	dd18      	ble.n	2986 <__aeabi_i2d+0x52>
    2954:	4a16      	ldr	r2, [pc, #88]	; (29b0 <__aeabi_i2d+0x7c>)
    2956:	1ad2      	subs	r2, r2, r3
    2958:	4094      	lsls	r4, r2
    295a:	2200      	movs	r2, #0
    295c:	0324      	lsls	r4, r4, #12
    295e:	055b      	lsls	r3, r3, #21
    2960:	0b24      	lsrs	r4, r4, #12
    2962:	0d5b      	lsrs	r3, r3, #21
    2964:	2100      	movs	r1, #0
    2966:	0010      	movs	r0, r2
    2968:	0324      	lsls	r4, r4, #12
    296a:	0d0a      	lsrs	r2, r1, #20
    296c:	0b24      	lsrs	r4, r4, #12
    296e:	0512      	lsls	r2, r2, #20
    2970:	4322      	orrs	r2, r4
    2972:	4c10      	ldr	r4, [pc, #64]	; (29b4 <__aeabi_i2d+0x80>)
    2974:	051b      	lsls	r3, r3, #20
    2976:	4022      	ands	r2, r4
    2978:	4313      	orrs	r3, r2
    297a:	005b      	lsls	r3, r3, #1
    297c:	07ed      	lsls	r5, r5, #31
    297e:	085b      	lsrs	r3, r3, #1
    2980:	432b      	orrs	r3, r5
    2982:	0019      	movs	r1, r3
    2984:	bd70      	pop	{r4, r5, r6, pc}
    2986:	0021      	movs	r1, r4
    2988:	4091      	lsls	r1, r2
    298a:	000a      	movs	r2, r1
    298c:	210b      	movs	r1, #11
    298e:	1a08      	subs	r0, r1, r0
    2990:	40c4      	lsrs	r4, r0
    2992:	055b      	lsls	r3, r3, #21
    2994:	0324      	lsls	r4, r4, #12
    2996:	0b24      	lsrs	r4, r4, #12
    2998:	0d5b      	lsrs	r3, r3, #21
    299a:	e7e3      	b.n	2964 <__aeabi_i2d+0x30>
    299c:	2500      	movs	r5, #0
    299e:	2300      	movs	r3, #0
    29a0:	2400      	movs	r4, #0
    29a2:	2200      	movs	r2, #0
    29a4:	e7de      	b.n	2964 <__aeabi_i2d+0x30>
    29a6:	46c0      	nop			; (mov r8, r8)
    29a8:	0000041e 	.word	0x0000041e
    29ac:	00000433 	.word	0x00000433
    29b0:	00000413 	.word	0x00000413
    29b4:	800fffff 	.word	0x800fffff

000029b8 <__aeabi_cdrcmple>:
    29b8:	4684      	mov	ip, r0
    29ba:	1c10      	adds	r0, r2, #0
    29bc:	4662      	mov	r2, ip
    29be:	468c      	mov	ip, r1
    29c0:	1c19      	adds	r1, r3, #0
    29c2:	4663      	mov	r3, ip
    29c4:	e000      	b.n	29c8 <__aeabi_cdcmpeq>
    29c6:	46c0      	nop			; (mov r8, r8)

000029c8 <__aeabi_cdcmpeq>:
    29c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    29ca:	f000 f8ef 	bl	2bac <__ledf2>
    29ce:	2800      	cmp	r0, #0
    29d0:	d401      	bmi.n	29d6 <__aeabi_cdcmpeq+0xe>
    29d2:	2100      	movs	r1, #0
    29d4:	42c8      	cmn	r0, r1
    29d6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000029d8 <__aeabi_dcmpeq>:
    29d8:	b510      	push	{r4, lr}
    29da:	f000 f849 	bl	2a70 <__eqdf2>
    29de:	4240      	negs	r0, r0
    29e0:	3001      	adds	r0, #1
    29e2:	bd10      	pop	{r4, pc}

000029e4 <__aeabi_dcmplt>:
    29e4:	b510      	push	{r4, lr}
    29e6:	f000 f8e1 	bl	2bac <__ledf2>
    29ea:	2800      	cmp	r0, #0
    29ec:	db01      	blt.n	29f2 <__aeabi_dcmplt+0xe>
    29ee:	2000      	movs	r0, #0
    29f0:	bd10      	pop	{r4, pc}
    29f2:	2001      	movs	r0, #1
    29f4:	bd10      	pop	{r4, pc}
    29f6:	46c0      	nop			; (mov r8, r8)

000029f8 <__aeabi_dcmple>:
    29f8:	b510      	push	{r4, lr}
    29fa:	f000 f8d7 	bl	2bac <__ledf2>
    29fe:	2800      	cmp	r0, #0
    2a00:	dd01      	ble.n	2a06 <__aeabi_dcmple+0xe>
    2a02:	2000      	movs	r0, #0
    2a04:	bd10      	pop	{r4, pc}
    2a06:	2001      	movs	r0, #1
    2a08:	bd10      	pop	{r4, pc}
    2a0a:	46c0      	nop			; (mov r8, r8)

00002a0c <__aeabi_dcmpgt>:
    2a0c:	b510      	push	{r4, lr}
    2a0e:	f000 f869 	bl	2ae4 <__gedf2>
    2a12:	2800      	cmp	r0, #0
    2a14:	dc01      	bgt.n	2a1a <__aeabi_dcmpgt+0xe>
    2a16:	2000      	movs	r0, #0
    2a18:	bd10      	pop	{r4, pc}
    2a1a:	2001      	movs	r0, #1
    2a1c:	bd10      	pop	{r4, pc}
    2a1e:	46c0      	nop			; (mov r8, r8)

00002a20 <__aeabi_dcmpge>:
    2a20:	b510      	push	{r4, lr}
    2a22:	f000 f85f 	bl	2ae4 <__gedf2>
    2a26:	2800      	cmp	r0, #0
    2a28:	da01      	bge.n	2a2e <__aeabi_dcmpge+0xe>
    2a2a:	2000      	movs	r0, #0
    2a2c:	bd10      	pop	{r4, pc}
    2a2e:	2001      	movs	r0, #1
    2a30:	bd10      	pop	{r4, pc}
    2a32:	46c0      	nop			; (mov r8, r8)

00002a34 <__clzsi2>:
    2a34:	211c      	movs	r1, #28
    2a36:	2301      	movs	r3, #1
    2a38:	041b      	lsls	r3, r3, #16
    2a3a:	4298      	cmp	r0, r3
    2a3c:	d301      	bcc.n	2a42 <__clzsi2+0xe>
    2a3e:	0c00      	lsrs	r0, r0, #16
    2a40:	3910      	subs	r1, #16
    2a42:	0a1b      	lsrs	r3, r3, #8
    2a44:	4298      	cmp	r0, r3
    2a46:	d301      	bcc.n	2a4c <__clzsi2+0x18>
    2a48:	0a00      	lsrs	r0, r0, #8
    2a4a:	3908      	subs	r1, #8
    2a4c:	091b      	lsrs	r3, r3, #4
    2a4e:	4298      	cmp	r0, r3
    2a50:	d301      	bcc.n	2a56 <__clzsi2+0x22>
    2a52:	0900      	lsrs	r0, r0, #4
    2a54:	3904      	subs	r1, #4
    2a56:	a202      	add	r2, pc, #8	; (adr r2, 2a60 <__clzsi2+0x2c>)
    2a58:	5c10      	ldrb	r0, [r2, r0]
    2a5a:	1840      	adds	r0, r0, r1
    2a5c:	4770      	bx	lr
    2a5e:	46c0      	nop			; (mov r8, r8)
    2a60:	02020304 	.word	0x02020304
    2a64:	01010101 	.word	0x01010101
	...

00002a70 <__eqdf2>:
    2a70:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a72:	464f      	mov	r7, r9
    2a74:	4646      	mov	r6, r8
    2a76:	46d6      	mov	lr, sl
    2a78:	005c      	lsls	r4, r3, #1
    2a7a:	b5c0      	push	{r6, r7, lr}
    2a7c:	031f      	lsls	r7, r3, #12
    2a7e:	0fdb      	lsrs	r3, r3, #31
    2a80:	469a      	mov	sl, r3
    2a82:	4b17      	ldr	r3, [pc, #92]	; (2ae0 <__eqdf2+0x70>)
    2a84:	030e      	lsls	r6, r1, #12
    2a86:	004d      	lsls	r5, r1, #1
    2a88:	4684      	mov	ip, r0
    2a8a:	4680      	mov	r8, r0
    2a8c:	0b36      	lsrs	r6, r6, #12
    2a8e:	0d6d      	lsrs	r5, r5, #21
    2a90:	0fc9      	lsrs	r1, r1, #31
    2a92:	4691      	mov	r9, r2
    2a94:	0b3f      	lsrs	r7, r7, #12
    2a96:	0d64      	lsrs	r4, r4, #21
    2a98:	2001      	movs	r0, #1
    2a9a:	429d      	cmp	r5, r3
    2a9c:	d008      	beq.n	2ab0 <__eqdf2+0x40>
    2a9e:	429c      	cmp	r4, r3
    2aa0:	d001      	beq.n	2aa6 <__eqdf2+0x36>
    2aa2:	42a5      	cmp	r5, r4
    2aa4:	d00b      	beq.n	2abe <__eqdf2+0x4e>
    2aa6:	bc1c      	pop	{r2, r3, r4}
    2aa8:	4690      	mov	r8, r2
    2aaa:	4699      	mov	r9, r3
    2aac:	46a2      	mov	sl, r4
    2aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ab0:	4663      	mov	r3, ip
    2ab2:	4333      	orrs	r3, r6
    2ab4:	d1f7      	bne.n	2aa6 <__eqdf2+0x36>
    2ab6:	42ac      	cmp	r4, r5
    2ab8:	d1f5      	bne.n	2aa6 <__eqdf2+0x36>
    2aba:	433a      	orrs	r2, r7
    2abc:	d1f3      	bne.n	2aa6 <__eqdf2+0x36>
    2abe:	2001      	movs	r0, #1
    2ac0:	42be      	cmp	r6, r7
    2ac2:	d1f0      	bne.n	2aa6 <__eqdf2+0x36>
    2ac4:	45c8      	cmp	r8, r9
    2ac6:	d1ee      	bne.n	2aa6 <__eqdf2+0x36>
    2ac8:	4551      	cmp	r1, sl
    2aca:	d007      	beq.n	2adc <__eqdf2+0x6c>
    2acc:	2d00      	cmp	r5, #0
    2ace:	d1ea      	bne.n	2aa6 <__eqdf2+0x36>
    2ad0:	4663      	mov	r3, ip
    2ad2:	431e      	orrs	r6, r3
    2ad4:	0030      	movs	r0, r6
    2ad6:	1e46      	subs	r6, r0, #1
    2ad8:	41b0      	sbcs	r0, r6
    2ada:	e7e4      	b.n	2aa6 <__eqdf2+0x36>
    2adc:	2000      	movs	r0, #0
    2ade:	e7e2      	b.n	2aa6 <__eqdf2+0x36>
    2ae0:	000007ff 	.word	0x000007ff

00002ae4 <__gedf2>:
    2ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ae6:	4645      	mov	r5, r8
    2ae8:	46de      	mov	lr, fp
    2aea:	4657      	mov	r7, sl
    2aec:	464e      	mov	r6, r9
    2aee:	b5e0      	push	{r5, r6, r7, lr}
    2af0:	031f      	lsls	r7, r3, #12
    2af2:	0b3d      	lsrs	r5, r7, #12
    2af4:	4f2c      	ldr	r7, [pc, #176]	; (2ba8 <__gedf2+0xc4>)
    2af6:	030e      	lsls	r6, r1, #12
    2af8:	004c      	lsls	r4, r1, #1
    2afa:	46ab      	mov	fp, r5
    2afc:	005d      	lsls	r5, r3, #1
    2afe:	4684      	mov	ip, r0
    2b00:	0b36      	lsrs	r6, r6, #12
    2b02:	0d64      	lsrs	r4, r4, #21
    2b04:	0fc9      	lsrs	r1, r1, #31
    2b06:	4690      	mov	r8, r2
    2b08:	0d6d      	lsrs	r5, r5, #21
    2b0a:	0fdb      	lsrs	r3, r3, #31
    2b0c:	42bc      	cmp	r4, r7
    2b0e:	d02a      	beq.n	2b66 <__gedf2+0x82>
    2b10:	4f25      	ldr	r7, [pc, #148]	; (2ba8 <__gedf2+0xc4>)
    2b12:	42bd      	cmp	r5, r7
    2b14:	d02d      	beq.n	2b72 <__gedf2+0x8e>
    2b16:	2c00      	cmp	r4, #0
    2b18:	d10f      	bne.n	2b3a <__gedf2+0x56>
    2b1a:	4330      	orrs	r0, r6
    2b1c:	0007      	movs	r7, r0
    2b1e:	4681      	mov	r9, r0
    2b20:	4278      	negs	r0, r7
    2b22:	4178      	adcs	r0, r7
    2b24:	b2c0      	uxtb	r0, r0
    2b26:	2d00      	cmp	r5, #0
    2b28:	d117      	bne.n	2b5a <__gedf2+0x76>
    2b2a:	465f      	mov	r7, fp
    2b2c:	433a      	orrs	r2, r7
    2b2e:	d114      	bne.n	2b5a <__gedf2+0x76>
    2b30:	464b      	mov	r3, r9
    2b32:	2000      	movs	r0, #0
    2b34:	2b00      	cmp	r3, #0
    2b36:	d00a      	beq.n	2b4e <__gedf2+0x6a>
    2b38:	e006      	b.n	2b48 <__gedf2+0x64>
    2b3a:	2d00      	cmp	r5, #0
    2b3c:	d102      	bne.n	2b44 <__gedf2+0x60>
    2b3e:	4658      	mov	r0, fp
    2b40:	4302      	orrs	r2, r0
    2b42:	d001      	beq.n	2b48 <__gedf2+0x64>
    2b44:	4299      	cmp	r1, r3
    2b46:	d018      	beq.n	2b7a <__gedf2+0x96>
    2b48:	4248      	negs	r0, r1
    2b4a:	2101      	movs	r1, #1
    2b4c:	4308      	orrs	r0, r1
    2b4e:	bc3c      	pop	{r2, r3, r4, r5}
    2b50:	4690      	mov	r8, r2
    2b52:	4699      	mov	r9, r3
    2b54:	46a2      	mov	sl, r4
    2b56:	46ab      	mov	fp, r5
    2b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b5a:	2800      	cmp	r0, #0
    2b5c:	d0f2      	beq.n	2b44 <__gedf2+0x60>
    2b5e:	2001      	movs	r0, #1
    2b60:	3b01      	subs	r3, #1
    2b62:	4318      	orrs	r0, r3
    2b64:	e7f3      	b.n	2b4e <__gedf2+0x6a>
    2b66:	0037      	movs	r7, r6
    2b68:	4307      	orrs	r7, r0
    2b6a:	d0d1      	beq.n	2b10 <__gedf2+0x2c>
    2b6c:	2002      	movs	r0, #2
    2b6e:	4240      	negs	r0, r0
    2b70:	e7ed      	b.n	2b4e <__gedf2+0x6a>
    2b72:	465f      	mov	r7, fp
    2b74:	4317      	orrs	r7, r2
    2b76:	d0ce      	beq.n	2b16 <__gedf2+0x32>
    2b78:	e7f8      	b.n	2b6c <__gedf2+0x88>
    2b7a:	42ac      	cmp	r4, r5
    2b7c:	dce4      	bgt.n	2b48 <__gedf2+0x64>
    2b7e:	da03      	bge.n	2b88 <__gedf2+0xa4>
    2b80:	1e48      	subs	r0, r1, #1
    2b82:	2101      	movs	r1, #1
    2b84:	4308      	orrs	r0, r1
    2b86:	e7e2      	b.n	2b4e <__gedf2+0x6a>
    2b88:	455e      	cmp	r6, fp
    2b8a:	d8dd      	bhi.n	2b48 <__gedf2+0x64>
    2b8c:	d006      	beq.n	2b9c <__gedf2+0xb8>
    2b8e:	2000      	movs	r0, #0
    2b90:	455e      	cmp	r6, fp
    2b92:	d2dc      	bcs.n	2b4e <__gedf2+0x6a>
    2b94:	2301      	movs	r3, #1
    2b96:	1e48      	subs	r0, r1, #1
    2b98:	4318      	orrs	r0, r3
    2b9a:	e7d8      	b.n	2b4e <__gedf2+0x6a>
    2b9c:	45c4      	cmp	ip, r8
    2b9e:	d8d3      	bhi.n	2b48 <__gedf2+0x64>
    2ba0:	2000      	movs	r0, #0
    2ba2:	45c4      	cmp	ip, r8
    2ba4:	d3f6      	bcc.n	2b94 <__gedf2+0xb0>
    2ba6:	e7d2      	b.n	2b4e <__gedf2+0x6a>
    2ba8:	000007ff 	.word	0x000007ff

00002bac <__ledf2>:
    2bac:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bae:	464e      	mov	r6, r9
    2bb0:	4645      	mov	r5, r8
    2bb2:	46de      	mov	lr, fp
    2bb4:	4657      	mov	r7, sl
    2bb6:	005c      	lsls	r4, r3, #1
    2bb8:	b5e0      	push	{r5, r6, r7, lr}
    2bba:	031f      	lsls	r7, r3, #12
    2bbc:	0fdb      	lsrs	r3, r3, #31
    2bbe:	4699      	mov	r9, r3
    2bc0:	4b2a      	ldr	r3, [pc, #168]	; (2c6c <__ledf2+0xc0>)
    2bc2:	030e      	lsls	r6, r1, #12
    2bc4:	004d      	lsls	r5, r1, #1
    2bc6:	0fc9      	lsrs	r1, r1, #31
    2bc8:	4684      	mov	ip, r0
    2bca:	0b36      	lsrs	r6, r6, #12
    2bcc:	0d6d      	lsrs	r5, r5, #21
    2bce:	468b      	mov	fp, r1
    2bd0:	4690      	mov	r8, r2
    2bd2:	0b3f      	lsrs	r7, r7, #12
    2bd4:	0d64      	lsrs	r4, r4, #21
    2bd6:	429d      	cmp	r5, r3
    2bd8:	d020      	beq.n	2c1c <__ledf2+0x70>
    2bda:	4b24      	ldr	r3, [pc, #144]	; (2c6c <__ledf2+0xc0>)
    2bdc:	429c      	cmp	r4, r3
    2bde:	d022      	beq.n	2c26 <__ledf2+0x7a>
    2be0:	2d00      	cmp	r5, #0
    2be2:	d112      	bne.n	2c0a <__ledf2+0x5e>
    2be4:	4330      	orrs	r0, r6
    2be6:	4243      	negs	r3, r0
    2be8:	4143      	adcs	r3, r0
    2bea:	b2db      	uxtb	r3, r3
    2bec:	2c00      	cmp	r4, #0
    2bee:	d01f      	beq.n	2c30 <__ledf2+0x84>
    2bf0:	2b00      	cmp	r3, #0
    2bf2:	d00c      	beq.n	2c0e <__ledf2+0x62>
    2bf4:	464b      	mov	r3, r9
    2bf6:	2001      	movs	r0, #1
    2bf8:	3b01      	subs	r3, #1
    2bfa:	4303      	orrs	r3, r0
    2bfc:	0018      	movs	r0, r3
    2bfe:	bc3c      	pop	{r2, r3, r4, r5}
    2c00:	4690      	mov	r8, r2
    2c02:	4699      	mov	r9, r3
    2c04:	46a2      	mov	sl, r4
    2c06:	46ab      	mov	fp, r5
    2c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c0a:	2c00      	cmp	r4, #0
    2c0c:	d016      	beq.n	2c3c <__ledf2+0x90>
    2c0e:	45cb      	cmp	fp, r9
    2c10:	d017      	beq.n	2c42 <__ledf2+0x96>
    2c12:	465b      	mov	r3, fp
    2c14:	4259      	negs	r1, r3
    2c16:	2301      	movs	r3, #1
    2c18:	430b      	orrs	r3, r1
    2c1a:	e7ef      	b.n	2bfc <__ledf2+0x50>
    2c1c:	0031      	movs	r1, r6
    2c1e:	2302      	movs	r3, #2
    2c20:	4301      	orrs	r1, r0
    2c22:	d1eb      	bne.n	2bfc <__ledf2+0x50>
    2c24:	e7d9      	b.n	2bda <__ledf2+0x2e>
    2c26:	0039      	movs	r1, r7
    2c28:	2302      	movs	r3, #2
    2c2a:	4311      	orrs	r1, r2
    2c2c:	d1e6      	bne.n	2bfc <__ledf2+0x50>
    2c2e:	e7d7      	b.n	2be0 <__ledf2+0x34>
    2c30:	433a      	orrs	r2, r7
    2c32:	d1dd      	bne.n	2bf0 <__ledf2+0x44>
    2c34:	2300      	movs	r3, #0
    2c36:	2800      	cmp	r0, #0
    2c38:	d0e0      	beq.n	2bfc <__ledf2+0x50>
    2c3a:	e7ea      	b.n	2c12 <__ledf2+0x66>
    2c3c:	433a      	orrs	r2, r7
    2c3e:	d1e6      	bne.n	2c0e <__ledf2+0x62>
    2c40:	e7e7      	b.n	2c12 <__ledf2+0x66>
    2c42:	42a5      	cmp	r5, r4
    2c44:	dce5      	bgt.n	2c12 <__ledf2+0x66>
    2c46:	db05      	blt.n	2c54 <__ledf2+0xa8>
    2c48:	42be      	cmp	r6, r7
    2c4a:	d8e2      	bhi.n	2c12 <__ledf2+0x66>
    2c4c:	d007      	beq.n	2c5e <__ledf2+0xb2>
    2c4e:	2300      	movs	r3, #0
    2c50:	42be      	cmp	r6, r7
    2c52:	d2d3      	bcs.n	2bfc <__ledf2+0x50>
    2c54:	4659      	mov	r1, fp
    2c56:	2301      	movs	r3, #1
    2c58:	3901      	subs	r1, #1
    2c5a:	430b      	orrs	r3, r1
    2c5c:	e7ce      	b.n	2bfc <__ledf2+0x50>
    2c5e:	45c4      	cmp	ip, r8
    2c60:	d8d7      	bhi.n	2c12 <__ledf2+0x66>
    2c62:	2300      	movs	r3, #0
    2c64:	45c4      	cmp	ip, r8
    2c66:	d3f5      	bcc.n	2c54 <__ledf2+0xa8>
    2c68:	e7c8      	b.n	2bfc <__ledf2+0x50>
    2c6a:	46c0      	nop			; (mov r8, r8)
    2c6c:	000007ff 	.word	0x000007ff

00002c70 <__libc_init_array>:
    2c70:	b570      	push	{r4, r5, r6, lr}
    2c72:	2600      	movs	r6, #0
    2c74:	4d0c      	ldr	r5, [pc, #48]	; (2ca8 <__libc_init_array+0x38>)
    2c76:	4c0d      	ldr	r4, [pc, #52]	; (2cac <__libc_init_array+0x3c>)
    2c78:	1b64      	subs	r4, r4, r5
    2c7a:	10a4      	asrs	r4, r4, #2
    2c7c:	42a6      	cmp	r6, r4
    2c7e:	d109      	bne.n	2c94 <__libc_init_array+0x24>
    2c80:	2600      	movs	r6, #0
    2c82:	f000 f8eb 	bl	2e5c <_init>
    2c86:	4d0a      	ldr	r5, [pc, #40]	; (2cb0 <__libc_init_array+0x40>)
    2c88:	4c0a      	ldr	r4, [pc, #40]	; (2cb4 <__libc_init_array+0x44>)
    2c8a:	1b64      	subs	r4, r4, r5
    2c8c:	10a4      	asrs	r4, r4, #2
    2c8e:	42a6      	cmp	r6, r4
    2c90:	d105      	bne.n	2c9e <__libc_init_array+0x2e>
    2c92:	bd70      	pop	{r4, r5, r6, pc}
    2c94:	00b3      	lsls	r3, r6, #2
    2c96:	58eb      	ldr	r3, [r5, r3]
    2c98:	4798      	blx	r3
    2c9a:	3601      	adds	r6, #1
    2c9c:	e7ee      	b.n	2c7c <__libc_init_array+0xc>
    2c9e:	00b3      	lsls	r3, r6, #2
    2ca0:	58eb      	ldr	r3, [r5, r3]
    2ca2:	4798      	blx	r3
    2ca4:	3601      	adds	r6, #1
    2ca6:	e7f2      	b.n	2c8e <__libc_init_array+0x1e>
    2ca8:	00002e68 	.word	0x00002e68
    2cac:	00002e68 	.word	0x00002e68
    2cb0:	00002e68 	.word	0x00002e68
    2cb4:	00002e6c 	.word	0x00002e6c
    2cb8:	682f2e2e 	.word	0x682f2e2e
    2cbc:	732f6c61 	.word	0x732f6c61
    2cc0:	682f6372 	.word	0x682f6372
    2cc4:	615f6c61 	.word	0x615f6c61
    2cc8:	615f6364 	.word	0x615f6364
    2ccc:	636e7973 	.word	0x636e7973
    2cd0:	0000632e 	.word	0x0000632e
    2cd4:	682f2e2e 	.word	0x682f2e2e
    2cd8:	732f6c61 	.word	0x732f6c61
    2cdc:	682f6372 	.word	0x682f6372
    2ce0:	645f6c61 	.word	0x645f6c61
    2ce4:	615f6361 	.word	0x615f6361
    2ce8:	636e7973 	.word	0x636e7973
    2cec:	0000632e 	.word	0x0000632e
    2cf0:	682f2e2e 	.word	0x682f2e2e
    2cf4:	732f6c61 	.word	0x732f6c61
    2cf8:	682f6372 	.word	0x682f6372
    2cfc:	695f6c61 	.word	0x695f6c61
    2d00:	00632e6f 	.word	0x00632e6f
    2d04:	682f2e2e 	.word	0x682f2e2e
    2d08:	732f6c61 	.word	0x732f6c61
    2d0c:	682f6372 	.word	0x682f6372
    2d10:	745f6c61 	.word	0x745f6c61
    2d14:	72656d69 	.word	0x72656d69
    2d18:	0000632e 	.word	0x0000632e
    2d1c:	682f2e2e 	.word	0x682f2e2e
    2d20:	732f6c61 	.word	0x732f6c61
    2d24:	682f6372 	.word	0x682f6372
    2d28:	755f6c61 	.word	0x755f6c61
    2d2c:	74726173 	.word	0x74726173
    2d30:	6e79735f 	.word	0x6e79735f
    2d34:	00632e63 	.word	0x00632e63
    2d38:	682f2e2e 	.word	0x682f2e2e
    2d3c:	752f6c61 	.word	0x752f6c61
    2d40:	736c6974 	.word	0x736c6974
    2d44:	6372732f 	.word	0x6372732f
    2d48:	6974752f 	.word	0x6974752f
    2d4c:	6c5f736c 	.word	0x6c5f736c
    2d50:	2e747369 	.word	0x2e747369
    2d54:	00000063 	.word	0x00000063
    2d58:	682f2e2e 	.word	0x682f2e2e
    2d5c:	752f6c61 	.word	0x752f6c61
    2d60:	736c6974 	.word	0x736c6974
    2d64:	6372732f 	.word	0x6372732f
    2d68:	6974752f 	.word	0x6974752f
    2d6c:	725f736c 	.word	0x725f736c
    2d70:	62676e69 	.word	0x62676e69
    2d74:	65666675 	.word	0x65666675
    2d78:	00632e72 	.word	0x00632e72

00002d7c <_adcs>:
    2d7c:	00030200 00300000 00000000 0f001800     ......0.........
	...
    2d98:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    2da8:	632e6364 00000000 682f2e2e 642f6c70     dc.c....../hpl/d
    2db8:	682f6361 645f6c70 632e6361 00000000     ac/hpl_dac.c....
    2dc8:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    2dd8:	65735f6c 6d6f6372 0000632e              l_sercom.c..

00002de4 <_tcs>:
    2de4:	03680001 00000000 00000000 0000007d     ..h.........}...
    2df4:	00000000 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    2e04:	63745f6c 0000632e 6c6c6548 6f57206f     l_tc.c..Hello Wo
    2e14:	21646c72 00000000 00001f90 00001e50     rld!........P...
    2e24:	00001e50 00001e4c 00001f68 00001f68     P...L...h...h...
    2e34:	00001f5a 00001e4c 00001f68 00001f5a     Z...L...h...Z...
    2e44:	00001f68 00001e4c 00001f70 00001f70     h...L...p...p...
    2e54:	00001f70 00002174                       p...t!..

00002e5c <_init>:
    2e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e5e:	46c0      	nop			; (mov r8, r8)
    2e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2e62:	bc08      	pop	{r3}
    2e64:	469e      	mov	lr, r3
    2e66:	4770      	bx	lr

00002e68 <__init_array_start>:
    2e68:	000000b5 	.word	0x000000b5

00002e6c <_fini>:
    2e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e6e:	46c0      	nop			; (mov r8, r8)
    2e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2e72:	bc08      	pop	{r3}
    2e74:	469e      	mov	lr, r3
    2e76:	4770      	bx	lr

00002e78 <__fini_array_start>:
    2e78:	0000008d 	.word	0x0000008d
